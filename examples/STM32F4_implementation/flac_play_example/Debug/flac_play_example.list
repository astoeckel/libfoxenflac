
flac_play_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b078  08010000  08010000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  0801b078  0801b078  0002b078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b3b0  0801b3b0  00030108  2**0
                  CONTENTS
  4 .ARM          00000008  0801b3b0  0801b3b0  0002b3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b3b8  0801b3b8  00030108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b3b8  0801b3b8  0002b3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b3bc  0801b3bc  0002b3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  0801b3c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000102ec  20000108  0801b4c8  00030108  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200103f4  0801b4c8  000303f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029691  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e94  00000000  00000000  000597c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c8  00000000  00000000  0005f660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c8  00000000  00000000  00061028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ea71  00000000  00000000  000627f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023910  00000000  00000000  00081261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d074  00000000  00000000  000a4b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141be5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070c4  00000000  00000000  00141c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	; (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	; (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	; (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	20000108 	.word	0x20000108
 801001c:	00000000 	.word	0x00000000
 8010020:	0801b060 	.word	0x0801b060

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	; (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	; (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	; (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	2000010c 	.word	0x2000010c
 801003c:	0801b060 	.word	0x0801b060

08010040 <memchr>:
 8010040:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8010044:	2a10      	cmp	r2, #16
 8010046:	db2b      	blt.n	80100a0 <memchr+0x60>
 8010048:	f010 0f07 	tst.w	r0, #7
 801004c:	d008      	beq.n	8010060 <memchr+0x20>
 801004e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010052:	3a01      	subs	r2, #1
 8010054:	428b      	cmp	r3, r1
 8010056:	d02d      	beq.n	80100b4 <memchr+0x74>
 8010058:	f010 0f07 	tst.w	r0, #7
 801005c:	b342      	cbz	r2, 80100b0 <memchr+0x70>
 801005e:	d1f6      	bne.n	801004e <memchr+0xe>
 8010060:	b4f0      	push	{r4, r5, r6, r7}
 8010062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801006a:	f022 0407 	bic.w	r4, r2, #7
 801006e:	f07f 0700 	mvns.w	r7, #0
 8010072:	2300      	movs	r3, #0
 8010074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010078:	3c08      	subs	r4, #8
 801007a:	ea85 0501 	eor.w	r5, r5, r1
 801007e:	ea86 0601 	eor.w	r6, r6, r1
 8010082:	fa85 f547 	uadd8	r5, r5, r7
 8010086:	faa3 f587 	sel	r5, r3, r7
 801008a:	fa86 f647 	uadd8	r6, r6, r7
 801008e:	faa5 f687 	sel	r6, r5, r7
 8010092:	b98e      	cbnz	r6, 80100b8 <memchr+0x78>
 8010094:	d1ee      	bne.n	8010074 <memchr+0x34>
 8010096:	bcf0      	pop	{r4, r5, r6, r7}
 8010098:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801009c:	f002 0207 	and.w	r2, r2, #7
 80100a0:	b132      	cbz	r2, 80100b0 <memchr+0x70>
 80100a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80100a6:	3a01      	subs	r2, #1
 80100a8:	ea83 0301 	eor.w	r3, r3, r1
 80100ac:	b113      	cbz	r3, 80100b4 <memchr+0x74>
 80100ae:	d1f8      	bne.n	80100a2 <memchr+0x62>
 80100b0:	2000      	movs	r0, #0
 80100b2:	4770      	bx	lr
 80100b4:	3801      	subs	r0, #1
 80100b6:	4770      	bx	lr
 80100b8:	2d00      	cmp	r5, #0
 80100ba:	bf06      	itte	eq
 80100bc:	4635      	moveq	r5, r6
 80100be:	3803      	subeq	r0, #3
 80100c0:	3807      	subne	r0, #7
 80100c2:	f015 0f01 	tst.w	r5, #1
 80100c6:	d107      	bne.n	80100d8 <memchr+0x98>
 80100c8:	3001      	adds	r0, #1
 80100ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80100ce:	bf02      	ittt	eq
 80100d0:	3001      	addeq	r0, #1
 80100d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80100d6:	3001      	addeq	r0, #1
 80100d8:	bcf0      	pop	{r4, r5, r6, r7}
 80100da:	3801      	subs	r0, #1
 80100dc:	4770      	bx	lr
 80100de:	bf00      	nop

080100e0 <__aeabi_uldivmod>:
 80100e0:	b953      	cbnz	r3, 80100f8 <__aeabi_uldivmod+0x18>
 80100e2:	b94a      	cbnz	r2, 80100f8 <__aeabi_uldivmod+0x18>
 80100e4:	2900      	cmp	r1, #0
 80100e6:	bf08      	it	eq
 80100e8:	2800      	cmpeq	r0, #0
 80100ea:	bf1c      	itt	ne
 80100ec:	f04f 31ff 	movne.w	r1, #4294967295
 80100f0:	f04f 30ff 	movne.w	r0, #4294967295
 80100f4:	f000 b96e 	b.w	80103d4 <__aeabi_idiv0>
 80100f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80100fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010100:	f000 f806 	bl	8010110 <__udivmoddi4>
 8010104:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801010c:	b004      	add	sp, #16
 801010e:	4770      	bx	lr

08010110 <__udivmoddi4>:
 8010110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010114:	9d08      	ldr	r5, [sp, #32]
 8010116:	4604      	mov	r4, r0
 8010118:	468c      	mov	ip, r1
 801011a:	2b00      	cmp	r3, #0
 801011c:	f040 8083 	bne.w	8010226 <__udivmoddi4+0x116>
 8010120:	428a      	cmp	r2, r1
 8010122:	4617      	mov	r7, r2
 8010124:	d947      	bls.n	80101b6 <__udivmoddi4+0xa6>
 8010126:	fab2 f282 	clz	r2, r2
 801012a:	b142      	cbz	r2, 801013e <__udivmoddi4+0x2e>
 801012c:	f1c2 0020 	rsb	r0, r2, #32
 8010130:	fa24 f000 	lsr.w	r0, r4, r0
 8010134:	4091      	lsls	r1, r2
 8010136:	4097      	lsls	r7, r2
 8010138:	ea40 0c01 	orr.w	ip, r0, r1
 801013c:	4094      	lsls	r4, r2
 801013e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8010142:	0c23      	lsrs	r3, r4, #16
 8010144:	fbbc f6f8 	udiv	r6, ip, r8
 8010148:	fa1f fe87 	uxth.w	lr, r7
 801014c:	fb08 c116 	mls	r1, r8, r6, ip
 8010150:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010154:	fb06 f10e 	mul.w	r1, r6, lr
 8010158:	4299      	cmp	r1, r3
 801015a:	d909      	bls.n	8010170 <__udivmoddi4+0x60>
 801015c:	18fb      	adds	r3, r7, r3
 801015e:	f106 30ff 	add.w	r0, r6, #4294967295
 8010162:	f080 8119 	bcs.w	8010398 <__udivmoddi4+0x288>
 8010166:	4299      	cmp	r1, r3
 8010168:	f240 8116 	bls.w	8010398 <__udivmoddi4+0x288>
 801016c:	3e02      	subs	r6, #2
 801016e:	443b      	add	r3, r7
 8010170:	1a5b      	subs	r3, r3, r1
 8010172:	b2a4      	uxth	r4, r4
 8010174:	fbb3 f0f8 	udiv	r0, r3, r8
 8010178:	fb08 3310 	mls	r3, r8, r0, r3
 801017c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8010180:	fb00 fe0e 	mul.w	lr, r0, lr
 8010184:	45a6      	cmp	lr, r4
 8010186:	d909      	bls.n	801019c <__udivmoddi4+0x8c>
 8010188:	193c      	adds	r4, r7, r4
 801018a:	f100 33ff 	add.w	r3, r0, #4294967295
 801018e:	f080 8105 	bcs.w	801039c <__udivmoddi4+0x28c>
 8010192:	45a6      	cmp	lr, r4
 8010194:	f240 8102 	bls.w	801039c <__udivmoddi4+0x28c>
 8010198:	3802      	subs	r0, #2
 801019a:	443c      	add	r4, r7
 801019c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80101a0:	eba4 040e 	sub.w	r4, r4, lr
 80101a4:	2600      	movs	r6, #0
 80101a6:	b11d      	cbz	r5, 80101b0 <__udivmoddi4+0xa0>
 80101a8:	40d4      	lsrs	r4, r2
 80101aa:	2300      	movs	r3, #0
 80101ac:	e9c5 4300 	strd	r4, r3, [r5]
 80101b0:	4631      	mov	r1, r6
 80101b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101b6:	b902      	cbnz	r2, 80101ba <__udivmoddi4+0xaa>
 80101b8:	deff      	udf	#255	; 0xff
 80101ba:	fab2 f282 	clz	r2, r2
 80101be:	2a00      	cmp	r2, #0
 80101c0:	d150      	bne.n	8010264 <__udivmoddi4+0x154>
 80101c2:	1bcb      	subs	r3, r1, r7
 80101c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80101c8:	fa1f f887 	uxth.w	r8, r7
 80101cc:	2601      	movs	r6, #1
 80101ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80101d2:	0c21      	lsrs	r1, r4, #16
 80101d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80101d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80101dc:	fb08 f30c 	mul.w	r3, r8, ip
 80101e0:	428b      	cmp	r3, r1
 80101e2:	d907      	bls.n	80101f4 <__udivmoddi4+0xe4>
 80101e4:	1879      	adds	r1, r7, r1
 80101e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80101ea:	d202      	bcs.n	80101f2 <__udivmoddi4+0xe2>
 80101ec:	428b      	cmp	r3, r1
 80101ee:	f200 80e9 	bhi.w	80103c4 <__udivmoddi4+0x2b4>
 80101f2:	4684      	mov	ip, r0
 80101f4:	1ac9      	subs	r1, r1, r3
 80101f6:	b2a3      	uxth	r3, r4
 80101f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80101fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8010200:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8010204:	fb08 f800 	mul.w	r8, r8, r0
 8010208:	45a0      	cmp	r8, r4
 801020a:	d907      	bls.n	801021c <__udivmoddi4+0x10c>
 801020c:	193c      	adds	r4, r7, r4
 801020e:	f100 33ff 	add.w	r3, r0, #4294967295
 8010212:	d202      	bcs.n	801021a <__udivmoddi4+0x10a>
 8010214:	45a0      	cmp	r8, r4
 8010216:	f200 80d9 	bhi.w	80103cc <__udivmoddi4+0x2bc>
 801021a:	4618      	mov	r0, r3
 801021c:	eba4 0408 	sub.w	r4, r4, r8
 8010220:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8010224:	e7bf      	b.n	80101a6 <__udivmoddi4+0x96>
 8010226:	428b      	cmp	r3, r1
 8010228:	d909      	bls.n	801023e <__udivmoddi4+0x12e>
 801022a:	2d00      	cmp	r5, #0
 801022c:	f000 80b1 	beq.w	8010392 <__udivmoddi4+0x282>
 8010230:	2600      	movs	r6, #0
 8010232:	e9c5 0100 	strd	r0, r1, [r5]
 8010236:	4630      	mov	r0, r6
 8010238:	4631      	mov	r1, r6
 801023a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801023e:	fab3 f683 	clz	r6, r3
 8010242:	2e00      	cmp	r6, #0
 8010244:	d14a      	bne.n	80102dc <__udivmoddi4+0x1cc>
 8010246:	428b      	cmp	r3, r1
 8010248:	d302      	bcc.n	8010250 <__udivmoddi4+0x140>
 801024a:	4282      	cmp	r2, r0
 801024c:	f200 80b8 	bhi.w	80103c0 <__udivmoddi4+0x2b0>
 8010250:	1a84      	subs	r4, r0, r2
 8010252:	eb61 0103 	sbc.w	r1, r1, r3
 8010256:	2001      	movs	r0, #1
 8010258:	468c      	mov	ip, r1
 801025a:	2d00      	cmp	r5, #0
 801025c:	d0a8      	beq.n	80101b0 <__udivmoddi4+0xa0>
 801025e:	e9c5 4c00 	strd	r4, ip, [r5]
 8010262:	e7a5      	b.n	80101b0 <__udivmoddi4+0xa0>
 8010264:	f1c2 0320 	rsb	r3, r2, #32
 8010268:	fa20 f603 	lsr.w	r6, r0, r3
 801026c:	4097      	lsls	r7, r2
 801026e:	fa01 f002 	lsl.w	r0, r1, r2
 8010272:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010276:	40d9      	lsrs	r1, r3
 8010278:	4330      	orrs	r0, r6
 801027a:	0c03      	lsrs	r3, r0, #16
 801027c:	fbb1 f6fe 	udiv	r6, r1, lr
 8010280:	fa1f f887 	uxth.w	r8, r7
 8010284:	fb0e 1116 	mls	r1, lr, r6, r1
 8010288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801028c:	fb06 f108 	mul.w	r1, r6, r8
 8010290:	4299      	cmp	r1, r3
 8010292:	fa04 f402 	lsl.w	r4, r4, r2
 8010296:	d909      	bls.n	80102ac <__udivmoddi4+0x19c>
 8010298:	18fb      	adds	r3, r7, r3
 801029a:	f106 3cff 	add.w	ip, r6, #4294967295
 801029e:	f080 808d 	bcs.w	80103bc <__udivmoddi4+0x2ac>
 80102a2:	4299      	cmp	r1, r3
 80102a4:	f240 808a 	bls.w	80103bc <__udivmoddi4+0x2ac>
 80102a8:	3e02      	subs	r6, #2
 80102aa:	443b      	add	r3, r7
 80102ac:	1a5b      	subs	r3, r3, r1
 80102ae:	b281      	uxth	r1, r0
 80102b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80102b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80102b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80102bc:	fb00 f308 	mul.w	r3, r0, r8
 80102c0:	428b      	cmp	r3, r1
 80102c2:	d907      	bls.n	80102d4 <__udivmoddi4+0x1c4>
 80102c4:	1879      	adds	r1, r7, r1
 80102c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80102ca:	d273      	bcs.n	80103b4 <__udivmoddi4+0x2a4>
 80102cc:	428b      	cmp	r3, r1
 80102ce:	d971      	bls.n	80103b4 <__udivmoddi4+0x2a4>
 80102d0:	3802      	subs	r0, #2
 80102d2:	4439      	add	r1, r7
 80102d4:	1acb      	subs	r3, r1, r3
 80102d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80102da:	e778      	b.n	80101ce <__udivmoddi4+0xbe>
 80102dc:	f1c6 0c20 	rsb	ip, r6, #32
 80102e0:	fa03 f406 	lsl.w	r4, r3, r6
 80102e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80102e8:	431c      	orrs	r4, r3
 80102ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80102ee:	fa01 f306 	lsl.w	r3, r1, r6
 80102f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80102f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80102fa:	431f      	orrs	r7, r3
 80102fc:	0c3b      	lsrs	r3, r7, #16
 80102fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8010302:	fa1f f884 	uxth.w	r8, r4
 8010306:	fb0e 1119 	mls	r1, lr, r9, r1
 801030a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 801030e:	fb09 fa08 	mul.w	sl, r9, r8
 8010312:	458a      	cmp	sl, r1
 8010314:	fa02 f206 	lsl.w	r2, r2, r6
 8010318:	fa00 f306 	lsl.w	r3, r0, r6
 801031c:	d908      	bls.n	8010330 <__udivmoddi4+0x220>
 801031e:	1861      	adds	r1, r4, r1
 8010320:	f109 30ff 	add.w	r0, r9, #4294967295
 8010324:	d248      	bcs.n	80103b8 <__udivmoddi4+0x2a8>
 8010326:	458a      	cmp	sl, r1
 8010328:	d946      	bls.n	80103b8 <__udivmoddi4+0x2a8>
 801032a:	f1a9 0902 	sub.w	r9, r9, #2
 801032e:	4421      	add	r1, r4
 8010330:	eba1 010a 	sub.w	r1, r1, sl
 8010334:	b2bf      	uxth	r7, r7
 8010336:	fbb1 f0fe 	udiv	r0, r1, lr
 801033a:	fb0e 1110 	mls	r1, lr, r0, r1
 801033e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8010342:	fb00 f808 	mul.w	r8, r0, r8
 8010346:	45b8      	cmp	r8, r7
 8010348:	d907      	bls.n	801035a <__udivmoddi4+0x24a>
 801034a:	19e7      	adds	r7, r4, r7
 801034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8010350:	d22e      	bcs.n	80103b0 <__udivmoddi4+0x2a0>
 8010352:	45b8      	cmp	r8, r7
 8010354:	d92c      	bls.n	80103b0 <__udivmoddi4+0x2a0>
 8010356:	3802      	subs	r0, #2
 8010358:	4427      	add	r7, r4
 801035a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 801035e:	eba7 0708 	sub.w	r7, r7, r8
 8010362:	fba0 8902 	umull	r8, r9, r0, r2
 8010366:	454f      	cmp	r7, r9
 8010368:	46c6      	mov	lr, r8
 801036a:	4649      	mov	r1, r9
 801036c:	d31a      	bcc.n	80103a4 <__udivmoddi4+0x294>
 801036e:	d017      	beq.n	80103a0 <__udivmoddi4+0x290>
 8010370:	b15d      	cbz	r5, 801038a <__udivmoddi4+0x27a>
 8010372:	ebb3 020e 	subs.w	r2, r3, lr
 8010376:	eb67 0701 	sbc.w	r7, r7, r1
 801037a:	fa07 fc0c 	lsl.w	ip, r7, ip
 801037e:	40f2      	lsrs	r2, r6
 8010380:	ea4c 0202 	orr.w	r2, ip, r2
 8010384:	40f7      	lsrs	r7, r6
 8010386:	e9c5 2700 	strd	r2, r7, [r5]
 801038a:	2600      	movs	r6, #0
 801038c:	4631      	mov	r1, r6
 801038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010392:	462e      	mov	r6, r5
 8010394:	4628      	mov	r0, r5
 8010396:	e70b      	b.n	80101b0 <__udivmoddi4+0xa0>
 8010398:	4606      	mov	r6, r0
 801039a:	e6e9      	b.n	8010170 <__udivmoddi4+0x60>
 801039c:	4618      	mov	r0, r3
 801039e:	e6fd      	b.n	801019c <__udivmoddi4+0x8c>
 80103a0:	4543      	cmp	r3, r8
 80103a2:	d2e5      	bcs.n	8010370 <__udivmoddi4+0x260>
 80103a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80103a8:	eb69 0104 	sbc.w	r1, r9, r4
 80103ac:	3801      	subs	r0, #1
 80103ae:	e7df      	b.n	8010370 <__udivmoddi4+0x260>
 80103b0:	4608      	mov	r0, r1
 80103b2:	e7d2      	b.n	801035a <__udivmoddi4+0x24a>
 80103b4:	4660      	mov	r0, ip
 80103b6:	e78d      	b.n	80102d4 <__udivmoddi4+0x1c4>
 80103b8:	4681      	mov	r9, r0
 80103ba:	e7b9      	b.n	8010330 <__udivmoddi4+0x220>
 80103bc:	4666      	mov	r6, ip
 80103be:	e775      	b.n	80102ac <__udivmoddi4+0x19c>
 80103c0:	4630      	mov	r0, r6
 80103c2:	e74a      	b.n	801025a <__udivmoddi4+0x14a>
 80103c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80103c8:	4439      	add	r1, r7
 80103ca:	e713      	b.n	80101f4 <__udivmoddi4+0xe4>
 80103cc:	3802      	subs	r0, #2
 80103ce:	443c      	add	r4, r7
 80103d0:	e724      	b.n	801021c <__udivmoddi4+0x10c>
 80103d2:	bf00      	nop

080103d4 <__aeabi_idiv0>:
 80103d4:	4770      	bx	lr
 80103d6:	bf00      	nop

080103d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b082      	sub	sp, #8
 80103dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80103de:	2300      	movs	r3, #0
 80103e0:	607b      	str	r3, [r7, #4]
 80103e2:	4b0c      	ldr	r3, [pc, #48]	; (8010414 <MX_DMA_Init+0x3c>)
 80103e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103e6:	4a0b      	ldr	r2, [pc, #44]	; (8010414 <MX_DMA_Init+0x3c>)
 80103e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80103ec:	6313      	str	r3, [r2, #48]	; 0x30
 80103ee:	4b09      	ldr	r3, [pc, #36]	; (8010414 <MX_DMA_Init+0x3c>)
 80103f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80103f6:	607b      	str	r3, [r7, #4]
 80103f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 4, 0);
 80103fa:	2200      	movs	r2, #0
 80103fc:	2104      	movs	r1, #4
 80103fe:	2010      	movs	r0, #16
 8010400:	f000 fce4 	bl	8010dcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8010404:	2010      	movs	r0, #16
 8010406:	f000 fcfd 	bl	8010e04 <HAL_NVIC_EnableIRQ>

}
 801040a:	bf00      	nop
 801040c:	3708      	adds	r7, #8
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}
 8010412:	bf00      	nop
 8010414:	40023800 	.word	0x40023800

08010418 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8010418:	b480      	push	{r7}
 801041a:	af00      	add	r7, sp, #0
   memory allocated by the kernel to any task that has since been deleted. */




}
 801041c:	bf00      	nop
 801041e:	46bd      	mov	sp, r7
 8010420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010424:	4770      	bx	lr

08010426 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8010426:	b480      	push	{r7}
 8010428:	b083      	sub	sp, #12
 801042a:	af00      	add	r7, sp, #0
 801042c:	6078      	str	r0, [r7, #4]
 801042e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */

	while(1);
 8010430:	e7fe      	b.n	8010430 <vApplicationStackOverflowHook+0xa>

08010432 <vApplicationMallocFailedHook>:
}
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8010432:	b480      	push	{r7}
 8010434:	af00      	add	r7, sp, #0
	while(1);
 8010436:	e7fe      	b.n	8010436 <vApplicationMallocFailedHook+0x4>

08010438 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8010438:	b580      	push	{r7, lr}
 801043a:	b082      	sub	sp, #8
 801043c:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 801043e:	4a10      	ldr	r2, [pc, #64]	; (8010480 <MX_FREERTOS_Init+0x48>)
 8010440:	2100      	movs	r1, #0
 8010442:	4810      	ldr	r0, [pc, #64]	; (8010484 <MX_FREERTOS_Init+0x4c>)
 8010444:	f003 fc50 	bl	8013ce8 <osThreadNew>
 8010448:	4603      	mov	r3, r0
 801044a:	4a0f      	ldr	r2, [pc, #60]	; (8010488 <MX_FREERTOS_Init+0x50>)
 801044c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  //Stop default task
  osThreadSuspend(defaultTaskHandle);
 801044e:	4b0e      	ldr	r3, [pc, #56]	; (8010488 <MX_FREERTOS_Init+0x50>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	4618      	mov	r0, r3
 8010454:	f003 fcda 	bl	8013e0c <osThreadSuspend>
  osThreadTerminate(defaultTaskHandle);
 8010458:	4b0b      	ldr	r3, [pc, #44]	; (8010488 <MX_FREERTOS_Init+0x50>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	4618      	mov	r0, r3
 801045e:	f003 fcf6 	bl	8013e4e <osThreadTerminate>


  //Start Audio Clip Play loop (found in loop.c)
  rtos_createThread(&acl_task, ACL_RTOS_PRIORITY, ACL_STACKSIZE,
 8010462:	2101      	movs	r1, #1
 8010464:	2300      	movs	r3, #0
 8010466:	9301      	str	r3, [sp, #4]
 8010468:	4b08      	ldr	r3, [pc, #32]	; (801048c <MX_FREERTOS_Init+0x54>)
 801046a:	9300      	str	r3, [sp, #0]
 801046c:	4b08      	ldr	r3, [pc, #32]	; (8010490 <MX_FREERTOS_Init+0x58>)
 801046e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010472:	4808      	ldr	r0, [pc, #32]	; (8010494 <MX_FREERTOS_Init+0x5c>)
 8010474:	f006 fd96 	bl	8016fa4 <rtos_createThread>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8010478:	bf00      	nop
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}
 801047e:	bf00      	nop
 8010480:	0801b17c 	.word	0x0801b17c
 8010484:	08010499 	.word	0x08010499
 8010488:	2000ae4c 	.word	0x2000ae4c
 801048c:	0801b084 	.word	0x0801b084
 8010490:	080106e5 	.word	0x080106e5
 8010494:	2000ae50 	.word	0x2000ae50

08010498 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void *argument)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b082      	sub	sp, #8
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80104a0:	2001      	movs	r0, #1
 80104a2:	f003 fd01 	bl	8013ea8 <osDelay>
 80104a6:	e7fb      	b.n	80104a0 <StartDefaultTask+0x8>

080104a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80104a8:	b480      	push	{r7}
 80104aa:	b083      	sub	sp, #12
 80104ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80104ae:	2300      	movs	r3, #0
 80104b0:	607b      	str	r3, [r7, #4]
 80104b2:	4b10      	ldr	r3, [pc, #64]	; (80104f4 <MX_GPIO_Init+0x4c>)
 80104b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104b6:	4a0f      	ldr	r2, [pc, #60]	; (80104f4 <MX_GPIO_Init+0x4c>)
 80104b8:	f043 0301 	orr.w	r3, r3, #1
 80104bc:	6313      	str	r3, [r2, #48]	; 0x30
 80104be:	4b0d      	ldr	r3, [pc, #52]	; (80104f4 <MX_GPIO_Init+0x4c>)
 80104c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104c2:	f003 0301 	and.w	r3, r3, #1
 80104c6:	607b      	str	r3, [r7, #4]
 80104c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80104ca:	2300      	movs	r3, #0
 80104cc:	603b      	str	r3, [r7, #0]
 80104ce:	4b09      	ldr	r3, [pc, #36]	; (80104f4 <MX_GPIO_Init+0x4c>)
 80104d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104d2:	4a08      	ldr	r2, [pc, #32]	; (80104f4 <MX_GPIO_Init+0x4c>)
 80104d4:	f043 0302 	orr.w	r3, r3, #2
 80104d8:	6313      	str	r3, [r2, #48]	; 0x30
 80104da:	4b06      	ldr	r3, [pc, #24]	; (80104f4 <MX_GPIO_Init+0x4c>)
 80104dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104de:	f003 0302 	and.w	r3, r3, #2
 80104e2:	603b      	str	r3, [r7, #0]
 80104e4:	683b      	ldr	r3, [r7, #0]

}
 80104e6:	bf00      	nop
 80104e8:	370c      	adds	r7, #12
 80104ea:	46bd      	mov	sp, r7
 80104ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f0:	4770      	bx	lr
 80104f2:	bf00      	nop
 80104f4:	40023800 	.word	0x40023800

080104f8 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80104fc:	4b13      	ldr	r3, [pc, #76]	; (801054c <MX_I2S3_Init+0x54>)
 80104fe:	4a14      	ldr	r2, [pc, #80]	; (8010550 <MX_I2S3_Init+0x58>)
 8010500:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8010502:	4b12      	ldr	r3, [pc, #72]	; (801054c <MX_I2S3_Init+0x54>)
 8010504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010508:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 801050a:	4b10      	ldr	r3, [pc, #64]	; (801054c <MX_I2S3_Init+0x54>)
 801050c:	2200      	movs	r2, #0
 801050e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8010510:	4b0e      	ldr	r3, [pc, #56]	; (801054c <MX_I2S3_Init+0x54>)
 8010512:	2201      	movs	r2, #1
 8010514:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8010516:	4b0d      	ldr	r3, [pc, #52]	; (801054c <MX_I2S3_Init+0x54>)
 8010518:	2200      	movs	r2, #0
 801051a:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 801051c:	4b0b      	ldr	r3, [pc, #44]	; (801054c <MX_I2S3_Init+0x54>)
 801051e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8010522:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8010524:	4b09      	ldr	r3, [pc, #36]	; (801054c <MX_I2S3_Init+0x54>)
 8010526:	2200      	movs	r2, #0
 8010528:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 801052a:	4b08      	ldr	r3, [pc, #32]	; (801054c <MX_I2S3_Init+0x54>)
 801052c:	2200      	movs	r2, #0
 801052e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8010530:	4b06      	ldr	r3, [pc, #24]	; (801054c <MX_I2S3_Init+0x54>)
 8010532:	2200      	movs	r2, #0
 8010534:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8010536:	4805      	ldr	r0, [pc, #20]	; (801054c <MX_I2S3_Init+0x54>)
 8010538:	f001 fb18 	bl	8011b6c <HAL_I2S_Init>
 801053c:	4603      	mov	r3, r0
 801053e:	2b00      	cmp	r3, #0
 8010540:	d001      	beq.n	8010546 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8010542:	f000 f997 	bl	8010874 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8010546:	bf00      	nop
 8010548:	bd80      	pop	{r7, pc}
 801054a:	bf00      	nop
 801054c:	2000aeb4 	.word	0x2000aeb4
 8010550:	40003c00 	.word	0x40003c00

08010554 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b08a      	sub	sp, #40	; 0x28
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801055c:	f107 0314 	add.w	r3, r7, #20
 8010560:	2200      	movs	r2, #0
 8010562:	601a      	str	r2, [r3, #0]
 8010564:	605a      	str	r2, [r3, #4]
 8010566:	609a      	str	r2, [r3, #8]
 8010568:	60da      	str	r2, [r3, #12]
 801056a:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI3)
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	4a41      	ldr	r2, [pc, #260]	; (8010678 <HAL_I2S_MspInit+0x124>)
 8010572:	4293      	cmp	r3, r2
 8010574:	d17b      	bne.n	801066e <HAL_I2S_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8010576:	2300      	movs	r3, #0
 8010578:	613b      	str	r3, [r7, #16]
 801057a:	4b40      	ldr	r3, [pc, #256]	; (801067c <HAL_I2S_MspInit+0x128>)
 801057c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801057e:	4a3f      	ldr	r2, [pc, #252]	; (801067c <HAL_I2S_MspInit+0x128>)
 8010580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010584:	6413      	str	r3, [r2, #64]	; 0x40
 8010586:	4b3d      	ldr	r3, [pc, #244]	; (801067c <HAL_I2S_MspInit+0x128>)
 8010588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801058a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801058e:	613b      	str	r3, [r7, #16]
 8010590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010592:	2300      	movs	r3, #0
 8010594:	60fb      	str	r3, [r7, #12]
 8010596:	4b39      	ldr	r3, [pc, #228]	; (801067c <HAL_I2S_MspInit+0x128>)
 8010598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801059a:	4a38      	ldr	r2, [pc, #224]	; (801067c <HAL_I2S_MspInit+0x128>)
 801059c:	f043 0301 	orr.w	r3, r3, #1
 80105a0:	6313      	str	r3, [r2, #48]	; 0x30
 80105a2:	4b36      	ldr	r3, [pc, #216]	; (801067c <HAL_I2S_MspInit+0x128>)
 80105a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105a6:	f003 0301 	and.w	r3, r3, #1
 80105aa:	60fb      	str	r3, [r7, #12]
 80105ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80105ae:	2300      	movs	r3, #0
 80105b0:	60bb      	str	r3, [r7, #8]
 80105b2:	4b32      	ldr	r3, [pc, #200]	; (801067c <HAL_I2S_MspInit+0x128>)
 80105b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105b6:	4a31      	ldr	r2, [pc, #196]	; (801067c <HAL_I2S_MspInit+0x128>)
 80105b8:	f043 0302 	orr.w	r3, r3, #2
 80105bc:	6313      	str	r3, [r2, #48]	; 0x30
 80105be:	4b2f      	ldr	r3, [pc, #188]	; (801067c <HAL_I2S_MspInit+0x128>)
 80105c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105c2:	f003 0302 	and.w	r3, r3, #2
 80105c6:	60bb      	str	r3, [r7, #8]
 80105c8:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration
    PA15     ------> I2S3_WS
    PB3     ------> I2S3_CK
    PB5     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80105ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80105ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80105d0:	2302      	movs	r3, #2
 80105d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105d4:	2300      	movs	r3, #0
 80105d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80105d8:	2300      	movs	r3, #0
 80105da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80105dc:	2306      	movs	r3, #6
 80105de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80105e0:	f107 0314 	add.w	r3, r7, #20
 80105e4:	4619      	mov	r1, r3
 80105e6:	4826      	ldr	r0, [pc, #152]	; (8010680 <HAL_I2S_MspInit+0x12c>)
 80105e8:	f001 f858 	bl	801169c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80105ec:	2328      	movs	r3, #40	; 0x28
 80105ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80105f0:	2302      	movs	r3, #2
 80105f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105f4:	2300      	movs	r3, #0
 80105f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80105f8:	2300      	movs	r3, #0
 80105fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80105fc:	2306      	movs	r3, #6
 80105fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010600:	f107 0314 	add.w	r3, r7, #20
 8010604:	4619      	mov	r1, r3
 8010606:	481f      	ldr	r0, [pc, #124]	; (8010684 <HAL_I2S_MspInit+0x130>)
 8010608:	f001 f848 	bl	801169c <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 801060c:	4b1e      	ldr	r3, [pc, #120]	; (8010688 <HAL_I2S_MspInit+0x134>)
 801060e:	4a1f      	ldr	r2, [pc, #124]	; (801068c <HAL_I2S_MspInit+0x138>)
 8010610:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8010612:	4b1d      	ldr	r3, [pc, #116]	; (8010688 <HAL_I2S_MspInit+0x134>)
 8010614:	2200      	movs	r2, #0
 8010616:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8010618:	4b1b      	ldr	r3, [pc, #108]	; (8010688 <HAL_I2S_MspInit+0x134>)
 801061a:	2240      	movs	r2, #64	; 0x40
 801061c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 801061e:	4b1a      	ldr	r3, [pc, #104]	; (8010688 <HAL_I2S_MspInit+0x134>)
 8010620:	2200      	movs	r2, #0
 8010622:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8010624:	4b18      	ldr	r3, [pc, #96]	; (8010688 <HAL_I2S_MspInit+0x134>)
 8010626:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801062a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801062c:	4b16      	ldr	r3, [pc, #88]	; (8010688 <HAL_I2S_MspInit+0x134>)
 801062e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010632:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8010634:	4b14      	ldr	r3, [pc, #80]	; (8010688 <HAL_I2S_MspInit+0x134>)
 8010636:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801063a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 801063c:	4b12      	ldr	r3, [pc, #72]	; (8010688 <HAL_I2S_MspInit+0x134>)
 801063e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010642:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8010644:	4b10      	ldr	r3, [pc, #64]	; (8010688 <HAL_I2S_MspInit+0x134>)
 8010646:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801064a:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801064c:	4b0e      	ldr	r3, [pc, #56]	; (8010688 <HAL_I2S_MspInit+0x134>)
 801064e:	2200      	movs	r2, #0
 8010650:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8010652:	480d      	ldr	r0, [pc, #52]	; (8010688 <HAL_I2S_MspInit+0x134>)
 8010654:	f000 fbe4 	bl	8010e20 <HAL_DMA_Init>
 8010658:	4603      	mov	r3, r0
 801065a:	2b00      	cmp	r3, #0
 801065c:	d001      	beq.n	8010662 <HAL_I2S_MspInit+0x10e>
    {
      Error_Handler();
 801065e:	f000 f909 	bl	8010874 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	4a08      	ldr	r2, [pc, #32]	; (8010688 <HAL_I2S_MspInit+0x134>)
 8010666:	639a      	str	r2, [r3, #56]	; 0x38
 8010668:	4a07      	ldr	r2, [pc, #28]	; (8010688 <HAL_I2S_MspInit+0x134>)
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 801066e:	bf00      	nop
 8010670:	3728      	adds	r7, #40	; 0x28
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}
 8010676:	bf00      	nop
 8010678:	40003c00 	.word	0x40003c00
 801067c:	40023800 	.word	0x40023800
 8010680:	40020000 	.word	0x40020000
 8010684:	40020400 	.word	0x40020400
 8010688:	2000ae54 	.word	0x2000ae54
 801068c:	40026088 	.word	0x40026088

08010690 <HAL_I2S_MspDeInit>:

void HAL_I2S_MspDeInit(I2S_HandleTypeDef* i2sHandle)
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b082      	sub	sp, #8
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]

  if(i2sHandle->Instance==SPI3)
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	4a0d      	ldr	r2, [pc, #52]	; (80106d4 <HAL_I2S_MspDeInit+0x44>)
 801069e:	4293      	cmp	r3, r2
 80106a0:	d113      	bne.n	80106ca <HAL_I2S_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 80106a2:	4b0d      	ldr	r3, [pc, #52]	; (80106d8 <HAL_I2S_MspDeInit+0x48>)
 80106a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106a6:	4a0c      	ldr	r2, [pc, #48]	; (80106d8 <HAL_I2S_MspDeInit+0x48>)
 80106a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80106ac:	6413      	str	r3, [r2, #64]	; 0x40
    /**I2S3 GPIO Configuration
    PA15     ------> I2S3_WS
    PB3     ------> I2S3_CK
    PB5     ------> I2S3_SD
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 80106ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80106b2:	480a      	ldr	r0, [pc, #40]	; (80106dc <HAL_I2S_MspDeInit+0x4c>)
 80106b4:	f001 f976 	bl	80119a4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_5);
 80106b8:	2128      	movs	r1, #40	; 0x28
 80106ba:	4809      	ldr	r0, [pc, #36]	; (80106e0 <HAL_I2S_MspDeInit+0x50>)
 80106bc:	f001 f972 	bl	80119a4 <HAL_GPIO_DeInit>

    /* I2S3 DMA DeInit */
    HAL_DMA_DeInit(i2sHandle->hdmatx);
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106c4:	4618      	mov	r0, r3
 80106c6:	f000 fc59 	bl	8010f7c <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }
}
 80106ca:	bf00      	nop
 80106cc:	3708      	adds	r7, #8
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}
 80106d2:	bf00      	nop
 80106d4:	40003c00 	.word	0x40003c00
 80106d8:	40023800 	.word	0x40023800
 80106dc:	40020000 	.word	0x40020000
 80106e0:	40020400 	.word	0x40020400

080106e4 <audioClipLoop>:
		and audioClip list.
		It then loops our example audio clip infinitely.
    \param *context NULL not used
*/
void audioClipLoop(void *context)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b082      	sub	sp, #8
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
	//Initialize I2S Object
	i2sInit(&i2sObj, &hi2s3, 0);
 80106ec:	2200      	movs	r2, #0
 80106ee:	4909      	ldr	r1, [pc, #36]	; (8010714 <audioClipLoop+0x30>)
 80106f0:	4809      	ldr	r0, [pc, #36]	; (8010718 <audioClipLoop+0x34>)
 80106f2:	f007 fa4f 	bl	8017b94 <i2sInit>

	//Initialize audio clip thread
	audioClipInit(&i2sObj, NULL);
 80106f6:	2100      	movs	r1, #0
 80106f8:	4807      	ldr	r0, [pc, #28]	; (8010718 <audioClipLoop+0x34>)
 80106fa:	f006 fd55 	bl	80171a8 <audioClipInit>
	audioClipListInit(clips, AUDIO_CLIPS_NUMBER);
 80106fe:	2101      	movs	r1, #1
 8010700:	4806      	ldr	r0, [pc, #24]	; (801071c <audioClipLoop+0x38>)
 8010702:	f006 fdd5 	bl	80172b0 <audioClipListInit>

	while(1)
	{
		//Play audio clip
		audioClipPlay(0);
 8010706:	2000      	movs	r0, #0
 8010708:	f006 fd90 	bl	801722c <audioClipPlay>

		rtos_Sleep_mS(100);
 801070c:	2064      	movs	r0, #100	; 0x64
 801070e:	f006 fc9f 	bl	8017050 <rtos_Sleep_mS>
	{
 8010712:	e7f8      	b.n	8010706 <audioClipLoop+0x22>
 8010714:	2000aeb4 	.word	0x2000aeb4
 8010718:	2000aefc 	.word	0x2000aefc
 801071c:	20000000 	.word	0x20000000

08010720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010724:	f000 fa5e 	bl	8010be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010728:	f000 f80e 	bl	8010748 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801072c:	f7ff febc 	bl	80104a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8010730:	f7ff fe52 	bl	80103d8 <MX_DMA_Init>
  MX_I2S3_Init();
 8010734:	f7ff fee0 	bl	80104f8 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8010738:	f003 fa8c 	bl	8013c54 <osKernelInitialize>
  MX_FREERTOS_Init();
 801073c:	f7ff fe7c 	bl	8010438 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8010740:	f003 faac 	bl	8013c9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8010744:	e7fe      	b.n	8010744 <main+0x24>
	...

08010748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b09a      	sub	sp, #104	; 0x68
 801074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801074e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010752:	2230      	movs	r2, #48	; 0x30
 8010754:	2100      	movs	r1, #0
 8010756:	4618      	mov	r0, r3
 8010758:	f009 fcf0 	bl	801a13c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801075c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010760:	2200      	movs	r2, #0
 8010762:	601a      	str	r2, [r3, #0]
 8010764:	605a      	str	r2, [r3, #4]
 8010766:	609a      	str	r2, [r3, #8]
 8010768:	60da      	str	r2, [r3, #12]
 801076a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801076c:	f107 030c 	add.w	r3, r7, #12
 8010770:	2200      	movs	r2, #0
 8010772:	601a      	str	r2, [r3, #0]
 8010774:	605a      	str	r2, [r3, #4]
 8010776:	609a      	str	r2, [r3, #8]
 8010778:	60da      	str	r2, [r3, #12]
 801077a:	611a      	str	r2, [r3, #16]
 801077c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 801077e:	2300      	movs	r3, #0
 8010780:	60bb      	str	r3, [r7, #8]
 8010782:	4b31      	ldr	r3, [pc, #196]	; (8010848 <SystemClock_Config+0x100>)
 8010784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010786:	4a30      	ldr	r2, [pc, #192]	; (8010848 <SystemClock_Config+0x100>)
 8010788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801078c:	6413      	str	r3, [r2, #64]	; 0x40
 801078e:	4b2e      	ldr	r3, [pc, #184]	; (8010848 <SystemClock_Config+0x100>)
 8010790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010796:	60bb      	str	r3, [r7, #8]
 8010798:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801079a:	2300      	movs	r3, #0
 801079c:	607b      	str	r3, [r7, #4]
 801079e:	4b2b      	ldr	r3, [pc, #172]	; (801084c <SystemClock_Config+0x104>)
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	4a2a      	ldr	r2, [pc, #168]	; (801084c <SystemClock_Config+0x104>)
 80107a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80107a8:	6013      	str	r3, [r2, #0]
 80107aa:	4b28      	ldr	r3, [pc, #160]	; (801084c <SystemClock_Config+0x104>)
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80107b2:	607b      	str	r3, [r7, #4]
 80107b4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80107b6:	2302      	movs	r3, #2
 80107b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80107ba:	2301      	movs	r3, #1
 80107bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80107be:	2310      	movs	r3, #16
 80107c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80107c2:	2302      	movs	r3, #2
 80107c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80107c6:	2300      	movs	r3, #0
 80107c8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 8;
 80107ca:	2308      	movs	r3, #8
 80107cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80107ce:	23c0      	movs	r3, #192	; 0xc0
 80107d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80107d2:	2304      	movs	r3, #4
 80107d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80107d6:	2304      	movs	r3, #4
 80107d8:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80107da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80107de:	4618      	mov	r0, r3
 80107e0:	f002 f992 	bl	8012b08 <HAL_RCC_OscConfig>
 80107e4:	4603      	mov	r3, r0
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d001      	beq.n	80107ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80107ea:	f000 f843 	bl	8010874 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80107ee:	230f      	movs	r3, #15
 80107f0:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80107f2:	2302      	movs	r3, #2
 80107f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80107f6:	2300      	movs	r3, #0
 80107f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80107fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80107fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8010800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010804:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8010806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801080a:	2105      	movs	r1, #5
 801080c:	4618      	mov	r0, r3
 801080e:	f002 fbf3 	bl	8012ff8 <HAL_RCC_ClockConfig>
 8010812:	4603      	mov	r3, r0
 8010814:	2b00      	cmp	r3, #0
 8010816:	d001      	beq.n	801081c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8010818:	f000 f82c 	bl	8010874 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 801081c:	2301      	movs	r3, #1
 801081e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8010820:	2360      	movs	r3, #96	; 0x60
 8010822:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8010824:	2308      	movs	r3, #8
 8010826:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8010828:	2302      	movs	r3, #2
 801082a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801082c:	f107 030c 	add.w	r3, r7, #12
 8010830:	4618      	mov	r0, r3
 8010832:	f002 fdfb 	bl	801342c <HAL_RCCEx_PeriphCLKConfig>
 8010836:	4603      	mov	r3, r0
 8010838:	2b00      	cmp	r3, #0
 801083a:	d001      	beq.n	8010840 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 801083c:	f000 f81a 	bl	8010874 <Error_Handler>
  }
}
 8010840:	bf00      	nop
 8010842:	3768      	adds	r7, #104	; 0x68
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}
 8010848:	40023800 	.word	0x40023800
 801084c:	40007000 	.word	0x40007000

08010850 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b082      	sub	sp, #8
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	4a04      	ldr	r2, [pc, #16]	; (8010870 <HAL_TIM_PeriodElapsedCallback+0x20>)
 801085e:	4293      	cmp	r3, r2
 8010860:	d101      	bne.n	8010866 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8010862:	f000 f9db 	bl	8010c1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8010866:	bf00      	nop
 8010868:	3708      	adds	r7, #8
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}
 801086e:	bf00      	nop
 8010870:	40010000 	.word	0x40010000

08010874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010874:	b480      	push	{r7}
 8010876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8010878:	bf00      	nop
 801087a:	46bd      	mov	sp, r7
 801087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010880:	4770      	bx	lr
	...

08010884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b082      	sub	sp, #8
 8010888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801088a:	2300      	movs	r3, #0
 801088c:	607b      	str	r3, [r7, #4]
 801088e:	4b12      	ldr	r3, [pc, #72]	; (80108d8 <HAL_MspInit+0x54>)
 8010890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010892:	4a11      	ldr	r2, [pc, #68]	; (80108d8 <HAL_MspInit+0x54>)
 8010894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010898:	6453      	str	r3, [r2, #68]	; 0x44
 801089a:	4b0f      	ldr	r3, [pc, #60]	; (80108d8 <HAL_MspInit+0x54>)
 801089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801089e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80108a2:	607b      	str	r3, [r7, #4]
 80108a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80108a6:	2300      	movs	r3, #0
 80108a8:	603b      	str	r3, [r7, #0]
 80108aa:	4b0b      	ldr	r3, [pc, #44]	; (80108d8 <HAL_MspInit+0x54>)
 80108ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108ae:	4a0a      	ldr	r2, [pc, #40]	; (80108d8 <HAL_MspInit+0x54>)
 80108b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80108b4:	6413      	str	r3, [r2, #64]	; 0x40
 80108b6:	4b08      	ldr	r3, [pc, #32]	; (80108d8 <HAL_MspInit+0x54>)
 80108b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80108be:	603b      	str	r3, [r7, #0]
 80108c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80108c2:	2200      	movs	r2, #0
 80108c4:	210f      	movs	r1, #15
 80108c6:	f06f 0001 	mvn.w	r0, #1
 80108ca:	f000 fa7f 	bl	8010dcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80108ce:	bf00      	nop
 80108d0:	3708      	adds	r7, #8
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}
 80108d6:	bf00      	nop
 80108d8:	40023800 	.word	0x40023800

080108dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b08c      	sub	sp, #48	; 0x30
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80108e4:	2300      	movs	r3, #0
 80108e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80108e8:	2300      	movs	r3, #0
 80108ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80108ec:	2200      	movs	r2, #0
 80108ee:	6879      	ldr	r1, [r7, #4]
 80108f0:	2019      	movs	r0, #25
 80108f2:	f000 fa6b 	bl	8010dcc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80108f6:	2019      	movs	r0, #25
 80108f8:	f000 fa84 	bl	8010e04 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80108fc:	2300      	movs	r3, #0
 80108fe:	60fb      	str	r3, [r7, #12]
 8010900:	4b1f      	ldr	r3, [pc, #124]	; (8010980 <HAL_InitTick+0xa4>)
 8010902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010904:	4a1e      	ldr	r2, [pc, #120]	; (8010980 <HAL_InitTick+0xa4>)
 8010906:	f043 0301 	orr.w	r3, r3, #1
 801090a:	6453      	str	r3, [r2, #68]	; 0x44
 801090c:	4b1c      	ldr	r3, [pc, #112]	; (8010980 <HAL_InitTick+0xa4>)
 801090e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010910:	f003 0301 	and.w	r3, r3, #1
 8010914:	60fb      	str	r3, [r7, #12]
 8010916:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8010918:	f107 0210 	add.w	r2, r7, #16
 801091c:	f107 0314 	add.w	r3, r7, #20
 8010920:	4611      	mov	r1, r2
 8010922:	4618      	mov	r0, r3
 8010924:	f002 fd50 	bl	80133c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8010928:	f002 fd3a 	bl	80133a0 <HAL_RCC_GetPCLK2Freq>
 801092c:	4603      	mov	r3, r0
 801092e:	005b      	lsls	r3, r3, #1
 8010930:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8010932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010934:	4a13      	ldr	r2, [pc, #76]	; (8010984 <HAL_InitTick+0xa8>)
 8010936:	fba2 2303 	umull	r2, r3, r2, r3
 801093a:	0c9b      	lsrs	r3, r3, #18
 801093c:	3b01      	subs	r3, #1
 801093e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8010940:	4b11      	ldr	r3, [pc, #68]	; (8010988 <HAL_InitTick+0xac>)
 8010942:	4a12      	ldr	r2, [pc, #72]	; (801098c <HAL_InitTick+0xb0>)
 8010944:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8010946:	4b10      	ldr	r3, [pc, #64]	; (8010988 <HAL_InitTick+0xac>)
 8010948:	f240 32e7 	movw	r2, #999	; 0x3e7
 801094c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 801094e:	4a0e      	ldr	r2, [pc, #56]	; (8010988 <HAL_InitTick+0xac>)
 8010950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010952:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8010954:	4b0c      	ldr	r3, [pc, #48]	; (8010988 <HAL_InitTick+0xac>)
 8010956:	2200      	movs	r2, #0
 8010958:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801095a:	4b0b      	ldr	r3, [pc, #44]	; (8010988 <HAL_InitTick+0xac>)
 801095c:	2200      	movs	r2, #0
 801095e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8010960:	4809      	ldr	r0, [pc, #36]	; (8010988 <HAL_InitTick+0xac>)
 8010962:	f002 feb3 	bl	80136cc <HAL_TIM_Base_Init>
 8010966:	4603      	mov	r3, r0
 8010968:	2b00      	cmp	r3, #0
 801096a:	d104      	bne.n	8010976 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 801096c:	4806      	ldr	r0, [pc, #24]	; (8010988 <HAL_InitTick+0xac>)
 801096e:	f002 ff07 	bl	8013780 <HAL_TIM_Base_Start_IT>
 8010972:	4603      	mov	r3, r0
 8010974:	e000      	b.n	8010978 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8010976:	2301      	movs	r3, #1
}
 8010978:	4618      	mov	r0, r3
 801097a:	3730      	adds	r7, #48	; 0x30
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}
 8010980:	40023800 	.word	0x40023800
 8010984:	431bde83 	.word	0x431bde83
 8010988:	2000af14 	.word	0x2000af14
 801098c:	40010000 	.word	0x40010000

08010990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010990:	b480      	push	{r7}
 8010992:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8010994:	bf00      	nop
 8010996:	46bd      	mov	sp, r7
 8010998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099c:	4770      	bx	lr

0801099e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801099e:	b480      	push	{r7}
 80109a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80109a2:	e7fe      	b.n	80109a2 <HardFault_Handler+0x4>

080109a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80109a4:	b480      	push	{r7}
 80109a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80109a8:	e7fe      	b.n	80109a8 <MemManage_Handler+0x4>

080109aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80109aa:	b480      	push	{r7}
 80109ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80109ae:	e7fe      	b.n	80109ae <BusFault_Handler+0x4>

080109b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80109b0:	b480      	push	{r7}
 80109b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80109b4:	e7fe      	b.n	80109b4 <UsageFault_Handler+0x4>

080109b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80109b6:	b480      	push	{r7}
 80109b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80109ba:	bf00      	nop
 80109bc:	46bd      	mov	sp, r7
 80109be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c2:	4770      	bx	lr

080109c4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80109c8:	4802      	ldr	r0, [pc, #8]	; (80109d4 <DMA1_Stream5_IRQHandler+0x10>)
 80109ca:	f000 fbfd 	bl	80111c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80109ce:	bf00      	nop
 80109d0:	bd80      	pop	{r7, pc}
 80109d2:	bf00      	nop
 80109d4:	2000ae54 	.word	0x2000ae54

080109d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80109dc:	4802      	ldr	r0, [pc, #8]	; (80109e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80109de:	f002 ff31 	bl	8013844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80109e2:	bf00      	nop
 80109e4:	bd80      	pop	{r7, pc}
 80109e6:	bf00      	nop
 80109e8:	2000af14 	.word	0x2000af14

080109ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80109ec:	b480      	push	{r7}
 80109ee:	af00      	add	r7, sp, #0
	return 1;
 80109f0:	2301      	movs	r3, #1
}
 80109f2:	4618      	mov	r0, r3
 80109f4:	46bd      	mov	sp, r7
 80109f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fa:	4770      	bx	lr

080109fc <_kill>:

int _kill(int pid, int sig)
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b082      	sub	sp, #8
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
 8010a04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8010a06:	f009 fb4f 	bl	801a0a8 <__errno>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	2216      	movs	r2, #22
 8010a0e:	601a      	str	r2, [r3, #0]
	return -1;
 8010a10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	3708      	adds	r7, #8
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}

08010a1c <_exit>:

void _exit (int status)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b082      	sub	sp, #8
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8010a24:	f04f 31ff 	mov.w	r1, #4294967295
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	f7ff ffe7 	bl	80109fc <_kill>
	while (1) {}		/* Make sure we hang here */
 8010a2e:	e7fe      	b.n	8010a2e <_exit+0x12>

08010a30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b086      	sub	sp, #24
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	60f8      	str	r0, [r7, #12]
 8010a38:	60b9      	str	r1, [r7, #8]
 8010a3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	617b      	str	r3, [r7, #20]
 8010a40:	e00a      	b.n	8010a58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8010a42:	f3af 8000 	nop.w
 8010a46:	4601      	mov	r1, r0
 8010a48:	68bb      	ldr	r3, [r7, #8]
 8010a4a:	1c5a      	adds	r2, r3, #1
 8010a4c:	60ba      	str	r2, [r7, #8]
 8010a4e:	b2ca      	uxtb	r2, r1
 8010a50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010a52:	697b      	ldr	r3, [r7, #20]
 8010a54:	3301      	adds	r3, #1
 8010a56:	617b      	str	r3, [r7, #20]
 8010a58:	697a      	ldr	r2, [r7, #20]
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	429a      	cmp	r2, r3
 8010a5e:	dbf0      	blt.n	8010a42 <_read+0x12>
	}

return len;
 8010a60:	687b      	ldr	r3, [r7, #4]
}
 8010a62:	4618      	mov	r0, r3
 8010a64:	3718      	adds	r7, #24
 8010a66:	46bd      	mov	sp, r7
 8010a68:	bd80      	pop	{r7, pc}

08010a6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8010a6a:	b580      	push	{r7, lr}
 8010a6c:	b086      	sub	sp, #24
 8010a6e:	af00      	add	r7, sp, #0
 8010a70:	60f8      	str	r0, [r7, #12]
 8010a72:	60b9      	str	r1, [r7, #8]
 8010a74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010a76:	2300      	movs	r3, #0
 8010a78:	617b      	str	r3, [r7, #20]
 8010a7a:	e009      	b.n	8010a90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8010a7c:	68bb      	ldr	r3, [r7, #8]
 8010a7e:	1c5a      	adds	r2, r3, #1
 8010a80:	60ba      	str	r2, [r7, #8]
 8010a82:	781b      	ldrb	r3, [r3, #0]
 8010a84:	4618      	mov	r0, r3
 8010a86:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	3301      	adds	r3, #1
 8010a8e:	617b      	str	r3, [r7, #20]
 8010a90:	697a      	ldr	r2, [r7, #20]
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	429a      	cmp	r2, r3
 8010a96:	dbf1      	blt.n	8010a7c <_write+0x12>
	}
	return len;
 8010a98:	687b      	ldr	r3, [r7, #4]
}
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	3718      	adds	r7, #24
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}

08010aa2 <_close>:

int _close(int file)
{
 8010aa2:	b480      	push	{r7}
 8010aa4:	b083      	sub	sp, #12
 8010aa6:	af00      	add	r7, sp, #0
 8010aa8:	6078      	str	r0, [r7, #4]
	return -1;
 8010aaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	370c      	adds	r7, #12
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab8:	4770      	bx	lr

08010aba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8010aba:	b480      	push	{r7}
 8010abc:	b083      	sub	sp, #12
 8010abe:	af00      	add	r7, sp, #0
 8010ac0:	6078      	str	r0, [r7, #4]
 8010ac2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010aca:	605a      	str	r2, [r3, #4]
	return 0;
 8010acc:	2300      	movs	r3, #0
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	370c      	adds	r7, #12
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad8:	4770      	bx	lr

08010ada <_isatty>:

int _isatty(int file)
{
 8010ada:	b480      	push	{r7}
 8010adc:	b083      	sub	sp, #12
 8010ade:	af00      	add	r7, sp, #0
 8010ae0:	6078      	str	r0, [r7, #4]
	return 1;
 8010ae2:	2301      	movs	r3, #1
}
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	370c      	adds	r7, #12
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aee:	4770      	bx	lr

08010af0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010af0:	b480      	push	{r7}
 8010af2:	b085      	sub	sp, #20
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	60f8      	str	r0, [r7, #12]
 8010af8:	60b9      	str	r1, [r7, #8]
 8010afa:	607a      	str	r2, [r7, #4]
	return 0;
 8010afc:	2300      	movs	r3, #0
}
 8010afe:	4618      	mov	r0, r3
 8010b00:	3714      	adds	r7, #20
 8010b02:	46bd      	mov	sp, r7
 8010b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b08:	4770      	bx	lr
	...

08010b0c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b084      	sub	sp, #16
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8010b14:	4b11      	ldr	r3, [pc, #68]	; (8010b5c <_sbrk+0x50>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d102      	bne.n	8010b22 <_sbrk+0x16>
		heap_end = &end;
 8010b1c:	4b0f      	ldr	r3, [pc, #60]	; (8010b5c <_sbrk+0x50>)
 8010b1e:	4a10      	ldr	r2, [pc, #64]	; (8010b60 <_sbrk+0x54>)
 8010b20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8010b22:	4b0e      	ldr	r3, [pc, #56]	; (8010b5c <_sbrk+0x50>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8010b28:	4b0c      	ldr	r3, [pc, #48]	; (8010b5c <_sbrk+0x50>)
 8010b2a:	681a      	ldr	r2, [r3, #0]
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	4413      	add	r3, r2
 8010b30:	466a      	mov	r2, sp
 8010b32:	4293      	cmp	r3, r2
 8010b34:	d907      	bls.n	8010b46 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8010b36:	f009 fab7 	bl	801a0a8 <__errno>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	220c      	movs	r2, #12
 8010b3e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8010b40:	f04f 33ff 	mov.w	r3, #4294967295
 8010b44:	e006      	b.n	8010b54 <_sbrk+0x48>
	}

	heap_end += incr;
 8010b46:	4b05      	ldr	r3, [pc, #20]	; (8010b5c <_sbrk+0x50>)
 8010b48:	681a      	ldr	r2, [r3, #0]
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	4413      	add	r3, r2
 8010b4e:	4a03      	ldr	r2, [pc, #12]	; (8010b5c <_sbrk+0x50>)
 8010b50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8010b52:	68fb      	ldr	r3, [r7, #12]
}
 8010b54:	4618      	mov	r0, r3
 8010b56:	3710      	adds	r7, #16
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd80      	pop	{r7, pc}
 8010b5c:	20000124 	.word	0x20000124
 8010b60:	200103f8 	.word	0x200103f8

08010b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010b64:	b480      	push	{r7}
 8010b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010b68:	4b08      	ldr	r3, [pc, #32]	; (8010b8c <SystemInit+0x28>)
 8010b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b6e:	4a07      	ldr	r2, [pc, #28]	; (8010b8c <SystemInit+0x28>)
 8010b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010b78:	4b04      	ldr	r3, [pc, #16]	; (8010b8c <SystemInit+0x28>)
 8010b7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010b7e:	609a      	str	r2, [r3, #8]
#endif
}
 8010b80:	bf00      	nop
 8010b82:	46bd      	mov	sp, r7
 8010b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b88:	4770      	bx	lr
 8010b8a:	bf00      	nop
 8010b8c:	e000ed00 	.word	0xe000ed00

08010b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8010b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010bc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010b94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010b96:	e003      	b.n	8010ba0 <LoopCopyDataInit>

08010b98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010b98:	4b0c      	ldr	r3, [pc, #48]	; (8010bcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010b9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010b9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010b9e:	3104      	adds	r1, #4

08010ba0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010ba0:	480b      	ldr	r0, [pc, #44]	; (8010bd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010ba2:	4b0c      	ldr	r3, [pc, #48]	; (8010bd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010ba4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010ba6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010ba8:	d3f6      	bcc.n	8010b98 <CopyDataInit>
  ldr  r2, =_sbss
 8010baa:	4a0b      	ldr	r2, [pc, #44]	; (8010bd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010bac:	e002      	b.n	8010bb4 <LoopFillZerobss>

08010bae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010bae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010bb0:	f842 3b04 	str.w	r3, [r2], #4

08010bb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010bb4:	4b09      	ldr	r3, [pc, #36]	; (8010bdc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010bb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010bb8:	d3f9      	bcc.n	8010bae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010bba:	f7ff ffd3 	bl	8010b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010bbe:	f009 fa8b 	bl	801a0d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010bc2:	f7ff fdad 	bl	8010720 <main>
  bx  lr    
 8010bc6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8010bc8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8010bcc:	0801b3c0 	.word	0x0801b3c0
  ldr  r0, =_sdata
 8010bd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010bd4:	20000108 	.word	0x20000108
  ldr  r2, =_sbss
 8010bd8:	20000108 	.word	0x20000108
  ldr  r3, = _ebss
 8010bdc:	200103f4 	.word	0x200103f4

08010be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010be0:	e7fe      	b.n	8010be0 <ADC_IRQHandler>
	...

08010be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010be8:	4b0b      	ldr	r3, [pc, #44]	; (8010c18 <HAL_Init+0x34>)
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	4a0a      	ldr	r2, [pc, #40]	; (8010c18 <HAL_Init+0x34>)
 8010bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010bf4:	4b08      	ldr	r3, [pc, #32]	; (8010c18 <HAL_Init+0x34>)
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	4a07      	ldr	r2, [pc, #28]	; (8010c18 <HAL_Init+0x34>)
 8010bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010bfe:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010c00:	2003      	movs	r0, #3
 8010c02:	f000 f8d8 	bl	8010db6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010c06:	2000      	movs	r0, #0
 8010c08:	f7ff fe68 	bl	80108dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010c0c:	f7ff fe3a 	bl	8010884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010c10:	2300      	movs	r3, #0
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	bd80      	pop	{r7, pc}
 8010c16:	bf00      	nop
 8010c18:	40023c00 	.word	0x40023c00

08010c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010c1c:	b480      	push	{r7}
 8010c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010c20:	4b06      	ldr	r3, [pc, #24]	; (8010c3c <HAL_IncTick+0x20>)
 8010c22:	781b      	ldrb	r3, [r3, #0]
 8010c24:	461a      	mov	r2, r3
 8010c26:	4b06      	ldr	r3, [pc, #24]	; (8010c40 <HAL_IncTick+0x24>)
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	4413      	add	r3, r2
 8010c2c:	4a04      	ldr	r2, [pc, #16]	; (8010c40 <HAL_IncTick+0x24>)
 8010c2e:	6013      	str	r3, [r2, #0]
}
 8010c30:	bf00      	nop
 8010c32:	46bd      	mov	sp, r7
 8010c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c38:	4770      	bx	lr
 8010c3a:	bf00      	nop
 8010c3c:	20000038 	.word	0x20000038
 8010c40:	2000af5c 	.word	0x2000af5c

08010c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010c44:	b480      	push	{r7}
 8010c46:	af00      	add	r7, sp, #0
  return uwTick;
 8010c48:	4b03      	ldr	r3, [pc, #12]	; (8010c58 <HAL_GetTick+0x14>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
}
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c54:	4770      	bx	lr
 8010c56:	bf00      	nop
 8010c58:	2000af5c 	.word	0x2000af5c

08010c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010c5c:	b480      	push	{r7}
 8010c5e:	b085      	sub	sp, #20
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f003 0307 	and.w	r3, r3, #7
 8010c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010c6c:	4b0c      	ldr	r3, [pc, #48]	; (8010ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8010c6e:	68db      	ldr	r3, [r3, #12]
 8010c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010c72:	68ba      	ldr	r2, [r7, #8]
 8010c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010c78:	4013      	ands	r3, r2
 8010c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010c80:	68bb      	ldr	r3, [r7, #8]
 8010c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010c8e:	4a04      	ldr	r2, [pc, #16]	; (8010ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	60d3      	str	r3, [r2, #12]
}
 8010c94:	bf00      	nop
 8010c96:	3714      	adds	r7, #20
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9e:	4770      	bx	lr
 8010ca0:	e000ed00 	.word	0xe000ed00

08010ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8010ca4:	b480      	push	{r7}
 8010ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010ca8:	4b04      	ldr	r3, [pc, #16]	; (8010cbc <__NVIC_GetPriorityGrouping+0x18>)
 8010caa:	68db      	ldr	r3, [r3, #12]
 8010cac:	0a1b      	lsrs	r3, r3, #8
 8010cae:	f003 0307 	and.w	r3, r3, #7
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cba:	4770      	bx	lr
 8010cbc:	e000ed00 	.word	0xe000ed00

08010cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010cc0:	b480      	push	{r7}
 8010cc2:	b083      	sub	sp, #12
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	db0b      	blt.n	8010cea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010cd2:	79fb      	ldrb	r3, [r7, #7]
 8010cd4:	f003 021f 	and.w	r2, r3, #31
 8010cd8:	4907      	ldr	r1, [pc, #28]	; (8010cf8 <__NVIC_EnableIRQ+0x38>)
 8010cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010cde:	095b      	lsrs	r3, r3, #5
 8010ce0:	2001      	movs	r0, #1
 8010ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8010ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8010cea:	bf00      	nop
 8010cec:	370c      	adds	r7, #12
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf4:	4770      	bx	lr
 8010cf6:	bf00      	nop
 8010cf8:	e000e100 	.word	0xe000e100

08010cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010cfc:	b480      	push	{r7}
 8010cfe:	b083      	sub	sp, #12
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	4603      	mov	r3, r0
 8010d04:	6039      	str	r1, [r7, #0]
 8010d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	db0a      	blt.n	8010d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	b2da      	uxtb	r2, r3
 8010d14:	490c      	ldr	r1, [pc, #48]	; (8010d48 <__NVIC_SetPriority+0x4c>)
 8010d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d1a:	0112      	lsls	r2, r2, #4
 8010d1c:	b2d2      	uxtb	r2, r2
 8010d1e:	440b      	add	r3, r1
 8010d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010d24:	e00a      	b.n	8010d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	b2da      	uxtb	r2, r3
 8010d2a:	4908      	ldr	r1, [pc, #32]	; (8010d4c <__NVIC_SetPriority+0x50>)
 8010d2c:	79fb      	ldrb	r3, [r7, #7]
 8010d2e:	f003 030f 	and.w	r3, r3, #15
 8010d32:	3b04      	subs	r3, #4
 8010d34:	0112      	lsls	r2, r2, #4
 8010d36:	b2d2      	uxtb	r2, r2
 8010d38:	440b      	add	r3, r1
 8010d3a:	761a      	strb	r2, [r3, #24]
}
 8010d3c:	bf00      	nop
 8010d3e:	370c      	adds	r7, #12
 8010d40:	46bd      	mov	sp, r7
 8010d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d46:	4770      	bx	lr
 8010d48:	e000e100 	.word	0xe000e100
 8010d4c:	e000ed00 	.word	0xe000ed00

08010d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010d50:	b480      	push	{r7}
 8010d52:	b089      	sub	sp, #36	; 0x24
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	60f8      	str	r0, [r7, #12]
 8010d58:	60b9      	str	r1, [r7, #8]
 8010d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	f003 0307 	and.w	r3, r3, #7
 8010d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010d64:	69fb      	ldr	r3, [r7, #28]
 8010d66:	f1c3 0307 	rsb	r3, r3, #7
 8010d6a:	2b04      	cmp	r3, #4
 8010d6c:	bf28      	it	cs
 8010d6e:	2304      	movcs	r3, #4
 8010d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010d72:	69fb      	ldr	r3, [r7, #28]
 8010d74:	3304      	adds	r3, #4
 8010d76:	2b06      	cmp	r3, #6
 8010d78:	d902      	bls.n	8010d80 <NVIC_EncodePriority+0x30>
 8010d7a:	69fb      	ldr	r3, [r7, #28]
 8010d7c:	3b03      	subs	r3, #3
 8010d7e:	e000      	b.n	8010d82 <NVIC_EncodePriority+0x32>
 8010d80:	2300      	movs	r3, #0
 8010d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010d84:	f04f 32ff 	mov.w	r2, #4294967295
 8010d88:	69bb      	ldr	r3, [r7, #24]
 8010d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8010d8e:	43da      	mvns	r2, r3
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	401a      	ands	r2, r3
 8010d94:	697b      	ldr	r3, [r7, #20]
 8010d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010d98:	f04f 31ff 	mov.w	r1, #4294967295
 8010d9c:	697b      	ldr	r3, [r7, #20]
 8010d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8010da2:	43d9      	mvns	r1, r3
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010da8:	4313      	orrs	r3, r2
         );
}
 8010daa:	4618      	mov	r0, r3
 8010dac:	3724      	adds	r7, #36	; 0x24
 8010dae:	46bd      	mov	sp, r7
 8010db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db4:	4770      	bx	lr

08010db6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010db6:	b580      	push	{r7, lr}
 8010db8:	b082      	sub	sp, #8
 8010dba:	af00      	add	r7, sp, #0
 8010dbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	f7ff ff4c 	bl	8010c5c <__NVIC_SetPriorityGrouping>
}
 8010dc4:	bf00      	nop
 8010dc6:	3708      	adds	r7, #8
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}

08010dcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b086      	sub	sp, #24
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	60b9      	str	r1, [r7, #8]
 8010dd6:	607a      	str	r2, [r7, #4]
 8010dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010dde:	f7ff ff61 	bl	8010ca4 <__NVIC_GetPriorityGrouping>
 8010de2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010de4:	687a      	ldr	r2, [r7, #4]
 8010de6:	68b9      	ldr	r1, [r7, #8]
 8010de8:	6978      	ldr	r0, [r7, #20]
 8010dea:	f7ff ffb1 	bl	8010d50 <NVIC_EncodePriority>
 8010dee:	4602      	mov	r2, r0
 8010df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010df4:	4611      	mov	r1, r2
 8010df6:	4618      	mov	r0, r3
 8010df8:	f7ff ff80 	bl	8010cfc <__NVIC_SetPriority>
}
 8010dfc:	bf00      	nop
 8010dfe:	3718      	adds	r7, #24
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bd80      	pop	{r7, pc}

08010e04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b082      	sub	sp, #8
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e12:	4618      	mov	r0, r3
 8010e14:	f7ff ff54 	bl	8010cc0 <__NVIC_EnableIRQ>
}
 8010e18:	bf00      	nop
 8010e1a:	3708      	adds	r7, #8
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	bd80      	pop	{r7, pc}

08010e20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b086      	sub	sp, #24
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8010e28:	2300      	movs	r3, #0
 8010e2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8010e2c:	f7ff ff0a 	bl	8010c44 <HAL_GetTick>
 8010e30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d101      	bne.n	8010e3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8010e38:	2301      	movs	r3, #1
 8010e3a:	e099      	b.n	8010f70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2200      	movs	r2, #0
 8010e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	2202      	movs	r2, #2
 8010e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	681a      	ldr	r2, [r3, #0]
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	f022 0201 	bic.w	r2, r2, #1
 8010e5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010e5c:	e00f      	b.n	8010e7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8010e5e:	f7ff fef1 	bl	8010c44 <HAL_GetTick>
 8010e62:	4602      	mov	r2, r0
 8010e64:	693b      	ldr	r3, [r7, #16]
 8010e66:	1ad3      	subs	r3, r2, r3
 8010e68:	2b05      	cmp	r3, #5
 8010e6a:	d908      	bls.n	8010e7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	2220      	movs	r2, #32
 8010e70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	2203      	movs	r2, #3
 8010e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8010e7a:	2303      	movs	r3, #3
 8010e7c:	e078      	b.n	8010f70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	f003 0301 	and.w	r3, r3, #1
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d1e8      	bne.n	8010e5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8010e94:	697a      	ldr	r2, [r7, #20]
 8010e96:	4b38      	ldr	r3, [pc, #224]	; (8010f78 <HAL_DMA_Init+0x158>)
 8010e98:	4013      	ands	r3, r2
 8010e9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	685a      	ldr	r2, [r3, #4]
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	689b      	ldr	r3, [r3, #8]
 8010ea4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010eaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	691b      	ldr	r3, [r3, #16]
 8010eb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010eb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	699b      	ldr	r3, [r3, #24]
 8010ebc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010ec2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	6a1b      	ldr	r3, [r3, #32]
 8010ec8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010eca:	697a      	ldr	r2, [r7, #20]
 8010ecc:	4313      	orrs	r3, r2
 8010ece:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ed4:	2b04      	cmp	r3, #4
 8010ed6:	d107      	bne.n	8010ee8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ee0:	4313      	orrs	r3, r2
 8010ee2:	697a      	ldr	r2, [r7, #20]
 8010ee4:	4313      	orrs	r3, r2
 8010ee6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	697a      	ldr	r2, [r7, #20]
 8010eee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	695b      	ldr	r3, [r3, #20]
 8010ef6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8010ef8:	697b      	ldr	r3, [r7, #20]
 8010efa:	f023 0307 	bic.w	r3, r3, #7
 8010efe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f04:	697a      	ldr	r2, [r7, #20]
 8010f06:	4313      	orrs	r3, r2
 8010f08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f0e:	2b04      	cmp	r3, #4
 8010f10:	d117      	bne.n	8010f42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f16:	697a      	ldr	r2, [r7, #20]
 8010f18:	4313      	orrs	r3, r2
 8010f1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d00e      	beq.n	8010f42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8010f24:	6878      	ldr	r0, [r7, #4]
 8010f26:	f000 fb3d 	bl	80115a4 <DMA_CheckFifoParam>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d008      	beq.n	8010f42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	2240      	movs	r2, #64	; 0x40
 8010f34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2201      	movs	r2, #1
 8010f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8010f3e:	2301      	movs	r3, #1
 8010f40:	e016      	b.n	8010f70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	697a      	ldr	r2, [r7, #20]
 8010f48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f000 faf4 	bl	8011538 <DMA_CalcBaseAndBitshift>
 8010f50:	4603      	mov	r3, r0
 8010f52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010f58:	223f      	movs	r2, #63	; 0x3f
 8010f5a:	409a      	lsls	r2, r3
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2200      	movs	r2, #0
 8010f64:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2201      	movs	r2, #1
 8010f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8010f6e:	2300      	movs	r3, #0
}
 8010f70:	4618      	mov	r0, r3
 8010f72:	3718      	adds	r7, #24
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd80      	pop	{r7, pc}
 8010f78:	f010803f 	.word	0xf010803f

08010f7c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b084      	sub	sp, #16
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d101      	bne.n	8010f8e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8010f8a:	2301      	movs	r3, #1
 8010f8c:	e050      	b.n	8011030 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010f94:	b2db      	uxtb	r3, r3
 8010f96:	2b02      	cmp	r3, #2
 8010f98:	d101      	bne.n	8010f9e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8010f9a:	2302      	movs	r3, #2
 8010f9c:	e048      	b.n	8011030 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	681a      	ldr	r2, [r3, #0]
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	f022 0201 	bic.w	r2, r2, #1
 8010fac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	2200      	movs	r2, #0
 8010fbc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	2200      	movs	r2, #0
 8010fcc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	2221      	movs	r2, #33	; 0x21
 8010fdc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8010fde:	6878      	ldr	r0, [r7, #4]
 8010fe0:	f000 faaa 	bl	8011538 <DMA_CalcBaseAndBitshift>
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	2200      	movs	r2, #0
 8010fec:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	2200      	movs	r2, #0
 8010ff8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	2200      	movs	r2, #0
 8011004:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	2200      	movs	r2, #0
 801100a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011010:	223f      	movs	r2, #63	; 0x3f
 8011012:	409a      	lsls	r2, r3
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2200      	movs	r2, #0
 801101c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	2200      	movs	r2, #0
 8011022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2200      	movs	r2, #0
 801102a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 801102e:	2300      	movs	r3, #0
}
 8011030:	4618      	mov	r0, r3
 8011032:	3710      	adds	r7, #16
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}

08011038 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b086      	sub	sp, #24
 801103c:	af00      	add	r7, sp, #0
 801103e:	60f8      	str	r0, [r7, #12]
 8011040:	60b9      	str	r1, [r7, #8]
 8011042:	607a      	str	r2, [r7, #4]
 8011044:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011046:	2300      	movs	r3, #0
 8011048:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801104e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011056:	2b01      	cmp	r3, #1
 8011058:	d101      	bne.n	801105e <HAL_DMA_Start_IT+0x26>
 801105a:	2302      	movs	r3, #2
 801105c:	e040      	b.n	80110e0 <HAL_DMA_Start_IT+0xa8>
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	2201      	movs	r2, #1
 8011062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801106c:	b2db      	uxtb	r3, r3
 801106e:	2b01      	cmp	r3, #1
 8011070:	d12f      	bne.n	80110d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	2202      	movs	r2, #2
 8011076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	2200      	movs	r2, #0
 801107e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	687a      	ldr	r2, [r7, #4]
 8011084:	68b9      	ldr	r1, [r7, #8]
 8011086:	68f8      	ldr	r0, [r7, #12]
 8011088:	f000 fa28 	bl	80114dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011090:	223f      	movs	r2, #63	; 0x3f
 8011092:	409a      	lsls	r2, r3
 8011094:	693b      	ldr	r3, [r7, #16]
 8011096:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	681a      	ldr	r2, [r3, #0]
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	f042 0216 	orr.w	r2, r2, #22
 80110a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d007      	beq.n	80110c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	681a      	ldr	r2, [r3, #0]
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	f042 0208 	orr.w	r2, r2, #8
 80110be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	681a      	ldr	r2, [r3, #0]
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	f042 0201 	orr.w	r2, r2, #1
 80110ce:	601a      	str	r2, [r3, #0]
 80110d0:	e005      	b.n	80110de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	2200      	movs	r2, #0
 80110d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80110da:	2302      	movs	r3, #2
 80110dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80110de:	7dfb      	ldrb	r3, [r7, #23]
}
 80110e0:	4618      	mov	r0, r3
 80110e2:	3718      	adds	r7, #24
 80110e4:	46bd      	mov	sp, r7
 80110e6:	bd80      	pop	{r7, pc}

080110e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b084      	sub	sp, #16
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80110f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80110f6:	f7ff fda5 	bl	8010c44 <HAL_GetTick>
 80110fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011102:	b2db      	uxtb	r3, r3
 8011104:	2b02      	cmp	r3, #2
 8011106:	d008      	beq.n	801111a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2280      	movs	r2, #128	; 0x80
 801110c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	2200      	movs	r2, #0
 8011112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8011116:	2301      	movs	r3, #1
 8011118:	e052      	b.n	80111c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	681a      	ldr	r2, [r3, #0]
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	f022 0216 	bic.w	r2, r2, #22
 8011128:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	695a      	ldr	r2, [r3, #20]
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011138:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801113e:	2b00      	cmp	r3, #0
 8011140:	d103      	bne.n	801114a <HAL_DMA_Abort+0x62>
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011146:	2b00      	cmp	r3, #0
 8011148:	d007      	beq.n	801115a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	681a      	ldr	r2, [r3, #0]
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	f022 0208 	bic.w	r2, r2, #8
 8011158:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	681a      	ldr	r2, [r3, #0]
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	f022 0201 	bic.w	r2, r2, #1
 8011168:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801116a:	e013      	b.n	8011194 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801116c:	f7ff fd6a 	bl	8010c44 <HAL_GetTick>
 8011170:	4602      	mov	r2, r0
 8011172:	68bb      	ldr	r3, [r7, #8]
 8011174:	1ad3      	subs	r3, r2, r3
 8011176:	2b05      	cmp	r3, #5
 8011178:	d90c      	bls.n	8011194 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2220      	movs	r2, #32
 801117e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2200      	movs	r2, #0
 8011184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2203      	movs	r2, #3
 801118c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8011190:	2303      	movs	r3, #3
 8011192:	e015      	b.n	80111c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	f003 0301 	and.w	r3, r3, #1
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d1e4      	bne.n	801116c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80111a6:	223f      	movs	r2, #63	; 0x3f
 80111a8:	409a      	lsls	r2, r3
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	2200      	movs	r2, #0
 80111b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	2201      	movs	r2, #1
 80111ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80111be:	2300      	movs	r3, #0
}
 80111c0:	4618      	mov	r0, r3
 80111c2:	3710      	adds	r7, #16
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd80      	pop	{r7, pc}

080111c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b086      	sub	sp, #24
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80111d0:	2300      	movs	r3, #0
 80111d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80111d4:	4b92      	ldr	r3, [pc, #584]	; (8011420 <HAL_DMA_IRQHandler+0x258>)
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	4a92      	ldr	r2, [pc, #584]	; (8011424 <HAL_DMA_IRQHandler+0x25c>)
 80111da:	fba2 2303 	umull	r2, r3, r2, r3
 80111de:	0a9b      	lsrs	r3, r3, #10
 80111e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80111e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80111e8:	693b      	ldr	r3, [r7, #16]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80111f2:	2208      	movs	r2, #8
 80111f4:	409a      	lsls	r2, r3
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	4013      	ands	r3, r2
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d01a      	beq.n	8011234 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	f003 0304 	and.w	r3, r3, #4
 8011208:	2b00      	cmp	r3, #0
 801120a:	d013      	beq.n	8011234 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	681a      	ldr	r2, [r3, #0]
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	f022 0204 	bic.w	r2, r2, #4
 801121a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011220:	2208      	movs	r2, #8
 8011222:	409a      	lsls	r2, r3
 8011224:	693b      	ldr	r3, [r7, #16]
 8011226:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801122c:	f043 0201 	orr.w	r2, r3, #1
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011238:	2201      	movs	r2, #1
 801123a:	409a      	lsls	r2, r3
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	4013      	ands	r3, r2
 8011240:	2b00      	cmp	r3, #0
 8011242:	d012      	beq.n	801126a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	695b      	ldr	r3, [r3, #20]
 801124a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801124e:	2b00      	cmp	r3, #0
 8011250:	d00b      	beq.n	801126a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011256:	2201      	movs	r2, #1
 8011258:	409a      	lsls	r2, r3
 801125a:	693b      	ldr	r3, [r7, #16]
 801125c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011262:	f043 0202 	orr.w	r2, r3, #2
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801126e:	2204      	movs	r2, #4
 8011270:	409a      	lsls	r2, r3
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	4013      	ands	r3, r2
 8011276:	2b00      	cmp	r3, #0
 8011278:	d012      	beq.n	80112a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	f003 0302 	and.w	r3, r3, #2
 8011284:	2b00      	cmp	r3, #0
 8011286:	d00b      	beq.n	80112a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801128c:	2204      	movs	r2, #4
 801128e:	409a      	lsls	r2, r3
 8011290:	693b      	ldr	r3, [r7, #16]
 8011292:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011298:	f043 0204 	orr.w	r2, r3, #4
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80112a4:	2210      	movs	r2, #16
 80112a6:	409a      	lsls	r2, r3
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	4013      	ands	r3, r2
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d043      	beq.n	8011338 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	f003 0308 	and.w	r3, r3, #8
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d03c      	beq.n	8011338 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80112c2:	2210      	movs	r2, #16
 80112c4:	409a      	lsls	r2, r3
 80112c6:	693b      	ldr	r3, [r7, #16]
 80112c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d018      	beq.n	801130a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d108      	bne.n	80112f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d024      	beq.n	8011338 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112f2:	6878      	ldr	r0, [r7, #4]
 80112f4:	4798      	blx	r3
 80112f6:	e01f      	b.n	8011338 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d01b      	beq.n	8011338 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	4798      	blx	r3
 8011308:	e016      	b.n	8011338 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011314:	2b00      	cmp	r3, #0
 8011316:	d107      	bne.n	8011328 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	681a      	ldr	r2, [r3, #0]
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	f022 0208 	bic.w	r2, r2, #8
 8011326:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801132c:	2b00      	cmp	r3, #0
 801132e:	d003      	beq.n	8011338 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011334:	6878      	ldr	r0, [r7, #4]
 8011336:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801133c:	2220      	movs	r2, #32
 801133e:	409a      	lsls	r2, r3
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	4013      	ands	r3, r2
 8011344:	2b00      	cmp	r3, #0
 8011346:	f000 808e 	beq.w	8011466 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	f003 0310 	and.w	r3, r3, #16
 8011354:	2b00      	cmp	r3, #0
 8011356:	f000 8086 	beq.w	8011466 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801135e:	2220      	movs	r2, #32
 8011360:	409a      	lsls	r2, r3
 8011362:	693b      	ldr	r3, [r7, #16]
 8011364:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801136c:	b2db      	uxtb	r3, r3
 801136e:	2b05      	cmp	r3, #5
 8011370:	d136      	bne.n	80113e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	681a      	ldr	r2, [r3, #0]
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	f022 0216 	bic.w	r2, r2, #22
 8011380:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	695a      	ldr	r2, [r3, #20]
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011390:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011396:	2b00      	cmp	r3, #0
 8011398:	d103      	bne.n	80113a2 <HAL_DMA_IRQHandler+0x1da>
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d007      	beq.n	80113b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	681a      	ldr	r2, [r3, #0]
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	f022 0208 	bic.w	r2, r2, #8
 80113b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80113b6:	223f      	movs	r2, #63	; 0x3f
 80113b8:	409a      	lsls	r2, r3
 80113ba:	693b      	ldr	r3, [r7, #16]
 80113bc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	2200      	movs	r2, #0
 80113c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	2201      	movs	r2, #1
 80113ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d07d      	beq.n	80114d2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80113da:	6878      	ldr	r0, [r7, #4]
 80113dc:	4798      	blx	r3
        }
        return;
 80113de:	e078      	b.n	80114d2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d01c      	beq.n	8011428 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d108      	bne.n	801140e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011400:	2b00      	cmp	r3, #0
 8011402:	d030      	beq.n	8011466 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011408:	6878      	ldr	r0, [r7, #4]
 801140a:	4798      	blx	r3
 801140c:	e02b      	b.n	8011466 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011412:	2b00      	cmp	r3, #0
 8011414:	d027      	beq.n	8011466 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801141a:	6878      	ldr	r0, [r7, #4]
 801141c:	4798      	blx	r3
 801141e:	e022      	b.n	8011466 <HAL_DMA_IRQHandler+0x29e>
 8011420:	20000030 	.word	0x20000030
 8011424:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011432:	2b00      	cmp	r3, #0
 8011434:	d10f      	bne.n	8011456 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	681a      	ldr	r2, [r3, #0]
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	f022 0210 	bic.w	r2, r2, #16
 8011444:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	2200      	movs	r2, #0
 801144a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	2201      	movs	r2, #1
 8011452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801145a:	2b00      	cmp	r3, #0
 801145c:	d003      	beq.n	8011466 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011462:	6878      	ldr	r0, [r7, #4]
 8011464:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801146a:	2b00      	cmp	r3, #0
 801146c:	d032      	beq.n	80114d4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011472:	f003 0301 	and.w	r3, r3, #1
 8011476:	2b00      	cmp	r3, #0
 8011478:	d022      	beq.n	80114c0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	2205      	movs	r2, #5
 801147e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	681a      	ldr	r2, [r3, #0]
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	f022 0201 	bic.w	r2, r2, #1
 8011490:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8011492:	68bb      	ldr	r3, [r7, #8]
 8011494:	3301      	adds	r3, #1
 8011496:	60bb      	str	r3, [r7, #8]
 8011498:	697a      	ldr	r2, [r7, #20]
 801149a:	429a      	cmp	r2, r3
 801149c:	d307      	bcc.n	80114ae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	f003 0301 	and.w	r3, r3, #1
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d1f2      	bne.n	8011492 <HAL_DMA_IRQHandler+0x2ca>
 80114ac:	e000      	b.n	80114b0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80114ae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	2200      	movs	r2, #0
 80114b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	2201      	movs	r2, #1
 80114bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d005      	beq.n	80114d4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80114cc:	6878      	ldr	r0, [r7, #4]
 80114ce:	4798      	blx	r3
 80114d0:	e000      	b.n	80114d4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80114d2:	bf00      	nop
    }
  }
}
 80114d4:	3718      	adds	r7, #24
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bd80      	pop	{r7, pc}
 80114da:	bf00      	nop

080114dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80114dc:	b480      	push	{r7}
 80114de:	b085      	sub	sp, #20
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	60f8      	str	r0, [r7, #12]
 80114e4:	60b9      	str	r1, [r7, #8]
 80114e6:	607a      	str	r2, [r7, #4]
 80114e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	681a      	ldr	r2, [r3, #0]
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80114f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	683a      	ldr	r2, [r7, #0]
 8011500:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	689b      	ldr	r3, [r3, #8]
 8011506:	2b40      	cmp	r3, #64	; 0x40
 8011508:	d108      	bne.n	801151c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	687a      	ldr	r2, [r7, #4]
 8011510:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	68ba      	ldr	r2, [r7, #8]
 8011518:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801151a:	e007      	b.n	801152c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	68ba      	ldr	r2, [r7, #8]
 8011522:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	687a      	ldr	r2, [r7, #4]
 801152a:	60da      	str	r2, [r3, #12]
}
 801152c:	bf00      	nop
 801152e:	3714      	adds	r7, #20
 8011530:	46bd      	mov	sp, r7
 8011532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011536:	4770      	bx	lr

08011538 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8011538:	b480      	push	{r7}
 801153a:	b085      	sub	sp, #20
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	b2db      	uxtb	r3, r3
 8011546:	3b10      	subs	r3, #16
 8011548:	4a14      	ldr	r2, [pc, #80]	; (801159c <DMA_CalcBaseAndBitshift+0x64>)
 801154a:	fba2 2303 	umull	r2, r3, r2, r3
 801154e:	091b      	lsrs	r3, r3, #4
 8011550:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8011552:	4a13      	ldr	r2, [pc, #76]	; (80115a0 <DMA_CalcBaseAndBitshift+0x68>)
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	4413      	add	r3, r2
 8011558:	781b      	ldrb	r3, [r3, #0]
 801155a:	461a      	mov	r2, r3
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	2b03      	cmp	r3, #3
 8011564:	d909      	bls.n	801157a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801156e:	f023 0303 	bic.w	r3, r3, #3
 8011572:	1d1a      	adds	r2, r3, #4
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	659a      	str	r2, [r3, #88]	; 0x58
 8011578:	e007      	b.n	801158a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8011582:	f023 0303 	bic.w	r3, r3, #3
 8011586:	687a      	ldr	r2, [r7, #4]
 8011588:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801158e:	4618      	mov	r0, r3
 8011590:	3714      	adds	r7, #20
 8011592:	46bd      	mov	sp, r7
 8011594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011598:	4770      	bx	lr
 801159a:	bf00      	nop
 801159c:	aaaaaaab 	.word	0xaaaaaaab
 80115a0:	0801b1b8 	.word	0x0801b1b8

080115a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80115a4:	b480      	push	{r7}
 80115a6:	b085      	sub	sp, #20
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80115ac:	2300      	movs	r3, #0
 80115ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	699b      	ldr	r3, [r3, #24]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d11f      	bne.n	80115fe <DMA_CheckFifoParam+0x5a>
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	2b03      	cmp	r3, #3
 80115c2:	d856      	bhi.n	8011672 <DMA_CheckFifoParam+0xce>
 80115c4:	a201      	add	r2, pc, #4	; (adr r2, 80115cc <DMA_CheckFifoParam+0x28>)
 80115c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115ca:	bf00      	nop
 80115cc:	080115dd 	.word	0x080115dd
 80115d0:	080115ef 	.word	0x080115ef
 80115d4:	080115dd 	.word	0x080115dd
 80115d8:	08011673 	.word	0x08011673
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d046      	beq.n	8011676 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80115e8:	2301      	movs	r3, #1
 80115ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80115ec:	e043      	b.n	8011676 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80115f6:	d140      	bne.n	801167a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80115f8:	2301      	movs	r3, #1
 80115fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80115fc:	e03d      	b.n	801167a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	699b      	ldr	r3, [r3, #24]
 8011602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011606:	d121      	bne.n	801164c <DMA_CheckFifoParam+0xa8>
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	2b03      	cmp	r3, #3
 801160c:	d837      	bhi.n	801167e <DMA_CheckFifoParam+0xda>
 801160e:	a201      	add	r2, pc, #4	; (adr r2, 8011614 <DMA_CheckFifoParam+0x70>)
 8011610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011614:	08011625 	.word	0x08011625
 8011618:	0801162b 	.word	0x0801162b
 801161c:	08011625 	.word	0x08011625
 8011620:	0801163d 	.word	0x0801163d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8011624:	2301      	movs	r3, #1
 8011626:	73fb      	strb	r3, [r7, #15]
      break;
 8011628:	e030      	b.n	801168c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801162e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011632:	2b00      	cmp	r3, #0
 8011634:	d025      	beq.n	8011682 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8011636:	2301      	movs	r3, #1
 8011638:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801163a:	e022      	b.n	8011682 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011640:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8011644:	d11f      	bne.n	8011686 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8011646:	2301      	movs	r3, #1
 8011648:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801164a:	e01c      	b.n	8011686 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801164c:	68bb      	ldr	r3, [r7, #8]
 801164e:	2b02      	cmp	r3, #2
 8011650:	d903      	bls.n	801165a <DMA_CheckFifoParam+0xb6>
 8011652:	68bb      	ldr	r3, [r7, #8]
 8011654:	2b03      	cmp	r3, #3
 8011656:	d003      	beq.n	8011660 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8011658:	e018      	b.n	801168c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 801165a:	2301      	movs	r3, #1
 801165c:	73fb      	strb	r3, [r7, #15]
      break;
 801165e:	e015      	b.n	801168c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011668:	2b00      	cmp	r3, #0
 801166a:	d00e      	beq.n	801168a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 801166c:	2301      	movs	r3, #1
 801166e:	73fb      	strb	r3, [r7, #15]
      break;
 8011670:	e00b      	b.n	801168a <DMA_CheckFifoParam+0xe6>
      break;
 8011672:	bf00      	nop
 8011674:	e00a      	b.n	801168c <DMA_CheckFifoParam+0xe8>
      break;
 8011676:	bf00      	nop
 8011678:	e008      	b.n	801168c <DMA_CheckFifoParam+0xe8>
      break;
 801167a:	bf00      	nop
 801167c:	e006      	b.n	801168c <DMA_CheckFifoParam+0xe8>
      break;
 801167e:	bf00      	nop
 8011680:	e004      	b.n	801168c <DMA_CheckFifoParam+0xe8>
      break;
 8011682:	bf00      	nop
 8011684:	e002      	b.n	801168c <DMA_CheckFifoParam+0xe8>
      break;   
 8011686:	bf00      	nop
 8011688:	e000      	b.n	801168c <DMA_CheckFifoParam+0xe8>
      break;
 801168a:	bf00      	nop
    }
  } 
  
  return status; 
 801168c:	7bfb      	ldrb	r3, [r7, #15]
}
 801168e:	4618      	mov	r0, r3
 8011690:	3714      	adds	r7, #20
 8011692:	46bd      	mov	sp, r7
 8011694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011698:	4770      	bx	lr
 801169a:	bf00      	nop

0801169c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801169c:	b480      	push	{r7}
 801169e:	b089      	sub	sp, #36	; 0x24
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
 80116a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80116a6:	2300      	movs	r3, #0
 80116a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80116aa:	2300      	movs	r3, #0
 80116ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80116ae:	2300      	movs	r3, #0
 80116b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80116b2:	2300      	movs	r3, #0
 80116b4:	61fb      	str	r3, [r7, #28]
 80116b6:	e159      	b.n	801196c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80116b8:	2201      	movs	r2, #1
 80116ba:	69fb      	ldr	r3, [r7, #28]
 80116bc:	fa02 f303 	lsl.w	r3, r2, r3
 80116c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80116c2:	683b      	ldr	r3, [r7, #0]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	697a      	ldr	r2, [r7, #20]
 80116c8:	4013      	ands	r3, r2
 80116ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80116cc:	693a      	ldr	r2, [r7, #16]
 80116ce:	697b      	ldr	r3, [r7, #20]
 80116d0:	429a      	cmp	r2, r3
 80116d2:	f040 8148 	bne.w	8011966 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	685b      	ldr	r3, [r3, #4]
 80116da:	f003 0303 	and.w	r3, r3, #3
 80116de:	2b01      	cmp	r3, #1
 80116e0:	d005      	beq.n	80116ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	685b      	ldr	r3, [r3, #4]
 80116e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80116ea:	2b02      	cmp	r3, #2
 80116ec:	d130      	bne.n	8011750 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	689b      	ldr	r3, [r3, #8]
 80116f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80116f4:	69fb      	ldr	r3, [r7, #28]
 80116f6:	005b      	lsls	r3, r3, #1
 80116f8:	2203      	movs	r2, #3
 80116fa:	fa02 f303 	lsl.w	r3, r2, r3
 80116fe:	43db      	mvns	r3, r3
 8011700:	69ba      	ldr	r2, [r7, #24]
 8011702:	4013      	ands	r3, r2
 8011704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8011706:	683b      	ldr	r3, [r7, #0]
 8011708:	68da      	ldr	r2, [r3, #12]
 801170a:	69fb      	ldr	r3, [r7, #28]
 801170c:	005b      	lsls	r3, r3, #1
 801170e:	fa02 f303 	lsl.w	r3, r2, r3
 8011712:	69ba      	ldr	r2, [r7, #24]
 8011714:	4313      	orrs	r3, r2
 8011716:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	69ba      	ldr	r2, [r7, #24]
 801171c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	685b      	ldr	r3, [r3, #4]
 8011722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011724:	2201      	movs	r2, #1
 8011726:	69fb      	ldr	r3, [r7, #28]
 8011728:	fa02 f303 	lsl.w	r3, r2, r3
 801172c:	43db      	mvns	r3, r3
 801172e:	69ba      	ldr	r2, [r7, #24]
 8011730:	4013      	ands	r3, r2
 8011732:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	685b      	ldr	r3, [r3, #4]
 8011738:	091b      	lsrs	r3, r3, #4
 801173a:	f003 0201 	and.w	r2, r3, #1
 801173e:	69fb      	ldr	r3, [r7, #28]
 8011740:	fa02 f303 	lsl.w	r3, r2, r3
 8011744:	69ba      	ldr	r2, [r7, #24]
 8011746:	4313      	orrs	r3, r2
 8011748:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	69ba      	ldr	r2, [r7, #24]
 801174e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	685b      	ldr	r3, [r3, #4]
 8011754:	f003 0303 	and.w	r3, r3, #3
 8011758:	2b03      	cmp	r3, #3
 801175a:	d017      	beq.n	801178c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	68db      	ldr	r3, [r3, #12]
 8011760:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8011762:	69fb      	ldr	r3, [r7, #28]
 8011764:	005b      	lsls	r3, r3, #1
 8011766:	2203      	movs	r2, #3
 8011768:	fa02 f303 	lsl.w	r3, r2, r3
 801176c:	43db      	mvns	r3, r3
 801176e:	69ba      	ldr	r2, [r7, #24]
 8011770:	4013      	ands	r3, r2
 8011772:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011774:	683b      	ldr	r3, [r7, #0]
 8011776:	689a      	ldr	r2, [r3, #8]
 8011778:	69fb      	ldr	r3, [r7, #28]
 801177a:	005b      	lsls	r3, r3, #1
 801177c:	fa02 f303 	lsl.w	r3, r2, r3
 8011780:	69ba      	ldr	r2, [r7, #24]
 8011782:	4313      	orrs	r3, r2
 8011784:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	69ba      	ldr	r2, [r7, #24]
 801178a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801178c:	683b      	ldr	r3, [r7, #0]
 801178e:	685b      	ldr	r3, [r3, #4]
 8011790:	f003 0303 	and.w	r3, r3, #3
 8011794:	2b02      	cmp	r3, #2
 8011796:	d123      	bne.n	80117e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8011798:	69fb      	ldr	r3, [r7, #28]
 801179a:	08da      	lsrs	r2, r3, #3
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	3208      	adds	r2, #8
 80117a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80117a6:	69fb      	ldr	r3, [r7, #28]
 80117a8:	f003 0307 	and.w	r3, r3, #7
 80117ac:	009b      	lsls	r3, r3, #2
 80117ae:	220f      	movs	r2, #15
 80117b0:	fa02 f303 	lsl.w	r3, r2, r3
 80117b4:	43db      	mvns	r3, r3
 80117b6:	69ba      	ldr	r2, [r7, #24]
 80117b8:	4013      	ands	r3, r2
 80117ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	691a      	ldr	r2, [r3, #16]
 80117c0:	69fb      	ldr	r3, [r7, #28]
 80117c2:	f003 0307 	and.w	r3, r3, #7
 80117c6:	009b      	lsls	r3, r3, #2
 80117c8:	fa02 f303 	lsl.w	r3, r2, r3
 80117cc:	69ba      	ldr	r2, [r7, #24]
 80117ce:	4313      	orrs	r3, r2
 80117d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80117d2:	69fb      	ldr	r3, [r7, #28]
 80117d4:	08da      	lsrs	r2, r3, #3
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	3208      	adds	r2, #8
 80117da:	69b9      	ldr	r1, [r7, #24]
 80117dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80117e6:	69fb      	ldr	r3, [r7, #28]
 80117e8:	005b      	lsls	r3, r3, #1
 80117ea:	2203      	movs	r2, #3
 80117ec:	fa02 f303 	lsl.w	r3, r2, r3
 80117f0:	43db      	mvns	r3, r3
 80117f2:	69ba      	ldr	r2, [r7, #24]
 80117f4:	4013      	ands	r3, r2
 80117f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80117f8:	683b      	ldr	r3, [r7, #0]
 80117fa:	685b      	ldr	r3, [r3, #4]
 80117fc:	f003 0203 	and.w	r2, r3, #3
 8011800:	69fb      	ldr	r3, [r7, #28]
 8011802:	005b      	lsls	r3, r3, #1
 8011804:	fa02 f303 	lsl.w	r3, r2, r3
 8011808:	69ba      	ldr	r2, [r7, #24]
 801180a:	4313      	orrs	r3, r2
 801180c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	69ba      	ldr	r2, [r7, #24]
 8011812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	685b      	ldr	r3, [r3, #4]
 8011818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801181c:	2b00      	cmp	r3, #0
 801181e:	f000 80a2 	beq.w	8011966 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011822:	2300      	movs	r3, #0
 8011824:	60fb      	str	r3, [r7, #12]
 8011826:	4b57      	ldr	r3, [pc, #348]	; (8011984 <HAL_GPIO_Init+0x2e8>)
 8011828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801182a:	4a56      	ldr	r2, [pc, #344]	; (8011984 <HAL_GPIO_Init+0x2e8>)
 801182c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011830:	6453      	str	r3, [r2, #68]	; 0x44
 8011832:	4b54      	ldr	r3, [pc, #336]	; (8011984 <HAL_GPIO_Init+0x2e8>)
 8011834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801183a:	60fb      	str	r3, [r7, #12]
 801183c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801183e:	4a52      	ldr	r2, [pc, #328]	; (8011988 <HAL_GPIO_Init+0x2ec>)
 8011840:	69fb      	ldr	r3, [r7, #28]
 8011842:	089b      	lsrs	r3, r3, #2
 8011844:	3302      	adds	r3, #2
 8011846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801184c:	69fb      	ldr	r3, [r7, #28]
 801184e:	f003 0303 	and.w	r3, r3, #3
 8011852:	009b      	lsls	r3, r3, #2
 8011854:	220f      	movs	r2, #15
 8011856:	fa02 f303 	lsl.w	r3, r2, r3
 801185a:	43db      	mvns	r3, r3
 801185c:	69ba      	ldr	r2, [r7, #24]
 801185e:	4013      	ands	r3, r2
 8011860:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	4a49      	ldr	r2, [pc, #292]	; (801198c <HAL_GPIO_Init+0x2f0>)
 8011866:	4293      	cmp	r3, r2
 8011868:	d019      	beq.n	801189e <HAL_GPIO_Init+0x202>
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	4a48      	ldr	r2, [pc, #288]	; (8011990 <HAL_GPIO_Init+0x2f4>)
 801186e:	4293      	cmp	r3, r2
 8011870:	d013      	beq.n	801189a <HAL_GPIO_Init+0x1fe>
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	4a47      	ldr	r2, [pc, #284]	; (8011994 <HAL_GPIO_Init+0x2f8>)
 8011876:	4293      	cmp	r3, r2
 8011878:	d00d      	beq.n	8011896 <HAL_GPIO_Init+0x1fa>
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	4a46      	ldr	r2, [pc, #280]	; (8011998 <HAL_GPIO_Init+0x2fc>)
 801187e:	4293      	cmp	r3, r2
 8011880:	d007      	beq.n	8011892 <HAL_GPIO_Init+0x1f6>
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	4a45      	ldr	r2, [pc, #276]	; (801199c <HAL_GPIO_Init+0x300>)
 8011886:	4293      	cmp	r3, r2
 8011888:	d101      	bne.n	801188e <HAL_GPIO_Init+0x1f2>
 801188a:	2304      	movs	r3, #4
 801188c:	e008      	b.n	80118a0 <HAL_GPIO_Init+0x204>
 801188e:	2307      	movs	r3, #7
 8011890:	e006      	b.n	80118a0 <HAL_GPIO_Init+0x204>
 8011892:	2303      	movs	r3, #3
 8011894:	e004      	b.n	80118a0 <HAL_GPIO_Init+0x204>
 8011896:	2302      	movs	r3, #2
 8011898:	e002      	b.n	80118a0 <HAL_GPIO_Init+0x204>
 801189a:	2301      	movs	r3, #1
 801189c:	e000      	b.n	80118a0 <HAL_GPIO_Init+0x204>
 801189e:	2300      	movs	r3, #0
 80118a0:	69fa      	ldr	r2, [r7, #28]
 80118a2:	f002 0203 	and.w	r2, r2, #3
 80118a6:	0092      	lsls	r2, r2, #2
 80118a8:	4093      	lsls	r3, r2
 80118aa:	69ba      	ldr	r2, [r7, #24]
 80118ac:	4313      	orrs	r3, r2
 80118ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80118b0:	4935      	ldr	r1, [pc, #212]	; (8011988 <HAL_GPIO_Init+0x2ec>)
 80118b2:	69fb      	ldr	r3, [r7, #28]
 80118b4:	089b      	lsrs	r3, r3, #2
 80118b6:	3302      	adds	r3, #2
 80118b8:	69ba      	ldr	r2, [r7, #24]
 80118ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80118be:	4b38      	ldr	r3, [pc, #224]	; (80119a0 <HAL_GPIO_Init+0x304>)
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80118c4:	693b      	ldr	r3, [r7, #16]
 80118c6:	43db      	mvns	r3, r3
 80118c8:	69ba      	ldr	r2, [r7, #24]
 80118ca:	4013      	ands	r3, r2
 80118cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	685b      	ldr	r3, [r3, #4]
 80118d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d003      	beq.n	80118e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80118da:	69ba      	ldr	r2, [r7, #24]
 80118dc:	693b      	ldr	r3, [r7, #16]
 80118de:	4313      	orrs	r3, r2
 80118e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80118e2:	4a2f      	ldr	r2, [pc, #188]	; (80119a0 <HAL_GPIO_Init+0x304>)
 80118e4:	69bb      	ldr	r3, [r7, #24]
 80118e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80118e8:	4b2d      	ldr	r3, [pc, #180]	; (80119a0 <HAL_GPIO_Init+0x304>)
 80118ea:	685b      	ldr	r3, [r3, #4]
 80118ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80118ee:	693b      	ldr	r3, [r7, #16]
 80118f0:	43db      	mvns	r3, r3
 80118f2:	69ba      	ldr	r2, [r7, #24]
 80118f4:	4013      	ands	r3, r2
 80118f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	685b      	ldr	r3, [r3, #4]
 80118fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011900:	2b00      	cmp	r3, #0
 8011902:	d003      	beq.n	801190c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8011904:	69ba      	ldr	r2, [r7, #24]
 8011906:	693b      	ldr	r3, [r7, #16]
 8011908:	4313      	orrs	r3, r2
 801190a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801190c:	4a24      	ldr	r2, [pc, #144]	; (80119a0 <HAL_GPIO_Init+0x304>)
 801190e:	69bb      	ldr	r3, [r7, #24]
 8011910:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011912:	4b23      	ldr	r3, [pc, #140]	; (80119a0 <HAL_GPIO_Init+0x304>)
 8011914:	689b      	ldr	r3, [r3, #8]
 8011916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011918:	693b      	ldr	r3, [r7, #16]
 801191a:	43db      	mvns	r3, r3
 801191c:	69ba      	ldr	r2, [r7, #24]
 801191e:	4013      	ands	r3, r2
 8011920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011922:	683b      	ldr	r3, [r7, #0]
 8011924:	685b      	ldr	r3, [r3, #4]
 8011926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801192a:	2b00      	cmp	r3, #0
 801192c:	d003      	beq.n	8011936 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801192e:	69ba      	ldr	r2, [r7, #24]
 8011930:	693b      	ldr	r3, [r7, #16]
 8011932:	4313      	orrs	r3, r2
 8011934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8011936:	4a1a      	ldr	r2, [pc, #104]	; (80119a0 <HAL_GPIO_Init+0x304>)
 8011938:	69bb      	ldr	r3, [r7, #24]
 801193a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801193c:	4b18      	ldr	r3, [pc, #96]	; (80119a0 <HAL_GPIO_Init+0x304>)
 801193e:	68db      	ldr	r3, [r3, #12]
 8011940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011942:	693b      	ldr	r3, [r7, #16]
 8011944:	43db      	mvns	r3, r3
 8011946:	69ba      	ldr	r2, [r7, #24]
 8011948:	4013      	ands	r3, r2
 801194a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	685b      	ldr	r3, [r3, #4]
 8011950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011954:	2b00      	cmp	r3, #0
 8011956:	d003      	beq.n	8011960 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8011958:	69ba      	ldr	r2, [r7, #24]
 801195a:	693b      	ldr	r3, [r7, #16]
 801195c:	4313      	orrs	r3, r2
 801195e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8011960:	4a0f      	ldr	r2, [pc, #60]	; (80119a0 <HAL_GPIO_Init+0x304>)
 8011962:	69bb      	ldr	r3, [r7, #24]
 8011964:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011966:	69fb      	ldr	r3, [r7, #28]
 8011968:	3301      	adds	r3, #1
 801196a:	61fb      	str	r3, [r7, #28]
 801196c:	69fb      	ldr	r3, [r7, #28]
 801196e:	2b0f      	cmp	r3, #15
 8011970:	f67f aea2 	bls.w	80116b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8011974:	bf00      	nop
 8011976:	bf00      	nop
 8011978:	3724      	adds	r7, #36	; 0x24
 801197a:	46bd      	mov	sp, r7
 801197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011980:	4770      	bx	lr
 8011982:	bf00      	nop
 8011984:	40023800 	.word	0x40023800
 8011988:	40013800 	.word	0x40013800
 801198c:	40020000 	.word	0x40020000
 8011990:	40020400 	.word	0x40020400
 8011994:	40020800 	.word	0x40020800
 8011998:	40020c00 	.word	0x40020c00
 801199c:	40021000 	.word	0x40021000
 80119a0:	40013c00 	.word	0x40013c00

080119a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80119a4:	b480      	push	{r7}
 80119a6:	b087      	sub	sp, #28
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
 80119ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80119ae:	2300      	movs	r3, #0
 80119b0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80119b2:	2300      	movs	r3, #0
 80119b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80119b6:	2300      	movs	r3, #0
 80119b8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80119ba:	2300      	movs	r3, #0
 80119bc:	617b      	str	r3, [r7, #20]
 80119be:	e0bb      	b.n	8011b38 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80119c0:	2201      	movs	r2, #1
 80119c2:	697b      	ldr	r3, [r7, #20]
 80119c4:	fa02 f303 	lsl.w	r3, r2, r3
 80119c8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80119ca:	683a      	ldr	r2, [r7, #0]
 80119cc:	693b      	ldr	r3, [r7, #16]
 80119ce:	4013      	ands	r3, r2
 80119d0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80119d2:	68fa      	ldr	r2, [r7, #12]
 80119d4:	693b      	ldr	r3, [r7, #16]
 80119d6:	429a      	cmp	r2, r3
 80119d8:	f040 80ab 	bne.w	8011b32 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80119dc:	4a5c      	ldr	r2, [pc, #368]	; (8011b50 <HAL_GPIO_DeInit+0x1ac>)
 80119de:	697b      	ldr	r3, [r7, #20]
 80119e0:	089b      	lsrs	r3, r3, #2
 80119e2:	3302      	adds	r3, #2
 80119e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80119e8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80119ea:	697b      	ldr	r3, [r7, #20]
 80119ec:	f003 0303 	and.w	r3, r3, #3
 80119f0:	009b      	lsls	r3, r3, #2
 80119f2:	220f      	movs	r2, #15
 80119f4:	fa02 f303 	lsl.w	r3, r2, r3
 80119f8:	68ba      	ldr	r2, [r7, #8]
 80119fa:	4013      	ands	r3, r2
 80119fc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	4a54      	ldr	r2, [pc, #336]	; (8011b54 <HAL_GPIO_DeInit+0x1b0>)
 8011a02:	4293      	cmp	r3, r2
 8011a04:	d019      	beq.n	8011a3a <HAL_GPIO_DeInit+0x96>
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	4a53      	ldr	r2, [pc, #332]	; (8011b58 <HAL_GPIO_DeInit+0x1b4>)
 8011a0a:	4293      	cmp	r3, r2
 8011a0c:	d013      	beq.n	8011a36 <HAL_GPIO_DeInit+0x92>
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	4a52      	ldr	r2, [pc, #328]	; (8011b5c <HAL_GPIO_DeInit+0x1b8>)
 8011a12:	4293      	cmp	r3, r2
 8011a14:	d00d      	beq.n	8011a32 <HAL_GPIO_DeInit+0x8e>
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	4a51      	ldr	r2, [pc, #324]	; (8011b60 <HAL_GPIO_DeInit+0x1bc>)
 8011a1a:	4293      	cmp	r3, r2
 8011a1c:	d007      	beq.n	8011a2e <HAL_GPIO_DeInit+0x8a>
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	4a50      	ldr	r2, [pc, #320]	; (8011b64 <HAL_GPIO_DeInit+0x1c0>)
 8011a22:	4293      	cmp	r3, r2
 8011a24:	d101      	bne.n	8011a2a <HAL_GPIO_DeInit+0x86>
 8011a26:	2304      	movs	r3, #4
 8011a28:	e008      	b.n	8011a3c <HAL_GPIO_DeInit+0x98>
 8011a2a:	2307      	movs	r3, #7
 8011a2c:	e006      	b.n	8011a3c <HAL_GPIO_DeInit+0x98>
 8011a2e:	2303      	movs	r3, #3
 8011a30:	e004      	b.n	8011a3c <HAL_GPIO_DeInit+0x98>
 8011a32:	2302      	movs	r3, #2
 8011a34:	e002      	b.n	8011a3c <HAL_GPIO_DeInit+0x98>
 8011a36:	2301      	movs	r3, #1
 8011a38:	e000      	b.n	8011a3c <HAL_GPIO_DeInit+0x98>
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	697a      	ldr	r2, [r7, #20]
 8011a3e:	f002 0203 	and.w	r2, r2, #3
 8011a42:	0092      	lsls	r2, r2, #2
 8011a44:	4093      	lsls	r3, r2
 8011a46:	68ba      	ldr	r2, [r7, #8]
 8011a48:	429a      	cmp	r2, r3
 8011a4a:	d132      	bne.n	8011ab2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8011a4c:	4b46      	ldr	r3, [pc, #280]	; (8011b68 <HAL_GPIO_DeInit+0x1c4>)
 8011a4e:	681a      	ldr	r2, [r3, #0]
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	43db      	mvns	r3, r3
 8011a54:	4944      	ldr	r1, [pc, #272]	; (8011b68 <HAL_GPIO_DeInit+0x1c4>)
 8011a56:	4013      	ands	r3, r2
 8011a58:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8011a5a:	4b43      	ldr	r3, [pc, #268]	; (8011b68 <HAL_GPIO_DeInit+0x1c4>)
 8011a5c:	685a      	ldr	r2, [r3, #4]
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	43db      	mvns	r3, r3
 8011a62:	4941      	ldr	r1, [pc, #260]	; (8011b68 <HAL_GPIO_DeInit+0x1c4>)
 8011a64:	4013      	ands	r3, r2
 8011a66:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8011a68:	4b3f      	ldr	r3, [pc, #252]	; (8011b68 <HAL_GPIO_DeInit+0x1c4>)
 8011a6a:	689a      	ldr	r2, [r3, #8]
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	43db      	mvns	r3, r3
 8011a70:	493d      	ldr	r1, [pc, #244]	; (8011b68 <HAL_GPIO_DeInit+0x1c4>)
 8011a72:	4013      	ands	r3, r2
 8011a74:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8011a76:	4b3c      	ldr	r3, [pc, #240]	; (8011b68 <HAL_GPIO_DeInit+0x1c4>)
 8011a78:	68da      	ldr	r2, [r3, #12]
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	43db      	mvns	r3, r3
 8011a7e:	493a      	ldr	r1, [pc, #232]	; (8011b68 <HAL_GPIO_DeInit+0x1c4>)
 8011a80:	4013      	ands	r3, r2
 8011a82:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8011a84:	697b      	ldr	r3, [r7, #20]
 8011a86:	f003 0303 	and.w	r3, r3, #3
 8011a8a:	009b      	lsls	r3, r3, #2
 8011a8c:	220f      	movs	r2, #15
 8011a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8011a92:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8011a94:	4a2e      	ldr	r2, [pc, #184]	; (8011b50 <HAL_GPIO_DeInit+0x1ac>)
 8011a96:	697b      	ldr	r3, [r7, #20]
 8011a98:	089b      	lsrs	r3, r3, #2
 8011a9a:	3302      	adds	r3, #2
 8011a9c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	43da      	mvns	r2, r3
 8011aa4:	482a      	ldr	r0, [pc, #168]	; (8011b50 <HAL_GPIO_DeInit+0x1ac>)
 8011aa6:	697b      	ldr	r3, [r7, #20]
 8011aa8:	089b      	lsrs	r3, r3, #2
 8011aaa:	400a      	ands	r2, r1
 8011aac:	3302      	adds	r3, #2
 8011aae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681a      	ldr	r2, [r3, #0]
 8011ab6:	697b      	ldr	r3, [r7, #20]
 8011ab8:	005b      	lsls	r3, r3, #1
 8011aba:	2103      	movs	r1, #3
 8011abc:	fa01 f303 	lsl.w	r3, r1, r3
 8011ac0:	43db      	mvns	r3, r3
 8011ac2:	401a      	ands	r2, r3
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	08da      	lsrs	r2, r3, #3
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	3208      	adds	r2, #8
 8011ad0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011ad4:	697b      	ldr	r3, [r7, #20]
 8011ad6:	f003 0307 	and.w	r3, r3, #7
 8011ada:	009b      	lsls	r3, r3, #2
 8011adc:	220f      	movs	r2, #15
 8011ade:	fa02 f303 	lsl.w	r3, r2, r3
 8011ae2:	43db      	mvns	r3, r3
 8011ae4:	697a      	ldr	r2, [r7, #20]
 8011ae6:	08d2      	lsrs	r2, r2, #3
 8011ae8:	4019      	ands	r1, r3
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	3208      	adds	r2, #8
 8011aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	68da      	ldr	r2, [r3, #12]
 8011af6:	697b      	ldr	r3, [r7, #20]
 8011af8:	005b      	lsls	r3, r3, #1
 8011afa:	2103      	movs	r1, #3
 8011afc:	fa01 f303 	lsl.w	r3, r1, r3
 8011b00:	43db      	mvns	r3, r3
 8011b02:	401a      	ands	r2, r3
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	685a      	ldr	r2, [r3, #4]
 8011b0c:	2101      	movs	r1, #1
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	fa01 f303 	lsl.w	r3, r1, r3
 8011b14:	43db      	mvns	r3, r3
 8011b16:	401a      	ands	r2, r3
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	689a      	ldr	r2, [r3, #8]
 8011b20:	697b      	ldr	r3, [r7, #20]
 8011b22:	005b      	lsls	r3, r3, #1
 8011b24:	2103      	movs	r1, #3
 8011b26:	fa01 f303 	lsl.w	r3, r1, r3
 8011b2a:	43db      	mvns	r3, r3
 8011b2c:	401a      	ands	r2, r3
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011b32:	697b      	ldr	r3, [r7, #20]
 8011b34:	3301      	adds	r3, #1
 8011b36:	617b      	str	r3, [r7, #20]
 8011b38:	697b      	ldr	r3, [r7, #20]
 8011b3a:	2b0f      	cmp	r3, #15
 8011b3c:	f67f af40 	bls.w	80119c0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8011b40:	bf00      	nop
 8011b42:	bf00      	nop
 8011b44:	371c      	adds	r7, #28
 8011b46:	46bd      	mov	sp, r7
 8011b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4c:	4770      	bx	lr
 8011b4e:	bf00      	nop
 8011b50:	40013800 	.word	0x40013800
 8011b54:	40020000 	.word	0x40020000
 8011b58:	40020400 	.word	0x40020400
 8011b5c:	40020800 	.word	0x40020800
 8011b60:	40020c00 	.word	0x40020c00
 8011b64:	40021000 	.word	0x40021000
 8011b68:	40013c00 	.word	0x40013c00

08011b6c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b088      	sub	sp, #32
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d101      	bne.n	8011b7e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	e128      	b.n	8011dd0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011b84:	b2db      	uxtb	r3, r3
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d109      	bne.n	8011b9e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	4a90      	ldr	r2, [pc, #576]	; (8011dd8 <HAL_I2S_Init+0x26c>)
 8011b96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8011b98:	6878      	ldr	r0, [r7, #4]
 8011b9a:	f7fe fcdb 	bl	8010554 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	2202      	movs	r2, #2
 8011ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	69db      	ldr	r3, [r3, #28]
 8011bac:	687a      	ldr	r2, [r7, #4]
 8011bae:	6812      	ldr	r2, [r2, #0]
 8011bb0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8011bb4:	f023 030f 	bic.w	r3, r3, #15
 8011bb8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	2202      	movs	r2, #2
 8011bc0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	695b      	ldr	r3, [r3, #20]
 8011bc6:	2b02      	cmp	r3, #2
 8011bc8:	d060      	beq.n	8011c8c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	68db      	ldr	r3, [r3, #12]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d102      	bne.n	8011bd8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8011bd2:	2310      	movs	r3, #16
 8011bd4:	617b      	str	r3, [r7, #20]
 8011bd6:	e001      	b.n	8011bdc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8011bd8:	2320      	movs	r3, #32
 8011bda:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	689b      	ldr	r3, [r3, #8]
 8011be0:	2b20      	cmp	r3, #32
 8011be2:	d802      	bhi.n	8011bea <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8011be4:	697b      	ldr	r3, [r7, #20]
 8011be6:	005b      	lsls	r3, r3, #1
 8011be8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8011bea:	2001      	movs	r0, #1
 8011bec:	f001 fd0e 	bl	801360c <HAL_RCCEx_GetPeriphCLKFreq>
 8011bf0:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	691b      	ldr	r3, [r3, #16]
 8011bf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011bfa:	d125      	bne.n	8011c48 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	68db      	ldr	r3, [r3, #12]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d010      	beq.n	8011c26 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8011c04:	697b      	ldr	r3, [r7, #20]
 8011c06:	009b      	lsls	r3, r3, #2
 8011c08:	68fa      	ldr	r2, [r7, #12]
 8011c0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8011c0e:	4613      	mov	r3, r2
 8011c10:	009b      	lsls	r3, r3, #2
 8011c12:	4413      	add	r3, r2
 8011c14:	005b      	lsls	r3, r3, #1
 8011c16:	461a      	mov	r2, r3
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	695b      	ldr	r3, [r3, #20]
 8011c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c20:	3305      	adds	r3, #5
 8011c22:	613b      	str	r3, [r7, #16]
 8011c24:	e01f      	b.n	8011c66 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8011c26:	697b      	ldr	r3, [r7, #20]
 8011c28:	00db      	lsls	r3, r3, #3
 8011c2a:	68fa      	ldr	r2, [r7, #12]
 8011c2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8011c30:	4613      	mov	r3, r2
 8011c32:	009b      	lsls	r3, r3, #2
 8011c34:	4413      	add	r3, r2
 8011c36:	005b      	lsls	r3, r3, #1
 8011c38:	461a      	mov	r2, r3
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	695b      	ldr	r3, [r3, #20]
 8011c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c42:	3305      	adds	r3, #5
 8011c44:	613b      	str	r3, [r7, #16]
 8011c46:	e00e      	b.n	8011c66 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8011c48:	68fa      	ldr	r2, [r7, #12]
 8011c4a:	697b      	ldr	r3, [r7, #20]
 8011c4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8011c50:	4613      	mov	r3, r2
 8011c52:	009b      	lsls	r3, r3, #2
 8011c54:	4413      	add	r3, r2
 8011c56:	005b      	lsls	r3, r3, #1
 8011c58:	461a      	mov	r2, r3
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	695b      	ldr	r3, [r3, #20]
 8011c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c62:	3305      	adds	r3, #5
 8011c64:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8011c66:	693b      	ldr	r3, [r7, #16]
 8011c68:	4a5c      	ldr	r2, [pc, #368]	; (8011ddc <HAL_I2S_Init+0x270>)
 8011c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8011c6e:	08db      	lsrs	r3, r3, #3
 8011c70:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8011c72:	693b      	ldr	r3, [r7, #16]
 8011c74:	f003 0301 	and.w	r3, r3, #1
 8011c78:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8011c7a:	693a      	ldr	r2, [r7, #16]
 8011c7c:	69bb      	ldr	r3, [r7, #24]
 8011c7e:	1ad3      	subs	r3, r2, r3
 8011c80:	085b      	lsrs	r3, r3, #1
 8011c82:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8011c84:	69bb      	ldr	r3, [r7, #24]
 8011c86:	021b      	lsls	r3, r3, #8
 8011c88:	61bb      	str	r3, [r7, #24]
 8011c8a:	e003      	b.n	8011c94 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8011c8c:	2302      	movs	r3, #2
 8011c8e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8011c90:	2300      	movs	r3, #0
 8011c92:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8011c94:	69fb      	ldr	r3, [r7, #28]
 8011c96:	2b01      	cmp	r3, #1
 8011c98:	d902      	bls.n	8011ca0 <HAL_I2S_Init+0x134>
 8011c9a:	69fb      	ldr	r3, [r7, #28]
 8011c9c:	2bff      	cmp	r3, #255	; 0xff
 8011c9e:	d907      	bls.n	8011cb0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ca4:	f043 0210 	orr.w	r2, r3, #16
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8011cac:	2301      	movs	r3, #1
 8011cae:	e08f      	b.n	8011dd0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	691a      	ldr	r2, [r3, #16]
 8011cb4:	69bb      	ldr	r3, [r7, #24]
 8011cb6:	ea42 0103 	orr.w	r1, r2, r3
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	69fa      	ldr	r2, [r7, #28]
 8011cc0:	430a      	orrs	r2, r1
 8011cc2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	69db      	ldr	r3, [r3, #28]
 8011cca:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8011cce:	f023 030f 	bic.w	r3, r3, #15
 8011cd2:	687a      	ldr	r2, [r7, #4]
 8011cd4:	6851      	ldr	r1, [r2, #4]
 8011cd6:	687a      	ldr	r2, [r7, #4]
 8011cd8:	6892      	ldr	r2, [r2, #8]
 8011cda:	4311      	orrs	r1, r2
 8011cdc:	687a      	ldr	r2, [r7, #4]
 8011cde:	68d2      	ldr	r2, [r2, #12]
 8011ce0:	4311      	orrs	r1, r2
 8011ce2:	687a      	ldr	r2, [r7, #4]
 8011ce4:	6992      	ldr	r2, [r2, #24]
 8011ce6:	430a      	orrs	r2, r1
 8011ce8:	431a      	orrs	r2, r3
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011cf2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	6a1b      	ldr	r3, [r3, #32]
 8011cf8:	2b01      	cmp	r3, #1
 8011cfa:	d161      	bne.n	8011dc0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	4a38      	ldr	r2, [pc, #224]	; (8011de0 <HAL_I2S_Init+0x274>)
 8011d00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	4a37      	ldr	r2, [pc, #220]	; (8011de4 <HAL_I2S_Init+0x278>)
 8011d08:	4293      	cmp	r3, r2
 8011d0a:	d101      	bne.n	8011d10 <HAL_I2S_Init+0x1a4>
 8011d0c:	4b36      	ldr	r3, [pc, #216]	; (8011de8 <HAL_I2S_Init+0x27c>)
 8011d0e:	e001      	b.n	8011d14 <HAL_I2S_Init+0x1a8>
 8011d10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8011d14:	69db      	ldr	r3, [r3, #28]
 8011d16:	687a      	ldr	r2, [r7, #4]
 8011d18:	6812      	ldr	r2, [r2, #0]
 8011d1a:	4932      	ldr	r1, [pc, #200]	; (8011de4 <HAL_I2S_Init+0x278>)
 8011d1c:	428a      	cmp	r2, r1
 8011d1e:	d101      	bne.n	8011d24 <HAL_I2S_Init+0x1b8>
 8011d20:	4a31      	ldr	r2, [pc, #196]	; (8011de8 <HAL_I2S_Init+0x27c>)
 8011d22:	e001      	b.n	8011d28 <HAL_I2S_Init+0x1bc>
 8011d24:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8011d28:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8011d2c:	f023 030f 	bic.w	r3, r3, #15
 8011d30:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	4a2b      	ldr	r2, [pc, #172]	; (8011de4 <HAL_I2S_Init+0x278>)
 8011d38:	4293      	cmp	r3, r2
 8011d3a:	d101      	bne.n	8011d40 <HAL_I2S_Init+0x1d4>
 8011d3c:	4b2a      	ldr	r3, [pc, #168]	; (8011de8 <HAL_I2S_Init+0x27c>)
 8011d3e:	e001      	b.n	8011d44 <HAL_I2S_Init+0x1d8>
 8011d40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8011d44:	2202      	movs	r2, #2
 8011d46:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	4a25      	ldr	r2, [pc, #148]	; (8011de4 <HAL_I2S_Init+0x278>)
 8011d4e:	4293      	cmp	r3, r2
 8011d50:	d101      	bne.n	8011d56 <HAL_I2S_Init+0x1ea>
 8011d52:	4b25      	ldr	r3, [pc, #148]	; (8011de8 <HAL_I2S_Init+0x27c>)
 8011d54:	e001      	b.n	8011d5a <HAL_I2S_Init+0x1ee>
 8011d56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8011d5a:	69db      	ldr	r3, [r3, #28]
 8011d5c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	685b      	ldr	r3, [r3, #4]
 8011d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d66:	d003      	beq.n	8011d70 <HAL_I2S_Init+0x204>
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	685b      	ldr	r3, [r3, #4]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d103      	bne.n	8011d78 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8011d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d74:	613b      	str	r3, [r7, #16]
 8011d76:	e001      	b.n	8011d7c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8011d78:	2300      	movs	r3, #0
 8011d7a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8011d7c:	693b      	ldr	r3, [r7, #16]
 8011d7e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	689b      	ldr	r3, [r3, #8]
 8011d84:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8011d86:	4313      	orrs	r3, r2
 8011d88:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	68db      	ldr	r3, [r3, #12]
 8011d8e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8011d90:	4313      	orrs	r3, r2
 8011d92:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	699b      	ldr	r3, [r3, #24]
 8011d98:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8011d9a:	4313      	orrs	r3, r2
 8011d9c:	b29a      	uxth	r2, r3
 8011d9e:	897b      	ldrh	r3, [r7, #10]
 8011da0:	4313      	orrs	r3, r2
 8011da2:	b29b      	uxth	r3, r3
 8011da4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011da8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	4a0d      	ldr	r2, [pc, #52]	; (8011de4 <HAL_I2S_Init+0x278>)
 8011db0:	4293      	cmp	r3, r2
 8011db2:	d101      	bne.n	8011db8 <HAL_I2S_Init+0x24c>
 8011db4:	4b0c      	ldr	r3, [pc, #48]	; (8011de8 <HAL_I2S_Init+0x27c>)
 8011db6:	e001      	b.n	8011dbc <HAL_I2S_Init+0x250>
 8011db8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8011dbc:	897a      	ldrh	r2, [r7, #10]
 8011dbe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	2200      	movs	r2, #0
 8011dc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	2201      	movs	r2, #1
 8011dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8011dce:	2300      	movs	r3, #0
}
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	3720      	adds	r7, #32
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	bd80      	pop	{r7, pc}
 8011dd8:	080124cd 	.word	0x080124cd
 8011ddc:	cccccccd 	.word	0xcccccccd
 8011de0:	08012655 	.word	0x08012655
 8011de4:	40003800 	.word	0x40003800
 8011de8:	40003400 	.word	0x40003400

08011dec <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b082      	sub	sp, #8
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d101      	bne.n	8011dfe <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 8011dfa:	2301      	movs	r3, #1
 8011dfc:	e01a      	b.n	8011e34 <HAL_I2S_DeInit+0x48>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	2202      	movs	r2, #2
 8011e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	69da      	ldr	r2, [r3, #28]
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011e14:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	f7fe fc3a 	bl	8010690 <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	2200      	movs	r2, #0
 8011e20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_RESET;
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	2200      	movs	r2, #0
 8011e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8011e32:	2300      	movs	r3, #0
}
 8011e34:	4618      	mov	r0, r3
 8011e36:	3708      	adds	r7, #8
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bd80      	pop	{r7, pc}

08011e3c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b086      	sub	sp, #24
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	60f8      	str	r0, [r7, #12]
 8011e44:	60b9      	str	r1, [r7, #8]
 8011e46:	4613      	mov	r3, r2
 8011e48:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8011e4a:	68bb      	ldr	r3, [r7, #8]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d002      	beq.n	8011e56 <HAL_I2S_Transmit_DMA+0x1a>
 8011e50:	88fb      	ldrh	r3, [r7, #6]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d101      	bne.n	8011e5a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8011e56:	2301      	movs	r3, #1
 8011e58:	e08e      	b.n	8011f78 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011e60:	b2db      	uxtb	r3, r3
 8011e62:	2b01      	cmp	r3, #1
 8011e64:	d101      	bne.n	8011e6a <HAL_I2S_Transmit_DMA+0x2e>
 8011e66:	2302      	movs	r3, #2
 8011e68:	e086      	b.n	8011f78 <HAL_I2S_Transmit_DMA+0x13c>
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	2201      	movs	r2, #1
 8011e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011e78:	b2db      	uxtb	r3, r3
 8011e7a:	2b01      	cmp	r3, #1
 8011e7c:	d005      	beq.n	8011e8a <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	2200      	movs	r2, #0
 8011e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8011e86:	2302      	movs	r3, #2
 8011e88:	e076      	b.n	8011f78 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	2203      	movs	r2, #3
 8011e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	2200      	movs	r2, #0
 8011e96:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	68ba      	ldr	r2, [r7, #8]
 8011e9c:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	69db      	ldr	r3, [r3, #28]
 8011ea4:	f003 0307 	and.w	r3, r3, #7
 8011ea8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8011eaa:	697b      	ldr	r3, [r7, #20]
 8011eac:	2b03      	cmp	r3, #3
 8011eae:	d002      	beq.n	8011eb6 <HAL_I2S_Transmit_DMA+0x7a>
 8011eb0:	697b      	ldr	r3, [r7, #20]
 8011eb2:	2b05      	cmp	r3, #5
 8011eb4:	d10a      	bne.n	8011ecc <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8011eb6:	88fb      	ldrh	r3, [r7, #6]
 8011eb8:	005b      	lsls	r3, r3, #1
 8011eba:	b29a      	uxth	r2, r3
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8011ec0:	88fb      	ldrh	r3, [r7, #6]
 8011ec2:	005b      	lsls	r3, r3, #1
 8011ec4:	b29a      	uxth	r2, r3
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011eca:	e005      	b.n	8011ed8 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	88fa      	ldrh	r2, [r7, #6]
 8011ed0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	88fa      	ldrh	r2, [r7, #6]
 8011ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011edc:	4a28      	ldr	r2, [pc, #160]	; (8011f80 <HAL_I2S_Transmit_DMA+0x144>)
 8011ede:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ee4:	4a27      	ldr	r2, [pc, #156]	; (8011f84 <HAL_I2S_Transmit_DMA+0x148>)
 8011ee6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011eec:	4a26      	ldr	r2, [pc, #152]	; (8011f88 <HAL_I2S_Transmit_DMA+0x14c>)
 8011eee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8011ef8:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8011f00:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011f06:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8011f08:	f7ff f896 	bl	8011038 <HAL_DMA_Start_IT>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d00f      	beq.n	8011f32 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f16:	f043 0208 	orr.w	r2, r3, #8
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	2201      	movs	r2, #1
 8011f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	2200      	movs	r2, #0
 8011f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8011f2e:	2301      	movs	r3, #1
 8011f30:	e022      	b.n	8011f78 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	69db      	ldr	r3, [r3, #28]
 8011f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d107      	bne.n	8011f50 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	69da      	ldr	r2, [r3, #28]
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011f4e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	685b      	ldr	r3, [r3, #4]
 8011f56:	f003 0302 	and.w	r3, r3, #2
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d107      	bne.n	8011f6e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	685a      	ldr	r2, [r3, #4]
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	f042 0202 	orr.w	r2, r2, #2
 8011f6c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	2200      	movs	r2, #0
 8011f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8011f76:	2300      	movs	r3, #0
}
 8011f78:	4618      	mov	r0, r3
 8011f7a:	3718      	adds	r7, #24
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	bd80      	pop	{r7, pc}
 8011f80:	080123ab 	.word	0x080123ab
 8011f84:	08012369 	.word	0x08012369
 8011f88:	080123c7 	.word	0x080123c7

08011f8c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b088      	sub	sp, #32
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011f94:	2300      	movs	r3, #0
 8011f96:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	685b      	ldr	r3, [r3, #4]
 8011f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011fa0:	d004      	beq.n	8011fac <HAL_I2S_DMAStop+0x20>
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	685b      	ldr	r3, [r3, #4]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	f040 80d1 	bne.w	801214e <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d00f      	beq.n	8011fd4 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fb8:	4618      	mov	r0, r3
 8011fba:	f7ff f895 	bl	80110e8 <HAL_DMA_Abort>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d007      	beq.n	8011fd4 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fc8:	f043 0208 	orr.w	r2, r3, #8
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8011fd0:	2301      	movs	r3, #1
 8011fd2:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8011fd4:	2364      	movs	r3, #100	; 0x64
 8011fd6:	2201      	movs	r2, #1
 8011fd8:	2102      	movs	r1, #2
 8011fda:	6878      	ldr	r0, [r7, #4]
 8011fdc:	f000 fb00 	bl	80125e0 <I2S_WaitFlagStateUntilTimeout>
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d00b      	beq.n	8011ffe <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fea:	f043 0201 	orr.w	r2, r3, #1
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	2201      	movs	r2, #1
 8011ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8011ffa:	2301      	movs	r3, #1
 8011ffc:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8011ffe:	2364      	movs	r3, #100	; 0x64
 8012000:	2200      	movs	r2, #0
 8012002:	2180      	movs	r1, #128	; 0x80
 8012004:	6878      	ldr	r0, [r7, #4]
 8012006:	f000 faeb 	bl	80125e0 <I2S_WaitFlagStateUntilTimeout>
 801200a:	4603      	mov	r3, r0
 801200c:	2b00      	cmp	r3, #0
 801200e:	d00b      	beq.n	8012028 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012014:	f043 0201 	orr.w	r2, r3, #1
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	2201      	movs	r2, #1
 8012020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8012024:	2301      	movs	r3, #1
 8012026:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	69da      	ldr	r2, [r3, #28]
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012036:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8012038:	2300      	movs	r3, #0
 801203a:	617b      	str	r3, [r7, #20]
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	689b      	ldr	r3, [r3, #8]
 8012042:	617b      	str	r3, [r7, #20]
 8012044:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	685a      	ldr	r2, [r3, #4]
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	f022 0202 	bic.w	r2, r2, #2
 8012054:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801205c:	b2db      	uxtb	r3, r3
 801205e:	2b05      	cmp	r3, #5
 8012060:	f040 8165 	bne.w	801232e <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012068:	2b00      	cmp	r3, #0
 801206a:	d00f      	beq.n	801208c <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012070:	4618      	mov	r0, r3
 8012072:	f7ff f839 	bl	80110e8 <HAL_DMA_Abort>
 8012076:	4603      	mov	r3, r0
 8012078:	2b00      	cmp	r3, #0
 801207a:	d007      	beq.n	801208c <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012080:	f043 0208 	orr.w	r2, r3, #8
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8012088:	2301      	movs	r3, #1
 801208a:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	4a8a      	ldr	r2, [pc, #552]	; (80122bc <HAL_I2S_DMAStop+0x330>)
 8012092:	4293      	cmp	r3, r2
 8012094:	d101      	bne.n	801209a <HAL_I2S_DMAStop+0x10e>
 8012096:	4b8a      	ldr	r3, [pc, #552]	; (80122c0 <HAL_I2S_DMAStop+0x334>)
 8012098:	e001      	b.n	801209e <HAL_I2S_DMAStop+0x112>
 801209a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801209e:	69da      	ldr	r2, [r3, #28]
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	4985      	ldr	r1, [pc, #532]	; (80122bc <HAL_I2S_DMAStop+0x330>)
 80120a6:	428b      	cmp	r3, r1
 80120a8:	d101      	bne.n	80120ae <HAL_I2S_DMAStop+0x122>
 80120aa:	4b85      	ldr	r3, [pc, #532]	; (80122c0 <HAL_I2S_DMAStop+0x334>)
 80120ac:	e001      	b.n	80120b2 <HAL_I2S_DMAStop+0x126>
 80120ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80120b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80120b6:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80120b8:	2300      	movs	r3, #0
 80120ba:	613b      	str	r3, [r7, #16]
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	4a7e      	ldr	r2, [pc, #504]	; (80122bc <HAL_I2S_DMAStop+0x330>)
 80120c2:	4293      	cmp	r3, r2
 80120c4:	d101      	bne.n	80120ca <HAL_I2S_DMAStop+0x13e>
 80120c6:	4b7e      	ldr	r3, [pc, #504]	; (80122c0 <HAL_I2S_DMAStop+0x334>)
 80120c8:	e001      	b.n	80120ce <HAL_I2S_DMAStop+0x142>
 80120ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80120ce:	68db      	ldr	r3, [r3, #12]
 80120d0:	613b      	str	r3, [r7, #16]
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	4a79      	ldr	r2, [pc, #484]	; (80122bc <HAL_I2S_DMAStop+0x330>)
 80120d8:	4293      	cmp	r3, r2
 80120da:	d101      	bne.n	80120e0 <HAL_I2S_DMAStop+0x154>
 80120dc:	4b78      	ldr	r3, [pc, #480]	; (80122c0 <HAL_I2S_DMAStop+0x334>)
 80120de:	e001      	b.n	80120e4 <HAL_I2S_DMAStop+0x158>
 80120e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80120e4:	689b      	ldr	r3, [r3, #8]
 80120e6:	613b      	str	r3, [r7, #16]
 80120e8:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	4a73      	ldr	r2, [pc, #460]	; (80122bc <HAL_I2S_DMAStop+0x330>)
 80120f0:	4293      	cmp	r3, r2
 80120f2:	d101      	bne.n	80120f8 <HAL_I2S_DMAStop+0x16c>
 80120f4:	4b72      	ldr	r3, [pc, #456]	; (80122c0 <HAL_I2S_DMAStop+0x334>)
 80120f6:	e001      	b.n	80120fc <HAL_I2S_DMAStop+0x170>
 80120f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80120fc:	685a      	ldr	r2, [r3, #4]
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	496e      	ldr	r1, [pc, #440]	; (80122bc <HAL_I2S_DMAStop+0x330>)
 8012104:	428b      	cmp	r3, r1
 8012106:	d101      	bne.n	801210c <HAL_I2S_DMAStop+0x180>
 8012108:	4b6d      	ldr	r3, [pc, #436]	; (80122c0 <HAL_I2S_DMAStop+0x334>)
 801210a:	e001      	b.n	8012110 <HAL_I2S_DMAStop+0x184>
 801210c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8012110:	f022 0201 	bic.w	r2, r2, #1
 8012114:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	685b      	ldr	r3, [r3, #4]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d10c      	bne.n	8012138 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012122:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	2201      	movs	r2, #1
 801212e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8012132:	2301      	movs	r3, #1
 8012134:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8012136:	e0fa      	b.n	801232e <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	4a5f      	ldr	r2, [pc, #380]	; (80122bc <HAL_I2S_DMAStop+0x330>)
 801213e:	4293      	cmp	r3, r2
 8012140:	d101      	bne.n	8012146 <HAL_I2S_DMAStop+0x1ba>
 8012142:	4b5f      	ldr	r3, [pc, #380]	; (80122c0 <HAL_I2S_DMAStop+0x334>)
 8012144:	e001      	b.n	801214a <HAL_I2S_DMAStop+0x1be>
 8012146:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801214a:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 801214c:	e0ef      	b.n	801232e <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	685b      	ldr	r3, [r3, #4]
 8012152:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012156:	d005      	beq.n	8012164 <HAL_I2S_DMAStop+0x1d8>
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	685b      	ldr	r3, [r3, #4]
 801215c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012160:	f040 80e5 	bne.w	801232e <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012168:	2b00      	cmp	r3, #0
 801216a:	d00f      	beq.n	801218c <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012170:	4618      	mov	r0, r3
 8012172:	f7fe ffb9 	bl	80110e8 <HAL_DMA_Abort>
 8012176:	4603      	mov	r3, r0
 8012178:	2b00      	cmp	r3, #0
 801217a:	d007      	beq.n	801218c <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012180:	f043 0208 	orr.w	r2, r3, #8
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8012188:	2301      	movs	r3, #1
 801218a:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012192:	b2db      	uxtb	r3, r3
 8012194:	2b05      	cmp	r3, #5
 8012196:	f040 809a 	bne.w	80122ce <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d00f      	beq.n	80121c2 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121a6:	4618      	mov	r0, r3
 80121a8:	f7fe ff9e 	bl	80110e8 <HAL_DMA_Abort>
 80121ac:	4603      	mov	r3, r0
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d007      	beq.n	80121c2 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121b6:	f043 0208 	orr.w	r2, r3, #8
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80121be:	2301      	movs	r3, #1
 80121c0:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80121c2:	f7fe fd3f 	bl	8010c44 <HAL_GetTick>
 80121c6:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80121c8:	e012      	b.n	80121f0 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80121ca:	f7fe fd3b 	bl	8010c44 <HAL_GetTick>
 80121ce:	4602      	mov	r2, r0
 80121d0:	69bb      	ldr	r3, [r7, #24]
 80121d2:	1ad3      	subs	r3, r2, r3
 80121d4:	2b64      	cmp	r3, #100	; 0x64
 80121d6:	d90b      	bls.n	80121f0 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121dc:	f043 0201 	orr.w	r2, r3, #1
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2201      	movs	r2, #1
 80121e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80121ec:	2301      	movs	r3, #1
 80121ee:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	4a31      	ldr	r2, [pc, #196]	; (80122bc <HAL_I2S_DMAStop+0x330>)
 80121f6:	4293      	cmp	r3, r2
 80121f8:	d101      	bne.n	80121fe <HAL_I2S_DMAStop+0x272>
 80121fa:	4b31      	ldr	r3, [pc, #196]	; (80122c0 <HAL_I2S_DMAStop+0x334>)
 80121fc:	e001      	b.n	8012202 <HAL_I2S_DMAStop+0x276>
 80121fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8012202:	689b      	ldr	r3, [r3, #8]
 8012204:	f003 0302 	and.w	r3, r3, #2
 8012208:	2b02      	cmp	r3, #2
 801220a:	d1de      	bne.n	80121ca <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 801220c:	e012      	b.n	8012234 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 801220e:	f7fe fd19 	bl	8010c44 <HAL_GetTick>
 8012212:	4602      	mov	r2, r0
 8012214:	69bb      	ldr	r3, [r7, #24]
 8012216:	1ad3      	subs	r3, r2, r3
 8012218:	2b64      	cmp	r3, #100	; 0x64
 801221a:	d90b      	bls.n	8012234 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012220:	f043 0201 	orr.w	r2, r3, #1
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2201      	movs	r2, #1
 801222c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8012230:	2301      	movs	r3, #1
 8012232:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	4a20      	ldr	r2, [pc, #128]	; (80122bc <HAL_I2S_DMAStop+0x330>)
 801223a:	4293      	cmp	r3, r2
 801223c:	d101      	bne.n	8012242 <HAL_I2S_DMAStop+0x2b6>
 801223e:	4b20      	ldr	r3, [pc, #128]	; (80122c0 <HAL_I2S_DMAStop+0x334>)
 8012240:	e001      	b.n	8012246 <HAL_I2S_DMAStop+0x2ba>
 8012242:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8012246:	689b      	ldr	r3, [r3, #8]
 8012248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801224c:	2b80      	cmp	r3, #128	; 0x80
 801224e:	d0de      	beq.n	801220e <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	4a19      	ldr	r2, [pc, #100]	; (80122bc <HAL_I2S_DMAStop+0x330>)
 8012256:	4293      	cmp	r3, r2
 8012258:	d101      	bne.n	801225e <HAL_I2S_DMAStop+0x2d2>
 801225a:	4b19      	ldr	r3, [pc, #100]	; (80122c0 <HAL_I2S_DMAStop+0x334>)
 801225c:	e001      	b.n	8012262 <HAL_I2S_DMAStop+0x2d6>
 801225e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8012262:	69da      	ldr	r2, [r3, #28]
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	4914      	ldr	r1, [pc, #80]	; (80122bc <HAL_I2S_DMAStop+0x330>)
 801226a:	428b      	cmp	r3, r1
 801226c:	d101      	bne.n	8012272 <HAL_I2S_DMAStop+0x2e6>
 801226e:	4b14      	ldr	r3, [pc, #80]	; (80122c0 <HAL_I2S_DMAStop+0x334>)
 8012270:	e001      	b.n	8012276 <HAL_I2S_DMAStop+0x2ea>
 8012272:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8012276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801227a:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 801227c:	2300      	movs	r3, #0
 801227e:	60fb      	str	r3, [r7, #12]
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	4a0d      	ldr	r2, [pc, #52]	; (80122bc <HAL_I2S_DMAStop+0x330>)
 8012286:	4293      	cmp	r3, r2
 8012288:	d101      	bne.n	801228e <HAL_I2S_DMAStop+0x302>
 801228a:	4b0d      	ldr	r3, [pc, #52]	; (80122c0 <HAL_I2S_DMAStop+0x334>)
 801228c:	e001      	b.n	8012292 <HAL_I2S_DMAStop+0x306>
 801228e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8012292:	689b      	ldr	r3, [r3, #8]
 8012294:	60fb      	str	r3, [r7, #12]
 8012296:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	4a07      	ldr	r2, [pc, #28]	; (80122bc <HAL_I2S_DMAStop+0x330>)
 801229e:	4293      	cmp	r3, r2
 80122a0:	d101      	bne.n	80122a6 <HAL_I2S_DMAStop+0x31a>
 80122a2:	4b07      	ldr	r3, [pc, #28]	; (80122c0 <HAL_I2S_DMAStop+0x334>)
 80122a4:	e001      	b.n	80122aa <HAL_I2S_DMAStop+0x31e>
 80122a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80122aa:	685a      	ldr	r2, [r3, #4]
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	4902      	ldr	r1, [pc, #8]	; (80122bc <HAL_I2S_DMAStop+0x330>)
 80122b2:	428b      	cmp	r3, r1
 80122b4:	d106      	bne.n	80122c4 <HAL_I2S_DMAStop+0x338>
 80122b6:	4b02      	ldr	r3, [pc, #8]	; (80122c0 <HAL_I2S_DMAStop+0x334>)
 80122b8:	e006      	b.n	80122c8 <HAL_I2S_DMAStop+0x33c>
 80122ba:	bf00      	nop
 80122bc:	40003800 	.word	0x40003800
 80122c0:	40003400 	.word	0x40003400
 80122c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80122c8:	f022 0202 	bic.w	r2, r2, #2
 80122cc:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	69da      	ldr	r2, [r3, #28]
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80122dc:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80122de:	2300      	movs	r3, #0
 80122e0:	60bb      	str	r3, [r7, #8]
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	68db      	ldr	r3, [r3, #12]
 80122e8:	60bb      	str	r3, [r7, #8]
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	689b      	ldr	r3, [r3, #8]
 80122f0:	60bb      	str	r3, [r7, #8]
 80122f2:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	685a      	ldr	r2, [r3, #4]
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	f022 0201 	bic.w	r2, r2, #1
 8012302:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	685b      	ldr	r3, [r3, #4]
 8012308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801230c:	d10c      	bne.n	8012328 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012312:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	2201      	movs	r2, #1
 801231e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8012322:	2301      	movs	r3, #1
 8012324:	77fb      	strb	r3, [r7, #31]
 8012326:	e002      	b.n	801232e <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	2201      	movs	r2, #1
 8012332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8012336:	7ffb      	ldrb	r3, [r7, #31]
}
 8012338:	4618      	mov	r0, r3
 801233a:	3720      	adds	r7, #32
 801233c:	46bd      	mov	sp, r7
 801233e:	bd80      	pop	{r7, pc}

08012340 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8012340:	b480      	push	{r7}
 8012342:	b083      	sub	sp, #12
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8012348:	bf00      	nop
 801234a:	370c      	adds	r7, #12
 801234c:	46bd      	mov	sp, r7
 801234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012352:	4770      	bx	lr

08012354 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8012354:	b480      	push	{r7}
 8012356:	b083      	sub	sp, #12
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 801235c:	bf00      	nop
 801235e:	370c      	adds	r7, #12
 8012360:	46bd      	mov	sp, r7
 8012362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012366:	4770      	bx	lr

08012368 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b084      	sub	sp, #16
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012374:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	69db      	ldr	r3, [r3, #28]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d10e      	bne.n	801239c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	685a      	ldr	r2, [r3, #4]
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	f022 0202 	bic.w	r2, r2, #2
 801238c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	2200      	movs	r2, #0
 8012392:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	2201      	movs	r2, #1
 8012398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 801239c:	68f8      	ldr	r0, [r7, #12]
 801239e:	f005 fc97 	bl	8017cd0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80123a2:	bf00      	nop
 80123a4:	3710      	adds	r7, #16
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd80      	pop	{r7, pc}

080123aa <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80123aa:	b580      	push	{r7, lr}
 80123ac:	b084      	sub	sp, #16
 80123ae:	af00      	add	r7, sp, #0
 80123b0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123b6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80123b8:	68f8      	ldr	r0, [r7, #12]
 80123ba:	f005 fcb1 	bl	8017d20 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80123be:	bf00      	nop
 80123c0:	3710      	adds	r7, #16
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd80      	pop	{r7, pc}

080123c6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80123c6:	b580      	push	{r7, lr}
 80123c8:	b084      	sub	sp, #16
 80123ca:	af00      	add	r7, sp, #0
 80123cc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123d2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	685a      	ldr	r2, [r3, #4]
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	f022 0203 	bic.w	r2, r2, #3
 80123e2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	2200      	movs	r2, #0
 80123e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	2200      	movs	r2, #0
 80123ee:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	2201      	movs	r2, #1
 80123f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80123fc:	f043 0208 	orr.w	r2, r3, #8
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8012404:	68f8      	ldr	r0, [r7, #12]
 8012406:	f7ff ffa5 	bl	8012354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 801240a:	bf00      	nop
 801240c:	3710      	adds	r7, #16
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}

08012412 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8012412:	b580      	push	{r7, lr}
 8012414:	b082      	sub	sp, #8
 8012416:	af00      	add	r7, sp, #0
 8012418:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801241e:	881a      	ldrh	r2, [r3, #0]
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801242a:	1c9a      	adds	r2, r3, #2
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012434:	b29b      	uxth	r3, r3
 8012436:	3b01      	subs	r3, #1
 8012438:	b29a      	uxth	r2, r3
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012442:	b29b      	uxth	r3, r3
 8012444:	2b00      	cmp	r3, #0
 8012446:	d10e      	bne.n	8012466 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	685a      	ldr	r2, [r3, #4]
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8012456:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	2201      	movs	r2, #1
 801245c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8012460:	6878      	ldr	r0, [r7, #4]
 8012462:	f005 fc35 	bl	8017cd0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8012466:	bf00      	nop
 8012468:	3708      	adds	r7, #8
 801246a:	46bd      	mov	sp, r7
 801246c:	bd80      	pop	{r7, pc}

0801246e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 801246e:	b580      	push	{r7, lr}
 8012470:	b082      	sub	sp, #8
 8012472:	af00      	add	r7, sp, #0
 8012474:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	68da      	ldr	r2, [r3, #12]
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012480:	b292      	uxth	r2, r2
 8012482:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012488:	1c9a      	adds	r2, r3, #2
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012492:	b29b      	uxth	r3, r3
 8012494:	3b01      	subs	r3, #1
 8012496:	b29a      	uxth	r2, r3
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80124a0:	b29b      	uxth	r3, r3
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d10e      	bne.n	80124c4 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	685a      	ldr	r2, [r3, #4]
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80124b4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	2201      	movs	r2, #1
 80124ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80124be:	6878      	ldr	r0, [r7, #4]
 80124c0:	f7ff ff3e 	bl	8012340 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80124c4:	bf00      	nop
 80124c6:	3708      	adds	r7, #8
 80124c8:	46bd      	mov	sp, r7
 80124ca:	bd80      	pop	{r7, pc}

080124cc <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b086      	sub	sp, #24
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	689b      	ldr	r3, [r3, #8]
 80124da:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80124e2:	b2db      	uxtb	r3, r3
 80124e4:	2b04      	cmp	r3, #4
 80124e6:	d13a      	bne.n	801255e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80124e8:	697b      	ldr	r3, [r7, #20]
 80124ea:	f003 0301 	and.w	r3, r3, #1
 80124ee:	2b01      	cmp	r3, #1
 80124f0:	d109      	bne.n	8012506 <I2S_IRQHandler+0x3a>
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	685b      	ldr	r3, [r3, #4]
 80124f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80124fc:	2b40      	cmp	r3, #64	; 0x40
 80124fe:	d102      	bne.n	8012506 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8012500:	6878      	ldr	r0, [r7, #4]
 8012502:	f7ff ffb4 	bl	801246e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8012506:	697b      	ldr	r3, [r7, #20]
 8012508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801250c:	2b40      	cmp	r3, #64	; 0x40
 801250e:	d126      	bne.n	801255e <I2S_IRQHandler+0x92>
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	685b      	ldr	r3, [r3, #4]
 8012516:	f003 0320 	and.w	r3, r3, #32
 801251a:	2b20      	cmp	r3, #32
 801251c:	d11f      	bne.n	801255e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	685a      	ldr	r2, [r3, #4]
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801252c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 801252e:	2300      	movs	r3, #0
 8012530:	613b      	str	r3, [r7, #16]
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	68db      	ldr	r3, [r3, #12]
 8012538:	613b      	str	r3, [r7, #16]
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	689b      	ldr	r3, [r3, #8]
 8012540:	613b      	str	r3, [r7, #16]
 8012542:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	2201      	movs	r2, #1
 8012548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012550:	f043 0202 	orr.w	r2, r3, #2
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8012558:	6878      	ldr	r0, [r7, #4]
 801255a:	f7ff fefb 	bl	8012354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012564:	b2db      	uxtb	r3, r3
 8012566:	2b03      	cmp	r3, #3
 8012568:	d136      	bne.n	80125d8 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 801256a:	697b      	ldr	r3, [r7, #20]
 801256c:	f003 0302 	and.w	r3, r3, #2
 8012570:	2b02      	cmp	r3, #2
 8012572:	d109      	bne.n	8012588 <I2S_IRQHandler+0xbc>
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	685b      	ldr	r3, [r3, #4]
 801257a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801257e:	2b80      	cmp	r3, #128	; 0x80
 8012580:	d102      	bne.n	8012588 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8012582:	6878      	ldr	r0, [r7, #4]
 8012584:	f7ff ff45 	bl	8012412 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8012588:	697b      	ldr	r3, [r7, #20]
 801258a:	f003 0308 	and.w	r3, r3, #8
 801258e:	2b08      	cmp	r3, #8
 8012590:	d122      	bne.n	80125d8 <I2S_IRQHandler+0x10c>
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	685b      	ldr	r3, [r3, #4]
 8012598:	f003 0320 	and.w	r3, r3, #32
 801259c:	2b20      	cmp	r3, #32
 801259e:	d11b      	bne.n	80125d8 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	685a      	ldr	r2, [r3, #4]
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80125ae:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80125b0:	2300      	movs	r3, #0
 80125b2:	60fb      	str	r3, [r7, #12]
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	689b      	ldr	r3, [r3, #8]
 80125ba:	60fb      	str	r3, [r7, #12]
 80125bc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	2201      	movs	r2, #1
 80125c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80125ca:	f043 0204 	orr.w	r2, r3, #4
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80125d2:	6878      	ldr	r0, [r7, #4]
 80125d4:	f7ff febe 	bl	8012354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80125d8:	bf00      	nop
 80125da:	3718      	adds	r7, #24
 80125dc:	46bd      	mov	sp, r7
 80125de:	bd80      	pop	{r7, pc}

080125e0 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b086      	sub	sp, #24
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	60f8      	str	r0, [r7, #12]
 80125e8:	60b9      	str	r1, [r7, #8]
 80125ea:	603b      	str	r3, [r7, #0]
 80125ec:	4613      	mov	r3, r2
 80125ee:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80125f0:	f7fe fb28 	bl	8010c44 <HAL_GetTick>
 80125f4:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80125f6:	e018      	b.n	801262a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80125f8:	683b      	ldr	r3, [r7, #0]
 80125fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125fe:	d014      	beq.n	801262a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8012600:	f7fe fb20 	bl	8010c44 <HAL_GetTick>
 8012604:	4602      	mov	r2, r0
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	1ad3      	subs	r3, r2, r3
 801260a:	683a      	ldr	r2, [r7, #0]
 801260c:	429a      	cmp	r2, r3
 801260e:	d902      	bls.n	8012616 <I2S_WaitFlagStateUntilTimeout+0x36>
 8012610:	683b      	ldr	r3, [r7, #0]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d109      	bne.n	801262a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	2201      	movs	r2, #1
 801261a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	2200      	movs	r2, #0
 8012622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8012626:	2303      	movs	r3, #3
 8012628:	e00f      	b.n	801264a <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	689a      	ldr	r2, [r3, #8]
 8012630:	68bb      	ldr	r3, [r7, #8]
 8012632:	4013      	ands	r3, r2
 8012634:	68ba      	ldr	r2, [r7, #8]
 8012636:	429a      	cmp	r2, r3
 8012638:	bf0c      	ite	eq
 801263a:	2301      	moveq	r3, #1
 801263c:	2300      	movne	r3, #0
 801263e:	b2db      	uxtb	r3, r3
 8012640:	461a      	mov	r2, r3
 8012642:	79fb      	ldrb	r3, [r7, #7]
 8012644:	429a      	cmp	r2, r3
 8012646:	d1d7      	bne.n	80125f8 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8012648:	2300      	movs	r3, #0
}
 801264a:	4618      	mov	r0, r3
 801264c:	3718      	adds	r7, #24
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}
	...

08012654 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b088      	sub	sp, #32
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	689b      	ldr	r3, [r3, #8]
 8012662:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	4aa2      	ldr	r2, [pc, #648]	; (80128f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 801266a:	4293      	cmp	r3, r2
 801266c:	d101      	bne.n	8012672 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 801266e:	4ba2      	ldr	r3, [pc, #648]	; (80128f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8012670:	e001      	b.n	8012676 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8012672:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8012676:	689b      	ldr	r3, [r3, #8]
 8012678:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	685b      	ldr	r3, [r3, #4]
 8012680:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	4a9b      	ldr	r2, [pc, #620]	; (80128f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8012688:	4293      	cmp	r3, r2
 801268a:	d101      	bne.n	8012690 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 801268c:	4b9a      	ldr	r3, [pc, #616]	; (80128f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 801268e:	e001      	b.n	8012694 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8012690:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8012694:	685b      	ldr	r3, [r3, #4]
 8012696:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	685b      	ldr	r3, [r3, #4]
 801269c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80126a0:	d004      	beq.n	80126ac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	685b      	ldr	r3, [r3, #4]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	f040 8099 	bne.w	80127de <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80126ac:	69fb      	ldr	r3, [r7, #28]
 80126ae:	f003 0302 	and.w	r3, r3, #2
 80126b2:	2b02      	cmp	r3, #2
 80126b4:	d107      	bne.n	80126c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80126b6:	697b      	ldr	r3, [r7, #20]
 80126b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d002      	beq.n	80126c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80126c0:	6878      	ldr	r0, [r7, #4]
 80126c2:	f000 f925 	bl	8012910 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80126c6:	69bb      	ldr	r3, [r7, #24]
 80126c8:	f003 0301 	and.w	r3, r3, #1
 80126cc:	2b01      	cmp	r3, #1
 80126ce:	d107      	bne.n	80126e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80126d0:	693b      	ldr	r3, [r7, #16]
 80126d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d002      	beq.n	80126e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f000 f9c8 	bl	8012a70 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80126e0:	69bb      	ldr	r3, [r7, #24]
 80126e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80126e6:	2b40      	cmp	r3, #64	; 0x40
 80126e8:	d13a      	bne.n	8012760 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80126ea:	693b      	ldr	r3, [r7, #16]
 80126ec:	f003 0320 	and.w	r3, r3, #32
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d035      	beq.n	8012760 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	4a7e      	ldr	r2, [pc, #504]	; (80128f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80126fa:	4293      	cmp	r3, r2
 80126fc:	d101      	bne.n	8012702 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80126fe:	4b7e      	ldr	r3, [pc, #504]	; (80128f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8012700:	e001      	b.n	8012706 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8012702:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8012706:	685a      	ldr	r2, [r3, #4]
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	4979      	ldr	r1, [pc, #484]	; (80128f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 801270e:	428b      	cmp	r3, r1
 8012710:	d101      	bne.n	8012716 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8012712:	4b79      	ldr	r3, [pc, #484]	; (80128f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8012714:	e001      	b.n	801271a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8012716:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801271a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801271e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	685a      	ldr	r2, [r3, #4]
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801272e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8012730:	2300      	movs	r3, #0
 8012732:	60fb      	str	r3, [r7, #12]
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	68db      	ldr	r3, [r3, #12]
 801273a:	60fb      	str	r3, [r7, #12]
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	689b      	ldr	r3, [r3, #8]
 8012742:	60fb      	str	r3, [r7, #12]
 8012744:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	2201      	movs	r2, #1
 801274a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012752:	f043 0202 	orr.w	r2, r3, #2
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 801275a:	6878      	ldr	r0, [r7, #4]
 801275c:	f7ff fdfa 	bl	8012354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8012760:	69fb      	ldr	r3, [r7, #28]
 8012762:	f003 0308 	and.w	r3, r3, #8
 8012766:	2b08      	cmp	r3, #8
 8012768:	f040 80be 	bne.w	80128e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 801276c:	697b      	ldr	r3, [r7, #20]
 801276e:	f003 0320 	and.w	r3, r3, #32
 8012772:	2b00      	cmp	r3, #0
 8012774:	f000 80b8 	beq.w	80128e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	685a      	ldr	r2, [r3, #4]
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8012786:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	4a59      	ldr	r2, [pc, #356]	; (80128f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 801278e:	4293      	cmp	r3, r2
 8012790:	d101      	bne.n	8012796 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8012792:	4b59      	ldr	r3, [pc, #356]	; (80128f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8012794:	e001      	b.n	801279a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8012796:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801279a:	685a      	ldr	r2, [r3, #4]
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	4954      	ldr	r1, [pc, #336]	; (80128f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80127a2:	428b      	cmp	r3, r1
 80127a4:	d101      	bne.n	80127aa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80127a6:	4b54      	ldr	r3, [pc, #336]	; (80128f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80127a8:	e001      	b.n	80127ae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80127aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80127ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80127b2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80127b4:	2300      	movs	r3, #0
 80127b6:	60bb      	str	r3, [r7, #8]
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	689b      	ldr	r3, [r3, #8]
 80127be:	60bb      	str	r3, [r7, #8]
 80127c0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	2201      	movs	r2, #1
 80127c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80127ce:	f043 0204 	orr.w	r2, r3, #4
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80127d6:	6878      	ldr	r0, [r7, #4]
 80127d8:	f7ff fdbc 	bl	8012354 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80127dc:	e084      	b.n	80128e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80127de:	69bb      	ldr	r3, [r7, #24]
 80127e0:	f003 0302 	and.w	r3, r3, #2
 80127e4:	2b02      	cmp	r3, #2
 80127e6:	d107      	bne.n	80127f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80127e8:	693b      	ldr	r3, [r7, #16]
 80127ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d002      	beq.n	80127f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80127f2:	6878      	ldr	r0, [r7, #4]
 80127f4:	f000 f8be 	bl	8012974 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80127f8:	69fb      	ldr	r3, [r7, #28]
 80127fa:	f003 0301 	and.w	r3, r3, #1
 80127fe:	2b01      	cmp	r3, #1
 8012800:	d107      	bne.n	8012812 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8012802:	697b      	ldr	r3, [r7, #20]
 8012804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012808:	2b00      	cmp	r3, #0
 801280a:	d002      	beq.n	8012812 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 801280c:	6878      	ldr	r0, [r7, #4]
 801280e:	f000 f8fd 	bl	8012a0c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8012812:	69fb      	ldr	r3, [r7, #28]
 8012814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012818:	2b40      	cmp	r3, #64	; 0x40
 801281a:	d12f      	bne.n	801287c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 801281c:	697b      	ldr	r3, [r7, #20]
 801281e:	f003 0320 	and.w	r3, r3, #32
 8012822:	2b00      	cmp	r3, #0
 8012824:	d02a      	beq.n	801287c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	685a      	ldr	r2, [r3, #4]
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8012834:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	4a2e      	ldr	r2, [pc, #184]	; (80128f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 801283c:	4293      	cmp	r3, r2
 801283e:	d101      	bne.n	8012844 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8012840:	4b2d      	ldr	r3, [pc, #180]	; (80128f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8012842:	e001      	b.n	8012848 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8012844:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8012848:	685a      	ldr	r2, [r3, #4]
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	4929      	ldr	r1, [pc, #164]	; (80128f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8012850:	428b      	cmp	r3, r1
 8012852:	d101      	bne.n	8012858 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8012854:	4b28      	ldr	r3, [pc, #160]	; (80128f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8012856:	e001      	b.n	801285c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8012858:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801285c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8012860:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	2201      	movs	r2, #1
 8012866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801286e:	f043 0202 	orr.w	r2, r3, #2
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8012876:	6878      	ldr	r0, [r7, #4]
 8012878:	f7ff fd6c 	bl	8012354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 801287c:	69bb      	ldr	r3, [r7, #24]
 801287e:	f003 0308 	and.w	r3, r3, #8
 8012882:	2b08      	cmp	r3, #8
 8012884:	d131      	bne.n	80128ea <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8012886:	693b      	ldr	r3, [r7, #16]
 8012888:	f003 0320 	and.w	r3, r3, #32
 801288c:	2b00      	cmp	r3, #0
 801288e:	d02c      	beq.n	80128ea <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	4a17      	ldr	r2, [pc, #92]	; (80128f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8012896:	4293      	cmp	r3, r2
 8012898:	d101      	bne.n	801289e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 801289a:	4b17      	ldr	r3, [pc, #92]	; (80128f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 801289c:	e001      	b.n	80128a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 801289e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80128a2:	685a      	ldr	r2, [r3, #4]
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	4912      	ldr	r1, [pc, #72]	; (80128f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80128aa:	428b      	cmp	r3, r1
 80128ac:	d101      	bne.n	80128b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80128ae:	4b12      	ldr	r3, [pc, #72]	; (80128f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80128b0:	e001      	b.n	80128b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80128b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80128b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80128ba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	685a      	ldr	r2, [r3, #4]
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80128ca:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	2201      	movs	r2, #1
 80128d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128d8:	f043 0204 	orr.w	r2, r3, #4
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80128e0:	6878      	ldr	r0, [r7, #4]
 80128e2:	f7ff fd37 	bl	8012354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80128e6:	e000      	b.n	80128ea <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80128e8:	bf00      	nop
}
 80128ea:	bf00      	nop
 80128ec:	3720      	adds	r7, #32
 80128ee:	46bd      	mov	sp, r7
 80128f0:	bd80      	pop	{r7, pc}
 80128f2:	bf00      	nop
 80128f4:	40003800 	.word	0x40003800
 80128f8:	40003400 	.word	0x40003400

080128fc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80128fc:	b480      	push	{r7}
 80128fe:	b083      	sub	sp, #12
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8012904:	bf00      	nop
 8012906:	370c      	adds	r7, #12
 8012908:	46bd      	mov	sp, r7
 801290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290e:	4770      	bx	lr

08012910 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b082      	sub	sp, #8
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801291c:	1c99      	adds	r1, r3, #2
 801291e:	687a      	ldr	r2, [r7, #4]
 8012920:	6251      	str	r1, [r2, #36]	; 0x24
 8012922:	881a      	ldrh	r2, [r3, #0]
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801292e:	b29b      	uxth	r3, r3
 8012930:	3b01      	subs	r3, #1
 8012932:	b29a      	uxth	r2, r3
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801293c:	b29b      	uxth	r3, r3
 801293e:	2b00      	cmp	r3, #0
 8012940:	d113      	bne.n	801296a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	685a      	ldr	r2, [r3, #4]
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8012950:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012956:	b29b      	uxth	r3, r3
 8012958:	2b00      	cmp	r3, #0
 801295a:	d106      	bne.n	801296a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	2201      	movs	r2, #1
 8012960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8012964:	6878      	ldr	r0, [r7, #4]
 8012966:	f7ff ffc9 	bl	80128fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 801296a:	bf00      	nop
 801296c:	3708      	adds	r7, #8
 801296e:	46bd      	mov	sp, r7
 8012970:	bd80      	pop	{r7, pc}
	...

08012974 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8012974:	b580      	push	{r7, lr}
 8012976:	b082      	sub	sp, #8
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012980:	1c99      	adds	r1, r3, #2
 8012982:	687a      	ldr	r2, [r7, #4]
 8012984:	6251      	str	r1, [r2, #36]	; 0x24
 8012986:	8819      	ldrh	r1, [r3, #0]
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	4a1d      	ldr	r2, [pc, #116]	; (8012a04 <I2SEx_TxISR_I2SExt+0x90>)
 801298e:	4293      	cmp	r3, r2
 8012990:	d101      	bne.n	8012996 <I2SEx_TxISR_I2SExt+0x22>
 8012992:	4b1d      	ldr	r3, [pc, #116]	; (8012a08 <I2SEx_TxISR_I2SExt+0x94>)
 8012994:	e001      	b.n	801299a <I2SEx_TxISR_I2SExt+0x26>
 8012996:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801299a:	460a      	mov	r2, r1
 801299c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80129a2:	b29b      	uxth	r3, r3
 80129a4:	3b01      	subs	r3, #1
 80129a6:	b29a      	uxth	r2, r3
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80129b0:	b29b      	uxth	r3, r3
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d121      	bne.n	80129fa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	4a12      	ldr	r2, [pc, #72]	; (8012a04 <I2SEx_TxISR_I2SExt+0x90>)
 80129bc:	4293      	cmp	r3, r2
 80129be:	d101      	bne.n	80129c4 <I2SEx_TxISR_I2SExt+0x50>
 80129c0:	4b11      	ldr	r3, [pc, #68]	; (8012a08 <I2SEx_TxISR_I2SExt+0x94>)
 80129c2:	e001      	b.n	80129c8 <I2SEx_TxISR_I2SExt+0x54>
 80129c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80129c8:	685a      	ldr	r2, [r3, #4]
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	490d      	ldr	r1, [pc, #52]	; (8012a04 <I2SEx_TxISR_I2SExt+0x90>)
 80129d0:	428b      	cmp	r3, r1
 80129d2:	d101      	bne.n	80129d8 <I2SEx_TxISR_I2SExt+0x64>
 80129d4:	4b0c      	ldr	r3, [pc, #48]	; (8012a08 <I2SEx_TxISR_I2SExt+0x94>)
 80129d6:	e001      	b.n	80129dc <I2SEx_TxISR_I2SExt+0x68>
 80129d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80129dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80129e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129e6:	b29b      	uxth	r3, r3
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d106      	bne.n	80129fa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2201      	movs	r2, #1
 80129f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80129f4:	6878      	ldr	r0, [r7, #4]
 80129f6:	f7ff ff81 	bl	80128fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80129fa:	bf00      	nop
 80129fc:	3708      	adds	r7, #8
 80129fe:	46bd      	mov	sp, r7
 8012a00:	bd80      	pop	{r7, pc}
 8012a02:	bf00      	nop
 8012a04:	40003800 	.word	0x40003800
 8012a08:	40003400 	.word	0x40003400

08012a0c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b082      	sub	sp, #8
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	68d8      	ldr	r0, [r3, #12]
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a1e:	1c99      	adds	r1, r3, #2
 8012a20:	687a      	ldr	r2, [r7, #4]
 8012a22:	62d1      	str	r1, [r2, #44]	; 0x2c
 8012a24:	b282      	uxth	r2, r0
 8012a26:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a2c:	b29b      	uxth	r3, r3
 8012a2e:	3b01      	subs	r3, #1
 8012a30:	b29a      	uxth	r2, r3
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a3a:	b29b      	uxth	r3, r3
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d113      	bne.n	8012a68 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	685a      	ldr	r2, [r3, #4]
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8012a4e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012a54:	b29b      	uxth	r3, r3
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d106      	bne.n	8012a68 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2201      	movs	r2, #1
 8012a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8012a62:	6878      	ldr	r0, [r7, #4]
 8012a64:	f7ff ff4a 	bl	80128fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8012a68:	bf00      	nop
 8012a6a:	3708      	adds	r7, #8
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bd80      	pop	{r7, pc}

08012a70 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b082      	sub	sp, #8
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	4a20      	ldr	r2, [pc, #128]	; (8012b00 <I2SEx_RxISR_I2SExt+0x90>)
 8012a7e:	4293      	cmp	r3, r2
 8012a80:	d101      	bne.n	8012a86 <I2SEx_RxISR_I2SExt+0x16>
 8012a82:	4b20      	ldr	r3, [pc, #128]	; (8012b04 <I2SEx_RxISR_I2SExt+0x94>)
 8012a84:	e001      	b.n	8012a8a <I2SEx_RxISR_I2SExt+0x1a>
 8012a86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8012a8a:	68d8      	ldr	r0, [r3, #12]
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a90:	1c99      	adds	r1, r3, #2
 8012a92:	687a      	ldr	r2, [r7, #4]
 8012a94:	62d1      	str	r1, [r2, #44]	; 0x2c
 8012a96:	b282      	uxth	r2, r0
 8012a98:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a9e:	b29b      	uxth	r3, r3
 8012aa0:	3b01      	subs	r3, #1
 8012aa2:	b29a      	uxth	r2, r3
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012aac:	b29b      	uxth	r3, r3
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d121      	bne.n	8012af6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	4a12      	ldr	r2, [pc, #72]	; (8012b00 <I2SEx_RxISR_I2SExt+0x90>)
 8012ab8:	4293      	cmp	r3, r2
 8012aba:	d101      	bne.n	8012ac0 <I2SEx_RxISR_I2SExt+0x50>
 8012abc:	4b11      	ldr	r3, [pc, #68]	; (8012b04 <I2SEx_RxISR_I2SExt+0x94>)
 8012abe:	e001      	b.n	8012ac4 <I2SEx_RxISR_I2SExt+0x54>
 8012ac0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8012ac4:	685a      	ldr	r2, [r3, #4]
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	490d      	ldr	r1, [pc, #52]	; (8012b00 <I2SEx_RxISR_I2SExt+0x90>)
 8012acc:	428b      	cmp	r3, r1
 8012ace:	d101      	bne.n	8012ad4 <I2SEx_RxISR_I2SExt+0x64>
 8012ad0:	4b0c      	ldr	r3, [pc, #48]	; (8012b04 <I2SEx_RxISR_I2SExt+0x94>)
 8012ad2:	e001      	b.n	8012ad8 <I2SEx_RxISR_I2SExt+0x68>
 8012ad4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8012ad8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8012adc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012ae2:	b29b      	uxth	r3, r3
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d106      	bne.n	8012af6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	2201      	movs	r2, #1
 8012aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8012af0:	6878      	ldr	r0, [r7, #4]
 8012af2:	f7ff ff03 	bl	80128fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8012af6:	bf00      	nop
 8012af8:	3708      	adds	r7, #8
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}
 8012afe:	bf00      	nop
 8012b00:	40003800 	.word	0x40003800
 8012b04:	40003400 	.word	0x40003400

08012b08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b086      	sub	sp, #24
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d101      	bne.n	8012b1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012b16:	2301      	movs	r3, #1
 8012b18:	e264      	b.n	8012fe4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	f003 0301 	and.w	r3, r3, #1
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d075      	beq.n	8012c12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012b26:	4ba3      	ldr	r3, [pc, #652]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012b28:	689b      	ldr	r3, [r3, #8]
 8012b2a:	f003 030c 	and.w	r3, r3, #12
 8012b2e:	2b04      	cmp	r3, #4
 8012b30:	d00c      	beq.n	8012b4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012b32:	4ba0      	ldr	r3, [pc, #640]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012b34:	689b      	ldr	r3, [r3, #8]
 8012b36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012b3a:	2b08      	cmp	r3, #8
 8012b3c:	d112      	bne.n	8012b64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012b3e:	4b9d      	ldr	r3, [pc, #628]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012b40:	685b      	ldr	r3, [r3, #4]
 8012b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012b46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012b4a:	d10b      	bne.n	8012b64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012b4c:	4b99      	ldr	r3, [pc, #612]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d05b      	beq.n	8012c10 <HAL_RCC_OscConfig+0x108>
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	685b      	ldr	r3, [r3, #4]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d157      	bne.n	8012c10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8012b60:	2301      	movs	r3, #1
 8012b62:	e23f      	b.n	8012fe4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	685b      	ldr	r3, [r3, #4]
 8012b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012b6c:	d106      	bne.n	8012b7c <HAL_RCC_OscConfig+0x74>
 8012b6e:	4b91      	ldr	r3, [pc, #580]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	4a90      	ldr	r2, [pc, #576]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012b78:	6013      	str	r3, [r2, #0]
 8012b7a:	e01d      	b.n	8012bb8 <HAL_RCC_OscConfig+0xb0>
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	685b      	ldr	r3, [r3, #4]
 8012b80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012b84:	d10c      	bne.n	8012ba0 <HAL_RCC_OscConfig+0x98>
 8012b86:	4b8b      	ldr	r3, [pc, #556]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	4a8a      	ldr	r2, [pc, #552]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012b90:	6013      	str	r3, [r2, #0]
 8012b92:	4b88      	ldr	r3, [pc, #544]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	4a87      	ldr	r2, [pc, #540]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012b9c:	6013      	str	r3, [r2, #0]
 8012b9e:	e00b      	b.n	8012bb8 <HAL_RCC_OscConfig+0xb0>
 8012ba0:	4b84      	ldr	r3, [pc, #528]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	4a83      	ldr	r2, [pc, #524]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012baa:	6013      	str	r3, [r2, #0]
 8012bac:	4b81      	ldr	r3, [pc, #516]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	4a80      	ldr	r2, [pc, #512]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012bb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	685b      	ldr	r3, [r3, #4]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d013      	beq.n	8012be8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012bc0:	f7fe f840 	bl	8010c44 <HAL_GetTick>
 8012bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012bc6:	e008      	b.n	8012bda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012bc8:	f7fe f83c 	bl	8010c44 <HAL_GetTick>
 8012bcc:	4602      	mov	r2, r0
 8012bce:	693b      	ldr	r3, [r7, #16]
 8012bd0:	1ad3      	subs	r3, r2, r3
 8012bd2:	2b64      	cmp	r3, #100	; 0x64
 8012bd4:	d901      	bls.n	8012bda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8012bd6:	2303      	movs	r3, #3
 8012bd8:	e204      	b.n	8012fe4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012bda:	4b76      	ldr	r3, [pc, #472]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d0f0      	beq.n	8012bc8 <HAL_RCC_OscConfig+0xc0>
 8012be6:	e014      	b.n	8012c12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012be8:	f7fe f82c 	bl	8010c44 <HAL_GetTick>
 8012bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012bee:	e008      	b.n	8012c02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012bf0:	f7fe f828 	bl	8010c44 <HAL_GetTick>
 8012bf4:	4602      	mov	r2, r0
 8012bf6:	693b      	ldr	r3, [r7, #16]
 8012bf8:	1ad3      	subs	r3, r2, r3
 8012bfa:	2b64      	cmp	r3, #100	; 0x64
 8012bfc:	d901      	bls.n	8012c02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012bfe:	2303      	movs	r3, #3
 8012c00:	e1f0      	b.n	8012fe4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012c02:	4b6c      	ldr	r3, [pc, #432]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d1f0      	bne.n	8012bf0 <HAL_RCC_OscConfig+0xe8>
 8012c0e:	e000      	b.n	8012c12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	f003 0302 	and.w	r3, r3, #2
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d063      	beq.n	8012ce6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012c1e:	4b65      	ldr	r3, [pc, #404]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012c20:	689b      	ldr	r3, [r3, #8]
 8012c22:	f003 030c 	and.w	r3, r3, #12
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d00b      	beq.n	8012c42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012c2a:	4b62      	ldr	r3, [pc, #392]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012c2c:	689b      	ldr	r3, [r3, #8]
 8012c2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012c32:	2b08      	cmp	r3, #8
 8012c34:	d11c      	bne.n	8012c70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012c36:	4b5f      	ldr	r3, [pc, #380]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012c38:	685b      	ldr	r3, [r3, #4]
 8012c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d116      	bne.n	8012c70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012c42:	4b5c      	ldr	r3, [pc, #368]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	f003 0302 	and.w	r3, r3, #2
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d005      	beq.n	8012c5a <HAL_RCC_OscConfig+0x152>
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	68db      	ldr	r3, [r3, #12]
 8012c52:	2b01      	cmp	r3, #1
 8012c54:	d001      	beq.n	8012c5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8012c56:	2301      	movs	r3, #1
 8012c58:	e1c4      	b.n	8012fe4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012c5a:	4b56      	ldr	r3, [pc, #344]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	691b      	ldr	r3, [r3, #16]
 8012c66:	00db      	lsls	r3, r3, #3
 8012c68:	4952      	ldr	r1, [pc, #328]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012c6a:	4313      	orrs	r3, r2
 8012c6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012c6e:	e03a      	b.n	8012ce6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	68db      	ldr	r3, [r3, #12]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d020      	beq.n	8012cba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012c78:	4b4f      	ldr	r3, [pc, #316]	; (8012db8 <HAL_RCC_OscConfig+0x2b0>)
 8012c7a:	2201      	movs	r2, #1
 8012c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012c7e:	f7fd ffe1 	bl	8010c44 <HAL_GetTick>
 8012c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012c84:	e008      	b.n	8012c98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012c86:	f7fd ffdd 	bl	8010c44 <HAL_GetTick>
 8012c8a:	4602      	mov	r2, r0
 8012c8c:	693b      	ldr	r3, [r7, #16]
 8012c8e:	1ad3      	subs	r3, r2, r3
 8012c90:	2b02      	cmp	r3, #2
 8012c92:	d901      	bls.n	8012c98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012c94:	2303      	movs	r3, #3
 8012c96:	e1a5      	b.n	8012fe4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012c98:	4b46      	ldr	r3, [pc, #280]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	f003 0302 	and.w	r3, r3, #2
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d0f0      	beq.n	8012c86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012ca4:	4b43      	ldr	r3, [pc, #268]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	691b      	ldr	r3, [r3, #16]
 8012cb0:	00db      	lsls	r3, r3, #3
 8012cb2:	4940      	ldr	r1, [pc, #256]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012cb4:	4313      	orrs	r3, r2
 8012cb6:	600b      	str	r3, [r1, #0]
 8012cb8:	e015      	b.n	8012ce6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012cba:	4b3f      	ldr	r3, [pc, #252]	; (8012db8 <HAL_RCC_OscConfig+0x2b0>)
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012cc0:	f7fd ffc0 	bl	8010c44 <HAL_GetTick>
 8012cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012cc6:	e008      	b.n	8012cda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012cc8:	f7fd ffbc 	bl	8010c44 <HAL_GetTick>
 8012ccc:	4602      	mov	r2, r0
 8012cce:	693b      	ldr	r3, [r7, #16]
 8012cd0:	1ad3      	subs	r3, r2, r3
 8012cd2:	2b02      	cmp	r3, #2
 8012cd4:	d901      	bls.n	8012cda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8012cd6:	2303      	movs	r3, #3
 8012cd8:	e184      	b.n	8012fe4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012cda:	4b36      	ldr	r3, [pc, #216]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	f003 0302 	and.w	r3, r3, #2
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d1f0      	bne.n	8012cc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	f003 0308 	and.w	r3, r3, #8
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d030      	beq.n	8012d54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	695b      	ldr	r3, [r3, #20]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d016      	beq.n	8012d28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012cfa:	4b30      	ldr	r3, [pc, #192]	; (8012dbc <HAL_RCC_OscConfig+0x2b4>)
 8012cfc:	2201      	movs	r2, #1
 8012cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012d00:	f7fd ffa0 	bl	8010c44 <HAL_GetTick>
 8012d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012d06:	e008      	b.n	8012d1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012d08:	f7fd ff9c 	bl	8010c44 <HAL_GetTick>
 8012d0c:	4602      	mov	r2, r0
 8012d0e:	693b      	ldr	r3, [r7, #16]
 8012d10:	1ad3      	subs	r3, r2, r3
 8012d12:	2b02      	cmp	r3, #2
 8012d14:	d901      	bls.n	8012d1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8012d16:	2303      	movs	r3, #3
 8012d18:	e164      	b.n	8012fe4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012d1a:	4b26      	ldr	r3, [pc, #152]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012d1e:	f003 0302 	and.w	r3, r3, #2
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d0f0      	beq.n	8012d08 <HAL_RCC_OscConfig+0x200>
 8012d26:	e015      	b.n	8012d54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012d28:	4b24      	ldr	r3, [pc, #144]	; (8012dbc <HAL_RCC_OscConfig+0x2b4>)
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012d2e:	f7fd ff89 	bl	8010c44 <HAL_GetTick>
 8012d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012d34:	e008      	b.n	8012d48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012d36:	f7fd ff85 	bl	8010c44 <HAL_GetTick>
 8012d3a:	4602      	mov	r2, r0
 8012d3c:	693b      	ldr	r3, [r7, #16]
 8012d3e:	1ad3      	subs	r3, r2, r3
 8012d40:	2b02      	cmp	r3, #2
 8012d42:	d901      	bls.n	8012d48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8012d44:	2303      	movs	r3, #3
 8012d46:	e14d      	b.n	8012fe4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012d48:	4b1a      	ldr	r3, [pc, #104]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012d4c:	f003 0302 	and.w	r3, r3, #2
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d1f0      	bne.n	8012d36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	f003 0304 	and.w	r3, r3, #4
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	f000 80a0 	beq.w	8012ea2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012d62:	2300      	movs	r3, #0
 8012d64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012d66:	4b13      	ldr	r3, [pc, #76]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d10f      	bne.n	8012d92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012d72:	2300      	movs	r3, #0
 8012d74:	60bb      	str	r3, [r7, #8]
 8012d76:	4b0f      	ldr	r3, [pc, #60]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d7a:	4a0e      	ldr	r2, [pc, #56]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012d80:	6413      	str	r3, [r2, #64]	; 0x40
 8012d82:	4b0c      	ldr	r3, [pc, #48]	; (8012db4 <HAL_RCC_OscConfig+0x2ac>)
 8012d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012d8a:	60bb      	str	r3, [r7, #8]
 8012d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012d8e:	2301      	movs	r3, #1
 8012d90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012d92:	4b0b      	ldr	r3, [pc, #44]	; (8012dc0 <HAL_RCC_OscConfig+0x2b8>)
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d121      	bne.n	8012de2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012d9e:	4b08      	ldr	r3, [pc, #32]	; (8012dc0 <HAL_RCC_OscConfig+0x2b8>)
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	4a07      	ldr	r2, [pc, #28]	; (8012dc0 <HAL_RCC_OscConfig+0x2b8>)
 8012da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012daa:	f7fd ff4b 	bl	8010c44 <HAL_GetTick>
 8012dae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012db0:	e011      	b.n	8012dd6 <HAL_RCC_OscConfig+0x2ce>
 8012db2:	bf00      	nop
 8012db4:	40023800 	.word	0x40023800
 8012db8:	42470000 	.word	0x42470000
 8012dbc:	42470e80 	.word	0x42470e80
 8012dc0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012dc4:	f7fd ff3e 	bl	8010c44 <HAL_GetTick>
 8012dc8:	4602      	mov	r2, r0
 8012dca:	693b      	ldr	r3, [r7, #16]
 8012dcc:	1ad3      	subs	r3, r2, r3
 8012dce:	2b02      	cmp	r3, #2
 8012dd0:	d901      	bls.n	8012dd6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8012dd2:	2303      	movs	r3, #3
 8012dd4:	e106      	b.n	8012fe4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012dd6:	4b85      	ldr	r3, [pc, #532]	; (8012fec <HAL_RCC_OscConfig+0x4e4>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d0f0      	beq.n	8012dc4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	689b      	ldr	r3, [r3, #8]
 8012de6:	2b01      	cmp	r3, #1
 8012de8:	d106      	bne.n	8012df8 <HAL_RCC_OscConfig+0x2f0>
 8012dea:	4b81      	ldr	r3, [pc, #516]	; (8012ff0 <HAL_RCC_OscConfig+0x4e8>)
 8012dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012dee:	4a80      	ldr	r2, [pc, #512]	; (8012ff0 <HAL_RCC_OscConfig+0x4e8>)
 8012df0:	f043 0301 	orr.w	r3, r3, #1
 8012df4:	6713      	str	r3, [r2, #112]	; 0x70
 8012df6:	e01c      	b.n	8012e32 <HAL_RCC_OscConfig+0x32a>
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	689b      	ldr	r3, [r3, #8]
 8012dfc:	2b05      	cmp	r3, #5
 8012dfe:	d10c      	bne.n	8012e1a <HAL_RCC_OscConfig+0x312>
 8012e00:	4b7b      	ldr	r3, [pc, #492]	; (8012ff0 <HAL_RCC_OscConfig+0x4e8>)
 8012e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e04:	4a7a      	ldr	r2, [pc, #488]	; (8012ff0 <HAL_RCC_OscConfig+0x4e8>)
 8012e06:	f043 0304 	orr.w	r3, r3, #4
 8012e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8012e0c:	4b78      	ldr	r3, [pc, #480]	; (8012ff0 <HAL_RCC_OscConfig+0x4e8>)
 8012e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e10:	4a77      	ldr	r2, [pc, #476]	; (8012ff0 <HAL_RCC_OscConfig+0x4e8>)
 8012e12:	f043 0301 	orr.w	r3, r3, #1
 8012e16:	6713      	str	r3, [r2, #112]	; 0x70
 8012e18:	e00b      	b.n	8012e32 <HAL_RCC_OscConfig+0x32a>
 8012e1a:	4b75      	ldr	r3, [pc, #468]	; (8012ff0 <HAL_RCC_OscConfig+0x4e8>)
 8012e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e1e:	4a74      	ldr	r2, [pc, #464]	; (8012ff0 <HAL_RCC_OscConfig+0x4e8>)
 8012e20:	f023 0301 	bic.w	r3, r3, #1
 8012e24:	6713      	str	r3, [r2, #112]	; 0x70
 8012e26:	4b72      	ldr	r3, [pc, #456]	; (8012ff0 <HAL_RCC_OscConfig+0x4e8>)
 8012e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e2a:	4a71      	ldr	r2, [pc, #452]	; (8012ff0 <HAL_RCC_OscConfig+0x4e8>)
 8012e2c:	f023 0304 	bic.w	r3, r3, #4
 8012e30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	689b      	ldr	r3, [r3, #8]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d015      	beq.n	8012e66 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012e3a:	f7fd ff03 	bl	8010c44 <HAL_GetTick>
 8012e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012e40:	e00a      	b.n	8012e58 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012e42:	f7fd feff 	bl	8010c44 <HAL_GetTick>
 8012e46:	4602      	mov	r2, r0
 8012e48:	693b      	ldr	r3, [r7, #16]
 8012e4a:	1ad3      	subs	r3, r2, r3
 8012e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e50:	4293      	cmp	r3, r2
 8012e52:	d901      	bls.n	8012e58 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8012e54:	2303      	movs	r3, #3
 8012e56:	e0c5      	b.n	8012fe4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012e58:	4b65      	ldr	r3, [pc, #404]	; (8012ff0 <HAL_RCC_OscConfig+0x4e8>)
 8012e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e5c:	f003 0302 	and.w	r3, r3, #2
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d0ee      	beq.n	8012e42 <HAL_RCC_OscConfig+0x33a>
 8012e64:	e014      	b.n	8012e90 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012e66:	f7fd feed 	bl	8010c44 <HAL_GetTick>
 8012e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012e6c:	e00a      	b.n	8012e84 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012e6e:	f7fd fee9 	bl	8010c44 <HAL_GetTick>
 8012e72:	4602      	mov	r2, r0
 8012e74:	693b      	ldr	r3, [r7, #16]
 8012e76:	1ad3      	subs	r3, r2, r3
 8012e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e7c:	4293      	cmp	r3, r2
 8012e7e:	d901      	bls.n	8012e84 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8012e80:	2303      	movs	r3, #3
 8012e82:	e0af      	b.n	8012fe4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012e84:	4b5a      	ldr	r3, [pc, #360]	; (8012ff0 <HAL_RCC_OscConfig+0x4e8>)
 8012e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e88:	f003 0302 	and.w	r3, r3, #2
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d1ee      	bne.n	8012e6e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012e90:	7dfb      	ldrb	r3, [r7, #23]
 8012e92:	2b01      	cmp	r3, #1
 8012e94:	d105      	bne.n	8012ea2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012e96:	4b56      	ldr	r3, [pc, #344]	; (8012ff0 <HAL_RCC_OscConfig+0x4e8>)
 8012e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e9a:	4a55      	ldr	r2, [pc, #340]	; (8012ff0 <HAL_RCC_OscConfig+0x4e8>)
 8012e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012ea0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	699b      	ldr	r3, [r3, #24]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	f000 809b 	beq.w	8012fe2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8012eac:	4b50      	ldr	r3, [pc, #320]	; (8012ff0 <HAL_RCC_OscConfig+0x4e8>)
 8012eae:	689b      	ldr	r3, [r3, #8]
 8012eb0:	f003 030c 	and.w	r3, r3, #12
 8012eb4:	2b08      	cmp	r3, #8
 8012eb6:	d05c      	beq.n	8012f72 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	699b      	ldr	r3, [r3, #24]
 8012ebc:	2b02      	cmp	r3, #2
 8012ebe:	d141      	bne.n	8012f44 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012ec0:	4b4c      	ldr	r3, [pc, #304]	; (8012ff4 <HAL_RCC_OscConfig+0x4ec>)
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012ec6:	f7fd febd 	bl	8010c44 <HAL_GetTick>
 8012eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012ecc:	e008      	b.n	8012ee0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012ece:	f7fd feb9 	bl	8010c44 <HAL_GetTick>
 8012ed2:	4602      	mov	r2, r0
 8012ed4:	693b      	ldr	r3, [r7, #16]
 8012ed6:	1ad3      	subs	r3, r2, r3
 8012ed8:	2b02      	cmp	r3, #2
 8012eda:	d901      	bls.n	8012ee0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8012edc:	2303      	movs	r3, #3
 8012ede:	e081      	b.n	8012fe4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012ee0:	4b43      	ldr	r3, [pc, #268]	; (8012ff0 <HAL_RCC_OscConfig+0x4e8>)
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d1f0      	bne.n	8012ece <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	69da      	ldr	r2, [r3, #28]
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	6a1b      	ldr	r3, [r3, #32]
 8012ef4:	431a      	orrs	r2, r3
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012efa:	019b      	lsls	r3, r3, #6
 8012efc:	431a      	orrs	r2, r3
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f02:	085b      	lsrs	r3, r3, #1
 8012f04:	3b01      	subs	r3, #1
 8012f06:	041b      	lsls	r3, r3, #16
 8012f08:	431a      	orrs	r2, r3
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f0e:	061b      	lsls	r3, r3, #24
 8012f10:	4937      	ldr	r1, [pc, #220]	; (8012ff0 <HAL_RCC_OscConfig+0x4e8>)
 8012f12:	4313      	orrs	r3, r2
 8012f14:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012f16:	4b37      	ldr	r3, [pc, #220]	; (8012ff4 <HAL_RCC_OscConfig+0x4ec>)
 8012f18:	2201      	movs	r2, #1
 8012f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012f1c:	f7fd fe92 	bl	8010c44 <HAL_GetTick>
 8012f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012f22:	e008      	b.n	8012f36 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012f24:	f7fd fe8e 	bl	8010c44 <HAL_GetTick>
 8012f28:	4602      	mov	r2, r0
 8012f2a:	693b      	ldr	r3, [r7, #16]
 8012f2c:	1ad3      	subs	r3, r2, r3
 8012f2e:	2b02      	cmp	r3, #2
 8012f30:	d901      	bls.n	8012f36 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8012f32:	2303      	movs	r3, #3
 8012f34:	e056      	b.n	8012fe4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012f36:	4b2e      	ldr	r3, [pc, #184]	; (8012ff0 <HAL_RCC_OscConfig+0x4e8>)
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d0f0      	beq.n	8012f24 <HAL_RCC_OscConfig+0x41c>
 8012f42:	e04e      	b.n	8012fe2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012f44:	4b2b      	ldr	r3, [pc, #172]	; (8012ff4 <HAL_RCC_OscConfig+0x4ec>)
 8012f46:	2200      	movs	r2, #0
 8012f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012f4a:	f7fd fe7b 	bl	8010c44 <HAL_GetTick>
 8012f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012f50:	e008      	b.n	8012f64 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012f52:	f7fd fe77 	bl	8010c44 <HAL_GetTick>
 8012f56:	4602      	mov	r2, r0
 8012f58:	693b      	ldr	r3, [r7, #16]
 8012f5a:	1ad3      	subs	r3, r2, r3
 8012f5c:	2b02      	cmp	r3, #2
 8012f5e:	d901      	bls.n	8012f64 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8012f60:	2303      	movs	r3, #3
 8012f62:	e03f      	b.n	8012fe4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012f64:	4b22      	ldr	r3, [pc, #136]	; (8012ff0 <HAL_RCC_OscConfig+0x4e8>)
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d1f0      	bne.n	8012f52 <HAL_RCC_OscConfig+0x44a>
 8012f70:	e037      	b.n	8012fe2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	699b      	ldr	r3, [r3, #24]
 8012f76:	2b01      	cmp	r3, #1
 8012f78:	d101      	bne.n	8012f7e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8012f7a:	2301      	movs	r3, #1
 8012f7c:	e032      	b.n	8012fe4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8012f7e:	4b1c      	ldr	r3, [pc, #112]	; (8012ff0 <HAL_RCC_OscConfig+0x4e8>)
 8012f80:	685b      	ldr	r3, [r3, #4]
 8012f82:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	699b      	ldr	r3, [r3, #24]
 8012f88:	2b01      	cmp	r3, #1
 8012f8a:	d028      	beq.n	8012fde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012f96:	429a      	cmp	r2, r3
 8012f98:	d121      	bne.n	8012fde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012fa4:	429a      	cmp	r2, r3
 8012fa6:	d11a      	bne.n	8012fde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8012fa8:	68fa      	ldr	r2, [r7, #12]
 8012faa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8012fae:	4013      	ands	r3, r2
 8012fb0:	687a      	ldr	r2, [r7, #4]
 8012fb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012fb4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012fb6:	4293      	cmp	r3, r2
 8012fb8:	d111      	bne.n	8012fde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fc4:	085b      	lsrs	r3, r3, #1
 8012fc6:	3b01      	subs	r3, #1
 8012fc8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8012fca:	429a      	cmp	r2, r3
 8012fcc:	d107      	bne.n	8012fde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fd8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8012fda:	429a      	cmp	r2, r3
 8012fdc:	d001      	beq.n	8012fe2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8012fde:	2301      	movs	r3, #1
 8012fe0:	e000      	b.n	8012fe4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8012fe2:	2300      	movs	r3, #0
}
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	3718      	adds	r7, #24
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bd80      	pop	{r7, pc}
 8012fec:	40007000 	.word	0x40007000
 8012ff0:	40023800 	.word	0x40023800
 8012ff4:	42470060 	.word	0x42470060

08012ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b084      	sub	sp, #16
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
 8013000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d101      	bne.n	801300c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013008:	2301      	movs	r3, #1
 801300a:	e0cc      	b.n	80131a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801300c:	4b68      	ldr	r3, [pc, #416]	; (80131b0 <HAL_RCC_ClockConfig+0x1b8>)
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	f003 0307 	and.w	r3, r3, #7
 8013014:	683a      	ldr	r2, [r7, #0]
 8013016:	429a      	cmp	r2, r3
 8013018:	d90c      	bls.n	8013034 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801301a:	4b65      	ldr	r3, [pc, #404]	; (80131b0 <HAL_RCC_ClockConfig+0x1b8>)
 801301c:	683a      	ldr	r2, [r7, #0]
 801301e:	b2d2      	uxtb	r2, r2
 8013020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013022:	4b63      	ldr	r3, [pc, #396]	; (80131b0 <HAL_RCC_ClockConfig+0x1b8>)
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	f003 0307 	and.w	r3, r3, #7
 801302a:	683a      	ldr	r2, [r7, #0]
 801302c:	429a      	cmp	r2, r3
 801302e:	d001      	beq.n	8013034 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8013030:	2301      	movs	r3, #1
 8013032:	e0b8      	b.n	80131a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	f003 0302 	and.w	r3, r3, #2
 801303c:	2b00      	cmp	r3, #0
 801303e:	d020      	beq.n	8013082 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	f003 0304 	and.w	r3, r3, #4
 8013048:	2b00      	cmp	r3, #0
 801304a:	d005      	beq.n	8013058 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801304c:	4b59      	ldr	r3, [pc, #356]	; (80131b4 <HAL_RCC_ClockConfig+0x1bc>)
 801304e:	689b      	ldr	r3, [r3, #8]
 8013050:	4a58      	ldr	r2, [pc, #352]	; (80131b4 <HAL_RCC_ClockConfig+0x1bc>)
 8013052:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8013056:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	f003 0308 	and.w	r3, r3, #8
 8013060:	2b00      	cmp	r3, #0
 8013062:	d005      	beq.n	8013070 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8013064:	4b53      	ldr	r3, [pc, #332]	; (80131b4 <HAL_RCC_ClockConfig+0x1bc>)
 8013066:	689b      	ldr	r3, [r3, #8]
 8013068:	4a52      	ldr	r2, [pc, #328]	; (80131b4 <HAL_RCC_ClockConfig+0x1bc>)
 801306a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801306e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013070:	4b50      	ldr	r3, [pc, #320]	; (80131b4 <HAL_RCC_ClockConfig+0x1bc>)
 8013072:	689b      	ldr	r3, [r3, #8]
 8013074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	689b      	ldr	r3, [r3, #8]
 801307c:	494d      	ldr	r1, [pc, #308]	; (80131b4 <HAL_RCC_ClockConfig+0x1bc>)
 801307e:	4313      	orrs	r3, r2
 8013080:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	f003 0301 	and.w	r3, r3, #1
 801308a:	2b00      	cmp	r3, #0
 801308c:	d044      	beq.n	8013118 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	685b      	ldr	r3, [r3, #4]
 8013092:	2b01      	cmp	r3, #1
 8013094:	d107      	bne.n	80130a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013096:	4b47      	ldr	r3, [pc, #284]	; (80131b4 <HAL_RCC_ClockConfig+0x1bc>)
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d119      	bne.n	80130d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80130a2:	2301      	movs	r3, #1
 80130a4:	e07f      	b.n	80131a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	685b      	ldr	r3, [r3, #4]
 80130aa:	2b02      	cmp	r3, #2
 80130ac:	d003      	beq.n	80130b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80130b2:	2b03      	cmp	r3, #3
 80130b4:	d107      	bne.n	80130c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80130b6:	4b3f      	ldr	r3, [pc, #252]	; (80131b4 <HAL_RCC_ClockConfig+0x1bc>)
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d109      	bne.n	80130d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80130c2:	2301      	movs	r3, #1
 80130c4:	e06f      	b.n	80131a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80130c6:	4b3b      	ldr	r3, [pc, #236]	; (80131b4 <HAL_RCC_ClockConfig+0x1bc>)
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	f003 0302 	and.w	r3, r3, #2
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d101      	bne.n	80130d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80130d2:	2301      	movs	r3, #1
 80130d4:	e067      	b.n	80131a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80130d6:	4b37      	ldr	r3, [pc, #220]	; (80131b4 <HAL_RCC_ClockConfig+0x1bc>)
 80130d8:	689b      	ldr	r3, [r3, #8]
 80130da:	f023 0203 	bic.w	r2, r3, #3
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	685b      	ldr	r3, [r3, #4]
 80130e2:	4934      	ldr	r1, [pc, #208]	; (80131b4 <HAL_RCC_ClockConfig+0x1bc>)
 80130e4:	4313      	orrs	r3, r2
 80130e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80130e8:	f7fd fdac 	bl	8010c44 <HAL_GetTick>
 80130ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80130ee:	e00a      	b.n	8013106 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80130f0:	f7fd fda8 	bl	8010c44 <HAL_GetTick>
 80130f4:	4602      	mov	r2, r0
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	1ad3      	subs	r3, r2, r3
 80130fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80130fe:	4293      	cmp	r3, r2
 8013100:	d901      	bls.n	8013106 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8013102:	2303      	movs	r3, #3
 8013104:	e04f      	b.n	80131a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013106:	4b2b      	ldr	r3, [pc, #172]	; (80131b4 <HAL_RCC_ClockConfig+0x1bc>)
 8013108:	689b      	ldr	r3, [r3, #8]
 801310a:	f003 020c 	and.w	r2, r3, #12
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	685b      	ldr	r3, [r3, #4]
 8013112:	009b      	lsls	r3, r3, #2
 8013114:	429a      	cmp	r2, r3
 8013116:	d1eb      	bne.n	80130f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8013118:	4b25      	ldr	r3, [pc, #148]	; (80131b0 <HAL_RCC_ClockConfig+0x1b8>)
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	f003 0307 	and.w	r3, r3, #7
 8013120:	683a      	ldr	r2, [r7, #0]
 8013122:	429a      	cmp	r2, r3
 8013124:	d20c      	bcs.n	8013140 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013126:	4b22      	ldr	r3, [pc, #136]	; (80131b0 <HAL_RCC_ClockConfig+0x1b8>)
 8013128:	683a      	ldr	r2, [r7, #0]
 801312a:	b2d2      	uxtb	r2, r2
 801312c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801312e:	4b20      	ldr	r3, [pc, #128]	; (80131b0 <HAL_RCC_ClockConfig+0x1b8>)
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	f003 0307 	and.w	r3, r3, #7
 8013136:	683a      	ldr	r2, [r7, #0]
 8013138:	429a      	cmp	r2, r3
 801313a:	d001      	beq.n	8013140 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801313c:	2301      	movs	r3, #1
 801313e:	e032      	b.n	80131a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	f003 0304 	and.w	r3, r3, #4
 8013148:	2b00      	cmp	r3, #0
 801314a:	d008      	beq.n	801315e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801314c:	4b19      	ldr	r3, [pc, #100]	; (80131b4 <HAL_RCC_ClockConfig+0x1bc>)
 801314e:	689b      	ldr	r3, [r3, #8]
 8013150:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	68db      	ldr	r3, [r3, #12]
 8013158:	4916      	ldr	r1, [pc, #88]	; (80131b4 <HAL_RCC_ClockConfig+0x1bc>)
 801315a:	4313      	orrs	r3, r2
 801315c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	f003 0308 	and.w	r3, r3, #8
 8013166:	2b00      	cmp	r3, #0
 8013168:	d009      	beq.n	801317e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801316a:	4b12      	ldr	r3, [pc, #72]	; (80131b4 <HAL_RCC_ClockConfig+0x1bc>)
 801316c:	689b      	ldr	r3, [r3, #8]
 801316e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	691b      	ldr	r3, [r3, #16]
 8013176:	00db      	lsls	r3, r3, #3
 8013178:	490e      	ldr	r1, [pc, #56]	; (80131b4 <HAL_RCC_ClockConfig+0x1bc>)
 801317a:	4313      	orrs	r3, r2
 801317c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801317e:	f000 f821 	bl	80131c4 <HAL_RCC_GetSysClockFreq>
 8013182:	4602      	mov	r2, r0
 8013184:	4b0b      	ldr	r3, [pc, #44]	; (80131b4 <HAL_RCC_ClockConfig+0x1bc>)
 8013186:	689b      	ldr	r3, [r3, #8]
 8013188:	091b      	lsrs	r3, r3, #4
 801318a:	f003 030f 	and.w	r3, r3, #15
 801318e:	490a      	ldr	r1, [pc, #40]	; (80131b8 <HAL_RCC_ClockConfig+0x1c0>)
 8013190:	5ccb      	ldrb	r3, [r1, r3]
 8013192:	fa22 f303 	lsr.w	r3, r2, r3
 8013196:	4a09      	ldr	r2, [pc, #36]	; (80131bc <HAL_RCC_ClockConfig+0x1c4>)
 8013198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801319a:	4b09      	ldr	r3, [pc, #36]	; (80131c0 <HAL_RCC_ClockConfig+0x1c8>)
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	4618      	mov	r0, r3
 80131a0:	f7fd fb9c 	bl	80108dc <HAL_InitTick>

  return HAL_OK;
 80131a4:	2300      	movs	r3, #0
}
 80131a6:	4618      	mov	r0, r3
 80131a8:	3710      	adds	r7, #16
 80131aa:	46bd      	mov	sp, r7
 80131ac:	bd80      	pop	{r7, pc}
 80131ae:	bf00      	nop
 80131b0:	40023c00 	.word	0x40023c00
 80131b4:	40023800 	.word	0x40023800
 80131b8:	0801b1a0 	.word	0x0801b1a0
 80131bc:	20000030 	.word	0x20000030
 80131c0:	20000034 	.word	0x20000034

080131c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80131c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80131c8:	b084      	sub	sp, #16
 80131ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80131cc:	2300      	movs	r3, #0
 80131ce:	607b      	str	r3, [r7, #4]
 80131d0:	2300      	movs	r3, #0
 80131d2:	60fb      	str	r3, [r7, #12]
 80131d4:	2300      	movs	r3, #0
 80131d6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80131d8:	2300      	movs	r3, #0
 80131da:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80131dc:	4b67      	ldr	r3, [pc, #412]	; (801337c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80131de:	689b      	ldr	r3, [r3, #8]
 80131e0:	f003 030c 	and.w	r3, r3, #12
 80131e4:	2b08      	cmp	r3, #8
 80131e6:	d00d      	beq.n	8013204 <HAL_RCC_GetSysClockFreq+0x40>
 80131e8:	2b08      	cmp	r3, #8
 80131ea:	f200 80bd 	bhi.w	8013368 <HAL_RCC_GetSysClockFreq+0x1a4>
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d002      	beq.n	80131f8 <HAL_RCC_GetSysClockFreq+0x34>
 80131f2:	2b04      	cmp	r3, #4
 80131f4:	d003      	beq.n	80131fe <HAL_RCC_GetSysClockFreq+0x3a>
 80131f6:	e0b7      	b.n	8013368 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80131f8:	4b61      	ldr	r3, [pc, #388]	; (8013380 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80131fa:	60bb      	str	r3, [r7, #8]
       break;
 80131fc:	e0b7      	b.n	801336e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80131fe:	4b61      	ldr	r3, [pc, #388]	; (8013384 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8013200:	60bb      	str	r3, [r7, #8]
      break;
 8013202:	e0b4      	b.n	801336e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013204:	4b5d      	ldr	r3, [pc, #372]	; (801337c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013206:	685b      	ldr	r3, [r3, #4]
 8013208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801320c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801320e:	4b5b      	ldr	r3, [pc, #364]	; (801337c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013210:	685b      	ldr	r3, [r3, #4]
 8013212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013216:	2b00      	cmp	r3, #0
 8013218:	d04d      	beq.n	80132b6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801321a:	4b58      	ldr	r3, [pc, #352]	; (801337c <HAL_RCC_GetSysClockFreq+0x1b8>)
 801321c:	685b      	ldr	r3, [r3, #4]
 801321e:	099b      	lsrs	r3, r3, #6
 8013220:	461a      	mov	r2, r3
 8013222:	f04f 0300 	mov.w	r3, #0
 8013226:	f240 10ff 	movw	r0, #511	; 0x1ff
 801322a:	f04f 0100 	mov.w	r1, #0
 801322e:	ea02 0800 	and.w	r8, r2, r0
 8013232:	ea03 0901 	and.w	r9, r3, r1
 8013236:	4640      	mov	r0, r8
 8013238:	4649      	mov	r1, r9
 801323a:	f04f 0200 	mov.w	r2, #0
 801323e:	f04f 0300 	mov.w	r3, #0
 8013242:	014b      	lsls	r3, r1, #5
 8013244:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8013248:	0142      	lsls	r2, r0, #5
 801324a:	4610      	mov	r0, r2
 801324c:	4619      	mov	r1, r3
 801324e:	ebb0 0008 	subs.w	r0, r0, r8
 8013252:	eb61 0109 	sbc.w	r1, r1, r9
 8013256:	f04f 0200 	mov.w	r2, #0
 801325a:	f04f 0300 	mov.w	r3, #0
 801325e:	018b      	lsls	r3, r1, #6
 8013260:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8013264:	0182      	lsls	r2, r0, #6
 8013266:	1a12      	subs	r2, r2, r0
 8013268:	eb63 0301 	sbc.w	r3, r3, r1
 801326c:	f04f 0000 	mov.w	r0, #0
 8013270:	f04f 0100 	mov.w	r1, #0
 8013274:	00d9      	lsls	r1, r3, #3
 8013276:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801327a:	00d0      	lsls	r0, r2, #3
 801327c:	4602      	mov	r2, r0
 801327e:	460b      	mov	r3, r1
 8013280:	eb12 0208 	adds.w	r2, r2, r8
 8013284:	eb43 0309 	adc.w	r3, r3, r9
 8013288:	f04f 0000 	mov.w	r0, #0
 801328c:	f04f 0100 	mov.w	r1, #0
 8013290:	0259      	lsls	r1, r3, #9
 8013292:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8013296:	0250      	lsls	r0, r2, #9
 8013298:	4602      	mov	r2, r0
 801329a:	460b      	mov	r3, r1
 801329c:	4610      	mov	r0, r2
 801329e:	4619      	mov	r1, r3
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	461a      	mov	r2, r3
 80132a4:	f04f 0300 	mov.w	r3, #0
 80132a8:	f7fc ff1a 	bl	80100e0 <__aeabi_uldivmod>
 80132ac:	4602      	mov	r2, r0
 80132ae:	460b      	mov	r3, r1
 80132b0:	4613      	mov	r3, r2
 80132b2:	60fb      	str	r3, [r7, #12]
 80132b4:	e04a      	b.n	801334c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80132b6:	4b31      	ldr	r3, [pc, #196]	; (801337c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80132b8:	685b      	ldr	r3, [r3, #4]
 80132ba:	099b      	lsrs	r3, r3, #6
 80132bc:	461a      	mov	r2, r3
 80132be:	f04f 0300 	mov.w	r3, #0
 80132c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80132c6:	f04f 0100 	mov.w	r1, #0
 80132ca:	ea02 0400 	and.w	r4, r2, r0
 80132ce:	ea03 0501 	and.w	r5, r3, r1
 80132d2:	4620      	mov	r0, r4
 80132d4:	4629      	mov	r1, r5
 80132d6:	f04f 0200 	mov.w	r2, #0
 80132da:	f04f 0300 	mov.w	r3, #0
 80132de:	014b      	lsls	r3, r1, #5
 80132e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80132e4:	0142      	lsls	r2, r0, #5
 80132e6:	4610      	mov	r0, r2
 80132e8:	4619      	mov	r1, r3
 80132ea:	1b00      	subs	r0, r0, r4
 80132ec:	eb61 0105 	sbc.w	r1, r1, r5
 80132f0:	f04f 0200 	mov.w	r2, #0
 80132f4:	f04f 0300 	mov.w	r3, #0
 80132f8:	018b      	lsls	r3, r1, #6
 80132fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80132fe:	0182      	lsls	r2, r0, #6
 8013300:	1a12      	subs	r2, r2, r0
 8013302:	eb63 0301 	sbc.w	r3, r3, r1
 8013306:	f04f 0000 	mov.w	r0, #0
 801330a:	f04f 0100 	mov.w	r1, #0
 801330e:	00d9      	lsls	r1, r3, #3
 8013310:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013314:	00d0      	lsls	r0, r2, #3
 8013316:	4602      	mov	r2, r0
 8013318:	460b      	mov	r3, r1
 801331a:	1912      	adds	r2, r2, r4
 801331c:	eb45 0303 	adc.w	r3, r5, r3
 8013320:	f04f 0000 	mov.w	r0, #0
 8013324:	f04f 0100 	mov.w	r1, #0
 8013328:	0299      	lsls	r1, r3, #10
 801332a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801332e:	0290      	lsls	r0, r2, #10
 8013330:	4602      	mov	r2, r0
 8013332:	460b      	mov	r3, r1
 8013334:	4610      	mov	r0, r2
 8013336:	4619      	mov	r1, r3
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	461a      	mov	r2, r3
 801333c:	f04f 0300 	mov.w	r3, #0
 8013340:	f7fc fece 	bl	80100e0 <__aeabi_uldivmod>
 8013344:	4602      	mov	r2, r0
 8013346:	460b      	mov	r3, r1
 8013348:	4613      	mov	r3, r2
 801334a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801334c:	4b0b      	ldr	r3, [pc, #44]	; (801337c <HAL_RCC_GetSysClockFreq+0x1b8>)
 801334e:	685b      	ldr	r3, [r3, #4]
 8013350:	0c1b      	lsrs	r3, r3, #16
 8013352:	f003 0303 	and.w	r3, r3, #3
 8013356:	3301      	adds	r3, #1
 8013358:	005b      	lsls	r3, r3, #1
 801335a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 801335c:	68fa      	ldr	r2, [r7, #12]
 801335e:	683b      	ldr	r3, [r7, #0]
 8013360:	fbb2 f3f3 	udiv	r3, r2, r3
 8013364:	60bb      	str	r3, [r7, #8]
      break;
 8013366:	e002      	b.n	801336e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8013368:	4b05      	ldr	r3, [pc, #20]	; (8013380 <HAL_RCC_GetSysClockFreq+0x1bc>)
 801336a:	60bb      	str	r3, [r7, #8]
      break;
 801336c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801336e:	68bb      	ldr	r3, [r7, #8]
}
 8013370:	4618      	mov	r0, r3
 8013372:	3710      	adds	r7, #16
 8013374:	46bd      	mov	sp, r7
 8013376:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801337a:	bf00      	nop
 801337c:	40023800 	.word	0x40023800
 8013380:	00f42400 	.word	0x00f42400
 8013384:	007a1200 	.word	0x007a1200

08013388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013388:	b480      	push	{r7}
 801338a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801338c:	4b03      	ldr	r3, [pc, #12]	; (801339c <HAL_RCC_GetHCLKFreq+0x14>)
 801338e:	681b      	ldr	r3, [r3, #0]
}
 8013390:	4618      	mov	r0, r3
 8013392:	46bd      	mov	sp, r7
 8013394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013398:	4770      	bx	lr
 801339a:	bf00      	nop
 801339c:	20000030 	.word	0x20000030

080133a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80133a4:	f7ff fff0 	bl	8013388 <HAL_RCC_GetHCLKFreq>
 80133a8:	4602      	mov	r2, r0
 80133aa:	4b05      	ldr	r3, [pc, #20]	; (80133c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80133ac:	689b      	ldr	r3, [r3, #8]
 80133ae:	0b5b      	lsrs	r3, r3, #13
 80133b0:	f003 0307 	and.w	r3, r3, #7
 80133b4:	4903      	ldr	r1, [pc, #12]	; (80133c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80133b6:	5ccb      	ldrb	r3, [r1, r3]
 80133b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80133bc:	4618      	mov	r0, r3
 80133be:	bd80      	pop	{r7, pc}
 80133c0:	40023800 	.word	0x40023800
 80133c4:	0801b1b0 	.word	0x0801b1b0

080133c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80133c8:	b480      	push	{r7}
 80133ca:	b083      	sub	sp, #12
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
 80133d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	220f      	movs	r2, #15
 80133d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80133d8:	4b12      	ldr	r3, [pc, #72]	; (8013424 <HAL_RCC_GetClockConfig+0x5c>)
 80133da:	689b      	ldr	r3, [r3, #8]
 80133dc:	f003 0203 	and.w	r2, r3, #3
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80133e4:	4b0f      	ldr	r3, [pc, #60]	; (8013424 <HAL_RCC_GetClockConfig+0x5c>)
 80133e6:	689b      	ldr	r3, [r3, #8]
 80133e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80133f0:	4b0c      	ldr	r3, [pc, #48]	; (8013424 <HAL_RCC_GetClockConfig+0x5c>)
 80133f2:	689b      	ldr	r3, [r3, #8]
 80133f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80133fc:	4b09      	ldr	r3, [pc, #36]	; (8013424 <HAL_RCC_GetClockConfig+0x5c>)
 80133fe:	689b      	ldr	r3, [r3, #8]
 8013400:	08db      	lsrs	r3, r3, #3
 8013402:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801340a:	4b07      	ldr	r3, [pc, #28]	; (8013428 <HAL_RCC_GetClockConfig+0x60>)
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	f003 0207 	and.w	r2, r3, #7
 8013412:	683b      	ldr	r3, [r7, #0]
 8013414:	601a      	str	r2, [r3, #0]
}
 8013416:	bf00      	nop
 8013418:	370c      	adds	r7, #12
 801341a:	46bd      	mov	sp, r7
 801341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013420:	4770      	bx	lr
 8013422:	bf00      	nop
 8013424:	40023800 	.word	0x40023800
 8013428:	40023c00 	.word	0x40023c00

0801342c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801342c:	b580      	push	{r7, lr}
 801342e:	b086      	sub	sp, #24
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8013434:	2300      	movs	r3, #0
 8013436:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8013438:	2300      	movs	r3, #0
 801343a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	f003 0301 	and.w	r3, r3, #1
 8013444:	2b00      	cmp	r3, #0
 8013446:	d105      	bne.n	8013454 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8013450:	2b00      	cmp	r3, #0
 8013452:	d038      	beq.n	80134c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8013454:	4b68      	ldr	r3, [pc, #416]	; (80135f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8013456:	2200      	movs	r2, #0
 8013458:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801345a:	f7fd fbf3 	bl	8010c44 <HAL_GetTick>
 801345e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8013460:	e008      	b.n	8013474 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8013462:	f7fd fbef 	bl	8010c44 <HAL_GetTick>
 8013466:	4602      	mov	r2, r0
 8013468:	697b      	ldr	r3, [r7, #20]
 801346a:	1ad3      	subs	r3, r2, r3
 801346c:	2b02      	cmp	r3, #2
 801346e:	d901      	bls.n	8013474 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8013470:	2303      	movs	r3, #3
 8013472:	e0bd      	b.n	80135f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8013474:	4b61      	ldr	r3, [pc, #388]	; (80135fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801347c:	2b00      	cmp	r3, #0
 801347e:	d1f0      	bne.n	8013462 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	685a      	ldr	r2, [r3, #4]
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	689b      	ldr	r3, [r3, #8]
 8013488:	019b      	lsls	r3, r3, #6
 801348a:	431a      	orrs	r2, r3
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	68db      	ldr	r3, [r3, #12]
 8013490:	071b      	lsls	r3, r3, #28
 8013492:	495a      	ldr	r1, [pc, #360]	; (80135fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013494:	4313      	orrs	r3, r2
 8013496:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801349a:	4b57      	ldr	r3, [pc, #348]	; (80135f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 801349c:	2201      	movs	r2, #1
 801349e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80134a0:	f7fd fbd0 	bl	8010c44 <HAL_GetTick>
 80134a4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80134a6:	e008      	b.n	80134ba <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80134a8:	f7fd fbcc 	bl	8010c44 <HAL_GetTick>
 80134ac:	4602      	mov	r2, r0
 80134ae:	697b      	ldr	r3, [r7, #20]
 80134b0:	1ad3      	subs	r3, r2, r3
 80134b2:	2b02      	cmp	r3, #2
 80134b4:	d901      	bls.n	80134ba <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80134b6:	2303      	movs	r3, #3
 80134b8:	e09a      	b.n	80135f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80134ba:	4b50      	ldr	r3, [pc, #320]	; (80135fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d0f0      	beq.n	80134a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	f003 0302 	and.w	r3, r3, #2
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	f000 8083 	beq.w	80135da <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80134d4:	2300      	movs	r3, #0
 80134d6:	60fb      	str	r3, [r7, #12]
 80134d8:	4b48      	ldr	r3, [pc, #288]	; (80135fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80134da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134dc:	4a47      	ldr	r2, [pc, #284]	; (80135fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80134de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80134e2:	6413      	str	r3, [r2, #64]	; 0x40
 80134e4:	4b45      	ldr	r3, [pc, #276]	; (80135fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80134e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80134ec:	60fb      	str	r3, [r7, #12]
 80134ee:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80134f0:	4b43      	ldr	r3, [pc, #268]	; (8013600 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	4a42      	ldr	r2, [pc, #264]	; (8013600 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80134f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80134fa:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80134fc:	f7fd fba2 	bl	8010c44 <HAL_GetTick>
 8013500:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8013502:	e008      	b.n	8013516 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8013504:	f7fd fb9e 	bl	8010c44 <HAL_GetTick>
 8013508:	4602      	mov	r2, r0
 801350a:	697b      	ldr	r3, [r7, #20]
 801350c:	1ad3      	subs	r3, r2, r3
 801350e:	2b02      	cmp	r3, #2
 8013510:	d901      	bls.n	8013516 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8013512:	2303      	movs	r3, #3
 8013514:	e06c      	b.n	80135f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8013516:	4b3a      	ldr	r3, [pc, #232]	; (8013600 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801351e:	2b00      	cmp	r3, #0
 8013520:	d0f0      	beq.n	8013504 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8013522:	4b36      	ldr	r3, [pc, #216]	; (80135fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801352a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801352c:	693b      	ldr	r3, [r7, #16]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d02f      	beq.n	8013592 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	691b      	ldr	r3, [r3, #16]
 8013536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801353a:	693a      	ldr	r2, [r7, #16]
 801353c:	429a      	cmp	r2, r3
 801353e:	d028      	beq.n	8013592 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013540:	4b2e      	ldr	r3, [pc, #184]	; (80135fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013548:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801354a:	4b2e      	ldr	r3, [pc, #184]	; (8013604 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 801354c:	2201      	movs	r2, #1
 801354e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8013550:	4b2c      	ldr	r3, [pc, #176]	; (8013604 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8013552:	2200      	movs	r2, #0
 8013554:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8013556:	4a29      	ldr	r2, [pc, #164]	; (80135fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013558:	693b      	ldr	r3, [r7, #16]
 801355a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801355c:	4b27      	ldr	r3, [pc, #156]	; (80135fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801355e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013560:	f003 0301 	and.w	r3, r3, #1
 8013564:	2b01      	cmp	r3, #1
 8013566:	d114      	bne.n	8013592 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8013568:	f7fd fb6c 	bl	8010c44 <HAL_GetTick>
 801356c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801356e:	e00a      	b.n	8013586 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013570:	f7fd fb68 	bl	8010c44 <HAL_GetTick>
 8013574:	4602      	mov	r2, r0
 8013576:	697b      	ldr	r3, [r7, #20]
 8013578:	1ad3      	subs	r3, r2, r3
 801357a:	f241 3288 	movw	r2, #5000	; 0x1388
 801357e:	4293      	cmp	r3, r2
 8013580:	d901      	bls.n	8013586 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8013582:	2303      	movs	r3, #3
 8013584:	e034      	b.n	80135f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013586:	4b1d      	ldr	r3, [pc, #116]	; (80135fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801358a:	f003 0302 	and.w	r3, r3, #2
 801358e:	2b00      	cmp	r3, #0
 8013590:	d0ee      	beq.n	8013570 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	691b      	ldr	r3, [r3, #16]
 8013596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801359a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801359e:	d10d      	bne.n	80135bc <HAL_RCCEx_PeriphCLKConfig+0x190>
 80135a0:	4b16      	ldr	r3, [pc, #88]	; (80135fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80135a2:	689b      	ldr	r3, [r3, #8]
 80135a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	691b      	ldr	r3, [r3, #16]
 80135ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80135b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80135b4:	4911      	ldr	r1, [pc, #68]	; (80135fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80135b6:	4313      	orrs	r3, r2
 80135b8:	608b      	str	r3, [r1, #8]
 80135ba:	e005      	b.n	80135c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80135bc:	4b0f      	ldr	r3, [pc, #60]	; (80135fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80135be:	689b      	ldr	r3, [r3, #8]
 80135c0:	4a0e      	ldr	r2, [pc, #56]	; (80135fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80135c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80135c6:	6093      	str	r3, [r2, #8]
 80135c8:	4b0c      	ldr	r3, [pc, #48]	; (80135fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80135ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	691b      	ldr	r3, [r3, #16]
 80135d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80135d4:	4909      	ldr	r1, [pc, #36]	; (80135fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80135d6:	4313      	orrs	r3, r2
 80135d8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	f003 0308 	and.w	r3, r3, #8
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d003      	beq.n	80135ee <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	7d1a      	ldrb	r2, [r3, #20]
 80135ea:	4b07      	ldr	r3, [pc, #28]	; (8013608 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80135ec:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80135ee:	2300      	movs	r3, #0
}
 80135f0:	4618      	mov	r0, r3
 80135f2:	3718      	adds	r7, #24
 80135f4:	46bd      	mov	sp, r7
 80135f6:	bd80      	pop	{r7, pc}
 80135f8:	42470068 	.word	0x42470068
 80135fc:	40023800 	.word	0x40023800
 8013600:	40007000 	.word	0x40007000
 8013604:	42470e40 	.word	0x42470e40
 8013608:	424711e0 	.word	0x424711e0

0801360c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 801360c:	b480      	push	{r7}
 801360e:	b087      	sub	sp, #28
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8013614:	2300      	movs	r3, #0
 8013616:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8013618:	2300      	movs	r3, #0
 801361a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 801361c:	2300      	movs	r3, #0
 801361e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8013620:	2300      	movs	r3, #0
 8013622:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	2b01      	cmp	r3, #1
 8013628:	d140      	bne.n	80136ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 801362a:	4b24      	ldr	r3, [pc, #144]	; (80136bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 801362c:	689b      	ldr	r3, [r3, #8]
 801362e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013632:	60fb      	str	r3, [r7, #12]
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d005      	beq.n	8013646 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	2b01      	cmp	r3, #1
 801363e:	d131      	bne.n	80136a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8013640:	4b1f      	ldr	r3, [pc, #124]	; (80136c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8013642:	617b      	str	r3, [r7, #20]
          break;
 8013644:	e031      	b.n	80136aa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8013646:	4b1d      	ldr	r3, [pc, #116]	; (80136bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8013648:	685b      	ldr	r3, [r3, #4]
 801364a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801364e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013652:	d109      	bne.n	8013668 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8013654:	4b19      	ldr	r3, [pc, #100]	; (80136bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8013656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801365a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801365e:	4a19      	ldr	r2, [pc, #100]	; (80136c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8013660:	fbb2 f3f3 	udiv	r3, r2, r3
 8013664:	613b      	str	r3, [r7, #16]
 8013666:	e008      	b.n	801367a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8013668:	4b14      	ldr	r3, [pc, #80]	; (80136bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 801366a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801366e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013672:	4a15      	ldr	r2, [pc, #84]	; (80136c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8013674:	fbb2 f3f3 	udiv	r3, r2, r3
 8013678:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 801367a:	4b10      	ldr	r3, [pc, #64]	; (80136bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 801367c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013680:	099b      	lsrs	r3, r3, #6
 8013682:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013686:	693b      	ldr	r3, [r7, #16]
 8013688:	fb02 f303 	mul.w	r3, r2, r3
 801368c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 801368e:	4b0b      	ldr	r3, [pc, #44]	; (80136bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8013690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013694:	0f1b      	lsrs	r3, r3, #28
 8013696:	f003 0307 	and.w	r3, r3, #7
 801369a:	68ba      	ldr	r2, [r7, #8]
 801369c:	fbb2 f3f3 	udiv	r3, r2, r3
 80136a0:	617b      	str	r3, [r7, #20]
          break;
 80136a2:	e002      	b.n	80136aa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80136a4:	2300      	movs	r3, #0
 80136a6:	617b      	str	r3, [r7, #20]
          break;
 80136a8:	bf00      	nop
        }
      }
      break;
 80136aa:	bf00      	nop
    }
  }
  return frequency;
 80136ac:	697b      	ldr	r3, [r7, #20]
}
 80136ae:	4618      	mov	r0, r3
 80136b0:	371c      	adds	r7, #28
 80136b2:	46bd      	mov	sp, r7
 80136b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b8:	4770      	bx	lr
 80136ba:	bf00      	nop
 80136bc:	40023800 	.word	0x40023800
 80136c0:	00bb8000 	.word	0x00bb8000
 80136c4:	007a1200 	.word	0x007a1200
 80136c8:	00f42400 	.word	0x00f42400

080136cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b082      	sub	sp, #8
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d101      	bne.n	80136de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80136da:	2301      	movs	r3, #1
 80136dc:	e041      	b.n	8013762 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80136e4:	b2db      	uxtb	r3, r3
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d106      	bne.n	80136f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	2200      	movs	r2, #0
 80136ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80136f2:	6878      	ldr	r0, [r7, #4]
 80136f4:	f000 f839 	bl	801376a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	2202      	movs	r2, #2
 80136fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	681a      	ldr	r2, [r3, #0]
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	3304      	adds	r3, #4
 8013708:	4619      	mov	r1, r3
 801370a:	4610      	mov	r0, r2
 801370c:	f000 f9ca 	bl	8013aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	2201      	movs	r2, #1
 8013714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	2201      	movs	r2, #1
 801371c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	2201      	movs	r2, #1
 8013724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	2201      	movs	r2, #1
 801372c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	2201      	movs	r2, #1
 8013734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	2201      	movs	r2, #1
 801373c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	2201      	movs	r2, #1
 8013744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	2201      	movs	r2, #1
 801374c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	2201      	movs	r2, #1
 8013754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	2201      	movs	r2, #1
 801375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013760:	2300      	movs	r3, #0
}
 8013762:	4618      	mov	r0, r3
 8013764:	3708      	adds	r7, #8
 8013766:	46bd      	mov	sp, r7
 8013768:	bd80      	pop	{r7, pc}

0801376a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 801376a:	b480      	push	{r7}
 801376c:	b083      	sub	sp, #12
 801376e:	af00      	add	r7, sp, #0
 8013770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8013772:	bf00      	nop
 8013774:	370c      	adds	r7, #12
 8013776:	46bd      	mov	sp, r7
 8013778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377c:	4770      	bx	lr
	...

08013780 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013780:	b480      	push	{r7}
 8013782:	b085      	sub	sp, #20
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801378e:	b2db      	uxtb	r3, r3
 8013790:	2b01      	cmp	r3, #1
 8013792:	d001      	beq.n	8013798 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8013794:	2301      	movs	r3, #1
 8013796:	e044      	b.n	8013822 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	2202      	movs	r2, #2
 801379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	68da      	ldr	r2, [r3, #12]
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	f042 0201 	orr.w	r2, r2, #1
 80137ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	4a1e      	ldr	r2, [pc, #120]	; (8013830 <HAL_TIM_Base_Start_IT+0xb0>)
 80137b6:	4293      	cmp	r3, r2
 80137b8:	d018      	beq.n	80137ec <HAL_TIM_Base_Start_IT+0x6c>
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80137c2:	d013      	beq.n	80137ec <HAL_TIM_Base_Start_IT+0x6c>
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	4a1a      	ldr	r2, [pc, #104]	; (8013834 <HAL_TIM_Base_Start_IT+0xb4>)
 80137ca:	4293      	cmp	r3, r2
 80137cc:	d00e      	beq.n	80137ec <HAL_TIM_Base_Start_IT+0x6c>
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	4a19      	ldr	r2, [pc, #100]	; (8013838 <HAL_TIM_Base_Start_IT+0xb8>)
 80137d4:	4293      	cmp	r3, r2
 80137d6:	d009      	beq.n	80137ec <HAL_TIM_Base_Start_IT+0x6c>
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	4a17      	ldr	r2, [pc, #92]	; (801383c <HAL_TIM_Base_Start_IT+0xbc>)
 80137de:	4293      	cmp	r3, r2
 80137e0:	d004      	beq.n	80137ec <HAL_TIM_Base_Start_IT+0x6c>
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	4a16      	ldr	r2, [pc, #88]	; (8013840 <HAL_TIM_Base_Start_IT+0xc0>)
 80137e8:	4293      	cmp	r3, r2
 80137ea:	d111      	bne.n	8013810 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	689b      	ldr	r3, [r3, #8]
 80137f2:	f003 0307 	and.w	r3, r3, #7
 80137f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	2b06      	cmp	r3, #6
 80137fc:	d010      	beq.n	8013820 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	681a      	ldr	r2, [r3, #0]
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	f042 0201 	orr.w	r2, r2, #1
 801380c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801380e:	e007      	b.n	8013820 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	681a      	ldr	r2, [r3, #0]
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	f042 0201 	orr.w	r2, r2, #1
 801381e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013820:	2300      	movs	r3, #0
}
 8013822:	4618      	mov	r0, r3
 8013824:	3714      	adds	r7, #20
 8013826:	46bd      	mov	sp, r7
 8013828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382c:	4770      	bx	lr
 801382e:	bf00      	nop
 8013830:	40010000 	.word	0x40010000
 8013834:	40000400 	.word	0x40000400
 8013838:	40000800 	.word	0x40000800
 801383c:	40000c00 	.word	0x40000c00
 8013840:	40014000 	.word	0x40014000

08013844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b082      	sub	sp, #8
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	691b      	ldr	r3, [r3, #16]
 8013852:	f003 0302 	and.w	r3, r3, #2
 8013856:	2b02      	cmp	r3, #2
 8013858:	d122      	bne.n	80138a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	68db      	ldr	r3, [r3, #12]
 8013860:	f003 0302 	and.w	r3, r3, #2
 8013864:	2b02      	cmp	r3, #2
 8013866:	d11b      	bne.n	80138a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	f06f 0202 	mvn.w	r2, #2
 8013870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	2201      	movs	r2, #1
 8013876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	699b      	ldr	r3, [r3, #24]
 801387e:	f003 0303 	and.w	r3, r3, #3
 8013882:	2b00      	cmp	r3, #0
 8013884:	d003      	beq.n	801388e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013886:	6878      	ldr	r0, [r7, #4]
 8013888:	f000 f8ee 	bl	8013a68 <HAL_TIM_IC_CaptureCallback>
 801388c:	e005      	b.n	801389a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801388e:	6878      	ldr	r0, [r7, #4]
 8013890:	f000 f8e0 	bl	8013a54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013894:	6878      	ldr	r0, [r7, #4]
 8013896:	f000 f8f1 	bl	8013a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	2200      	movs	r2, #0
 801389e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	691b      	ldr	r3, [r3, #16]
 80138a6:	f003 0304 	and.w	r3, r3, #4
 80138aa:	2b04      	cmp	r3, #4
 80138ac:	d122      	bne.n	80138f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	68db      	ldr	r3, [r3, #12]
 80138b4:	f003 0304 	and.w	r3, r3, #4
 80138b8:	2b04      	cmp	r3, #4
 80138ba:	d11b      	bne.n	80138f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	f06f 0204 	mvn.w	r2, #4
 80138c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	2202      	movs	r2, #2
 80138ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	699b      	ldr	r3, [r3, #24]
 80138d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d003      	beq.n	80138e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80138da:	6878      	ldr	r0, [r7, #4]
 80138dc:	f000 f8c4 	bl	8013a68 <HAL_TIM_IC_CaptureCallback>
 80138e0:	e005      	b.n	80138ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80138e2:	6878      	ldr	r0, [r7, #4]
 80138e4:	f000 f8b6 	bl	8013a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80138e8:	6878      	ldr	r0, [r7, #4]
 80138ea:	f000 f8c7 	bl	8013a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	2200      	movs	r2, #0
 80138f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	691b      	ldr	r3, [r3, #16]
 80138fa:	f003 0308 	and.w	r3, r3, #8
 80138fe:	2b08      	cmp	r3, #8
 8013900:	d122      	bne.n	8013948 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	68db      	ldr	r3, [r3, #12]
 8013908:	f003 0308 	and.w	r3, r3, #8
 801390c:	2b08      	cmp	r3, #8
 801390e:	d11b      	bne.n	8013948 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	f06f 0208 	mvn.w	r2, #8
 8013918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	2204      	movs	r2, #4
 801391e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	69db      	ldr	r3, [r3, #28]
 8013926:	f003 0303 	and.w	r3, r3, #3
 801392a:	2b00      	cmp	r3, #0
 801392c:	d003      	beq.n	8013936 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801392e:	6878      	ldr	r0, [r7, #4]
 8013930:	f000 f89a 	bl	8013a68 <HAL_TIM_IC_CaptureCallback>
 8013934:	e005      	b.n	8013942 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013936:	6878      	ldr	r0, [r7, #4]
 8013938:	f000 f88c 	bl	8013a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801393c:	6878      	ldr	r0, [r7, #4]
 801393e:	f000 f89d 	bl	8013a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	2200      	movs	r2, #0
 8013946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	691b      	ldr	r3, [r3, #16]
 801394e:	f003 0310 	and.w	r3, r3, #16
 8013952:	2b10      	cmp	r3, #16
 8013954:	d122      	bne.n	801399c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	68db      	ldr	r3, [r3, #12]
 801395c:	f003 0310 	and.w	r3, r3, #16
 8013960:	2b10      	cmp	r3, #16
 8013962:	d11b      	bne.n	801399c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	f06f 0210 	mvn.w	r2, #16
 801396c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	2208      	movs	r2, #8
 8013972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	69db      	ldr	r3, [r3, #28]
 801397a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801397e:	2b00      	cmp	r3, #0
 8013980:	d003      	beq.n	801398a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013982:	6878      	ldr	r0, [r7, #4]
 8013984:	f000 f870 	bl	8013a68 <HAL_TIM_IC_CaptureCallback>
 8013988:	e005      	b.n	8013996 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801398a:	6878      	ldr	r0, [r7, #4]
 801398c:	f000 f862 	bl	8013a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013990:	6878      	ldr	r0, [r7, #4]
 8013992:	f000 f873 	bl	8013a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	2200      	movs	r2, #0
 801399a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	691b      	ldr	r3, [r3, #16]
 80139a2:	f003 0301 	and.w	r3, r3, #1
 80139a6:	2b01      	cmp	r3, #1
 80139a8:	d10e      	bne.n	80139c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	68db      	ldr	r3, [r3, #12]
 80139b0:	f003 0301 	and.w	r3, r3, #1
 80139b4:	2b01      	cmp	r3, #1
 80139b6:	d107      	bne.n	80139c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	f06f 0201 	mvn.w	r2, #1
 80139c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80139c2:	6878      	ldr	r0, [r7, #4]
 80139c4:	f7fc ff44 	bl	8010850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	691b      	ldr	r3, [r3, #16]
 80139ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80139d2:	2b80      	cmp	r3, #128	; 0x80
 80139d4:	d10e      	bne.n	80139f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	68db      	ldr	r3, [r3, #12]
 80139dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80139e0:	2b80      	cmp	r3, #128	; 0x80
 80139e2:	d107      	bne.n	80139f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80139ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80139ee:	6878      	ldr	r0, [r7, #4]
 80139f0:	f000 f8e2 	bl	8013bb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	691b      	ldr	r3, [r3, #16]
 80139fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139fe:	2b40      	cmp	r3, #64	; 0x40
 8013a00:	d10e      	bne.n	8013a20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	68db      	ldr	r3, [r3, #12]
 8013a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013a0c:	2b40      	cmp	r3, #64	; 0x40
 8013a0e:	d107      	bne.n	8013a20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8013a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8013a1a:	6878      	ldr	r0, [r7, #4]
 8013a1c:	f000 f838 	bl	8013a90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	691b      	ldr	r3, [r3, #16]
 8013a26:	f003 0320 	and.w	r3, r3, #32
 8013a2a:	2b20      	cmp	r3, #32
 8013a2c:	d10e      	bne.n	8013a4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	68db      	ldr	r3, [r3, #12]
 8013a34:	f003 0320 	and.w	r3, r3, #32
 8013a38:	2b20      	cmp	r3, #32
 8013a3a:	d107      	bne.n	8013a4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	f06f 0220 	mvn.w	r2, #32
 8013a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8013a46:	6878      	ldr	r0, [r7, #4]
 8013a48:	f000 f8ac 	bl	8013ba4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8013a4c:	bf00      	nop
 8013a4e:	3708      	adds	r7, #8
 8013a50:	46bd      	mov	sp, r7
 8013a52:	bd80      	pop	{r7, pc}

08013a54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013a54:	b480      	push	{r7}
 8013a56:	b083      	sub	sp, #12
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013a5c:	bf00      	nop
 8013a5e:	370c      	adds	r7, #12
 8013a60:	46bd      	mov	sp, r7
 8013a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a66:	4770      	bx	lr

08013a68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013a68:	b480      	push	{r7}
 8013a6a:	b083      	sub	sp, #12
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013a70:	bf00      	nop
 8013a72:	370c      	adds	r7, #12
 8013a74:	46bd      	mov	sp, r7
 8013a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a7a:	4770      	bx	lr

08013a7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013a7c:	b480      	push	{r7}
 8013a7e:	b083      	sub	sp, #12
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013a84:	bf00      	nop
 8013a86:	370c      	adds	r7, #12
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8e:	4770      	bx	lr

08013a90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013a90:	b480      	push	{r7}
 8013a92:	b083      	sub	sp, #12
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013a98:	bf00      	nop
 8013a9a:	370c      	adds	r7, #12
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa2:	4770      	bx	lr

08013aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8013aa4:	b480      	push	{r7}
 8013aa6:	b085      	sub	sp, #20
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
 8013aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	4a34      	ldr	r2, [pc, #208]	; (8013b88 <TIM_Base_SetConfig+0xe4>)
 8013ab8:	4293      	cmp	r3, r2
 8013aba:	d00f      	beq.n	8013adc <TIM_Base_SetConfig+0x38>
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013ac2:	d00b      	beq.n	8013adc <TIM_Base_SetConfig+0x38>
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	4a31      	ldr	r2, [pc, #196]	; (8013b8c <TIM_Base_SetConfig+0xe8>)
 8013ac8:	4293      	cmp	r3, r2
 8013aca:	d007      	beq.n	8013adc <TIM_Base_SetConfig+0x38>
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	4a30      	ldr	r2, [pc, #192]	; (8013b90 <TIM_Base_SetConfig+0xec>)
 8013ad0:	4293      	cmp	r3, r2
 8013ad2:	d003      	beq.n	8013adc <TIM_Base_SetConfig+0x38>
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	4a2f      	ldr	r2, [pc, #188]	; (8013b94 <TIM_Base_SetConfig+0xf0>)
 8013ad8:	4293      	cmp	r3, r2
 8013ada:	d108      	bne.n	8013aee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013ae4:	683b      	ldr	r3, [r7, #0]
 8013ae6:	685b      	ldr	r3, [r3, #4]
 8013ae8:	68fa      	ldr	r2, [r7, #12]
 8013aea:	4313      	orrs	r3, r2
 8013aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	4a25      	ldr	r2, [pc, #148]	; (8013b88 <TIM_Base_SetConfig+0xe4>)
 8013af2:	4293      	cmp	r3, r2
 8013af4:	d01b      	beq.n	8013b2e <TIM_Base_SetConfig+0x8a>
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013afc:	d017      	beq.n	8013b2e <TIM_Base_SetConfig+0x8a>
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	4a22      	ldr	r2, [pc, #136]	; (8013b8c <TIM_Base_SetConfig+0xe8>)
 8013b02:	4293      	cmp	r3, r2
 8013b04:	d013      	beq.n	8013b2e <TIM_Base_SetConfig+0x8a>
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	4a21      	ldr	r2, [pc, #132]	; (8013b90 <TIM_Base_SetConfig+0xec>)
 8013b0a:	4293      	cmp	r3, r2
 8013b0c:	d00f      	beq.n	8013b2e <TIM_Base_SetConfig+0x8a>
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	4a20      	ldr	r2, [pc, #128]	; (8013b94 <TIM_Base_SetConfig+0xf0>)
 8013b12:	4293      	cmp	r3, r2
 8013b14:	d00b      	beq.n	8013b2e <TIM_Base_SetConfig+0x8a>
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	4a1f      	ldr	r2, [pc, #124]	; (8013b98 <TIM_Base_SetConfig+0xf4>)
 8013b1a:	4293      	cmp	r3, r2
 8013b1c:	d007      	beq.n	8013b2e <TIM_Base_SetConfig+0x8a>
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	4a1e      	ldr	r2, [pc, #120]	; (8013b9c <TIM_Base_SetConfig+0xf8>)
 8013b22:	4293      	cmp	r3, r2
 8013b24:	d003      	beq.n	8013b2e <TIM_Base_SetConfig+0x8a>
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	4a1d      	ldr	r2, [pc, #116]	; (8013ba0 <TIM_Base_SetConfig+0xfc>)
 8013b2a:	4293      	cmp	r3, r2
 8013b2c:	d108      	bne.n	8013b40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013b36:	683b      	ldr	r3, [r7, #0]
 8013b38:	68db      	ldr	r3, [r3, #12]
 8013b3a:	68fa      	ldr	r2, [r7, #12]
 8013b3c:	4313      	orrs	r3, r2
 8013b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013b46:	683b      	ldr	r3, [r7, #0]
 8013b48:	695b      	ldr	r3, [r3, #20]
 8013b4a:	4313      	orrs	r3, r2
 8013b4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	68fa      	ldr	r2, [r7, #12]
 8013b52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013b54:	683b      	ldr	r3, [r7, #0]
 8013b56:	689a      	ldr	r2, [r3, #8]
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013b5c:	683b      	ldr	r3, [r7, #0]
 8013b5e:	681a      	ldr	r2, [r3, #0]
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	4a08      	ldr	r2, [pc, #32]	; (8013b88 <TIM_Base_SetConfig+0xe4>)
 8013b68:	4293      	cmp	r3, r2
 8013b6a:	d103      	bne.n	8013b74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013b6c:	683b      	ldr	r3, [r7, #0]
 8013b6e:	691a      	ldr	r2, [r3, #16]
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	2201      	movs	r2, #1
 8013b78:	615a      	str	r2, [r3, #20]
}
 8013b7a:	bf00      	nop
 8013b7c:	3714      	adds	r7, #20
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b84:	4770      	bx	lr
 8013b86:	bf00      	nop
 8013b88:	40010000 	.word	0x40010000
 8013b8c:	40000400 	.word	0x40000400
 8013b90:	40000800 	.word	0x40000800
 8013b94:	40000c00 	.word	0x40000c00
 8013b98:	40014000 	.word	0x40014000
 8013b9c:	40014400 	.word	0x40014400
 8013ba0:	40014800 	.word	0x40014800

08013ba4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013ba4:	b480      	push	{r7}
 8013ba6:	b083      	sub	sp, #12
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013bac:	bf00      	nop
 8013bae:	370c      	adds	r7, #12
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb6:	4770      	bx	lr

08013bb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013bb8:	b480      	push	{r7}
 8013bba:	b083      	sub	sp, #12
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013bc0:	bf00      	nop
 8013bc2:	370c      	adds	r7, #12
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bca:	4770      	bx	lr

08013bcc <__NVIC_SetPriority>:
{
 8013bcc:	b480      	push	{r7}
 8013bce:	b083      	sub	sp, #12
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	6039      	str	r1, [r7, #0]
 8013bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	db0a      	blt.n	8013bf6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013be0:	683b      	ldr	r3, [r7, #0]
 8013be2:	b2da      	uxtb	r2, r3
 8013be4:	490c      	ldr	r1, [pc, #48]	; (8013c18 <__NVIC_SetPriority+0x4c>)
 8013be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013bea:	0112      	lsls	r2, r2, #4
 8013bec:	b2d2      	uxtb	r2, r2
 8013bee:	440b      	add	r3, r1
 8013bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8013bf4:	e00a      	b.n	8013c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013bf6:	683b      	ldr	r3, [r7, #0]
 8013bf8:	b2da      	uxtb	r2, r3
 8013bfa:	4908      	ldr	r1, [pc, #32]	; (8013c1c <__NVIC_SetPriority+0x50>)
 8013bfc:	79fb      	ldrb	r3, [r7, #7]
 8013bfe:	f003 030f 	and.w	r3, r3, #15
 8013c02:	3b04      	subs	r3, #4
 8013c04:	0112      	lsls	r2, r2, #4
 8013c06:	b2d2      	uxtb	r2, r2
 8013c08:	440b      	add	r3, r1
 8013c0a:	761a      	strb	r2, [r3, #24]
}
 8013c0c:	bf00      	nop
 8013c0e:	370c      	adds	r7, #12
 8013c10:	46bd      	mov	sp, r7
 8013c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c16:	4770      	bx	lr
 8013c18:	e000e100 	.word	0xe000e100
 8013c1c:	e000ed00 	.word	0xe000ed00

08013c20 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8013c20:	b580      	push	{r7, lr}
 8013c22:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8013c24:	4b05      	ldr	r3, [pc, #20]	; (8013c3c <SysTick_Handler+0x1c>)
 8013c26:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8013c28:	f002 f850 	bl	8015ccc <xTaskGetSchedulerState>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	2b01      	cmp	r3, #1
 8013c30:	d001      	beq.n	8013c36 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8013c32:	f002 ff39 	bl	8016aa8 <xPortSysTickHandler>
  }
}
 8013c36:	bf00      	nop
 8013c38:	bd80      	pop	{r7, pc}
 8013c3a:	bf00      	nop
 8013c3c:	e000e010 	.word	0xe000e010

08013c40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013c40:	b580      	push	{r7, lr}
 8013c42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8013c44:	2100      	movs	r1, #0
 8013c46:	f06f 0004 	mvn.w	r0, #4
 8013c4a:	f7ff ffbf 	bl	8013bcc <__NVIC_SetPriority>
#endif
}
 8013c4e:	bf00      	nop
 8013c50:	bd80      	pop	{r7, pc}
	...

08013c54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8013c54:	b480      	push	{r7}
 8013c56:	b083      	sub	sp, #12
 8013c58:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013c5a:	f3ef 8305 	mrs	r3, IPSR
 8013c5e:	603b      	str	r3, [r7, #0]
  return(result);
 8013c60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d003      	beq.n	8013c6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8013c66:	f06f 0305 	mvn.w	r3, #5
 8013c6a:	607b      	str	r3, [r7, #4]
 8013c6c:	e00c      	b.n	8013c88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8013c6e:	4b0a      	ldr	r3, [pc, #40]	; (8013c98 <osKernelInitialize+0x44>)
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d105      	bne.n	8013c82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8013c76:	4b08      	ldr	r3, [pc, #32]	; (8013c98 <osKernelInitialize+0x44>)
 8013c78:	2201      	movs	r2, #1
 8013c7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	607b      	str	r3, [r7, #4]
 8013c80:	e002      	b.n	8013c88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8013c82:	f04f 33ff 	mov.w	r3, #4294967295
 8013c86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013c88:	687b      	ldr	r3, [r7, #4]
}
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	370c      	adds	r7, #12
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c94:	4770      	bx	lr
 8013c96:	bf00      	nop
 8013c98:	20000128 	.word	0x20000128

08013c9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b082      	sub	sp, #8
 8013ca0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013ca2:	f3ef 8305 	mrs	r3, IPSR
 8013ca6:	603b      	str	r3, [r7, #0]
  return(result);
 8013ca8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d003      	beq.n	8013cb6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8013cae:	f06f 0305 	mvn.w	r3, #5
 8013cb2:	607b      	str	r3, [r7, #4]
 8013cb4:	e010      	b.n	8013cd8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8013cb6:	4b0b      	ldr	r3, [pc, #44]	; (8013ce4 <osKernelStart+0x48>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	2b01      	cmp	r3, #1
 8013cbc:	d109      	bne.n	8013cd2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8013cbe:	f7ff ffbf 	bl	8013c40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8013cc2:	4b08      	ldr	r3, [pc, #32]	; (8013ce4 <osKernelStart+0x48>)
 8013cc4:	2202      	movs	r2, #2
 8013cc6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013cc8:	f001 fb92 	bl	80153f0 <vTaskStartScheduler>
      stat = osOK;
 8013ccc:	2300      	movs	r3, #0
 8013cce:	607b      	str	r3, [r7, #4]
 8013cd0:	e002      	b.n	8013cd8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8013cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8013cd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013cd8:	687b      	ldr	r3, [r7, #4]
}
 8013cda:	4618      	mov	r0, r3
 8013cdc:	3708      	adds	r7, #8
 8013cde:	46bd      	mov	sp, r7
 8013ce0:	bd80      	pop	{r7, pc}
 8013ce2:	bf00      	nop
 8013ce4:	20000128 	.word	0x20000128

08013ce8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b08e      	sub	sp, #56	; 0x38
 8013cec:	af04      	add	r7, sp, #16
 8013cee:	60f8      	str	r0, [r7, #12]
 8013cf0:	60b9      	str	r1, [r7, #8]
 8013cf2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013cf8:	f3ef 8305 	mrs	r3, IPSR
 8013cfc:	617b      	str	r3, [r7, #20]
  return(result);
 8013cfe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d17e      	bne.n	8013e02 <osThreadNew+0x11a>
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d07b      	beq.n	8013e02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8013d0a:	2380      	movs	r3, #128	; 0x80
 8013d0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8013d0e:	2318      	movs	r3, #24
 8013d10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8013d12:	2300      	movs	r3, #0
 8013d14:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8013d16:	f04f 33ff 	mov.w	r3, #4294967295
 8013d1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d045      	beq.n	8013dae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d002      	beq.n	8013d30 <osThreadNew+0x48>
        name = attr->name;
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	699b      	ldr	r3, [r3, #24]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d002      	beq.n	8013d3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	699b      	ldr	r3, [r3, #24]
 8013d3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8013d3e:	69fb      	ldr	r3, [r7, #28]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d008      	beq.n	8013d56 <osThreadNew+0x6e>
 8013d44:	69fb      	ldr	r3, [r7, #28]
 8013d46:	2b38      	cmp	r3, #56	; 0x38
 8013d48:	d805      	bhi.n	8013d56 <osThreadNew+0x6e>
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	685b      	ldr	r3, [r3, #4]
 8013d4e:	f003 0301 	and.w	r3, r3, #1
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d001      	beq.n	8013d5a <osThreadNew+0x72>
        return (NULL);
 8013d56:	2300      	movs	r3, #0
 8013d58:	e054      	b.n	8013e04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	695b      	ldr	r3, [r3, #20]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d003      	beq.n	8013d6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	695b      	ldr	r3, [r3, #20]
 8013d66:	089b      	lsrs	r3, r3, #2
 8013d68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	689b      	ldr	r3, [r3, #8]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d00e      	beq.n	8013d90 <osThreadNew+0xa8>
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	68db      	ldr	r3, [r3, #12]
 8013d76:	2b5b      	cmp	r3, #91	; 0x5b
 8013d78:	d90a      	bls.n	8013d90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d006      	beq.n	8013d90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	695b      	ldr	r3, [r3, #20]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d002      	beq.n	8013d90 <osThreadNew+0xa8>
        mem = 1;
 8013d8a:	2301      	movs	r3, #1
 8013d8c:	61bb      	str	r3, [r7, #24]
 8013d8e:	e010      	b.n	8013db2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	689b      	ldr	r3, [r3, #8]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d10c      	bne.n	8013db2 <osThreadNew+0xca>
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	68db      	ldr	r3, [r3, #12]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d108      	bne.n	8013db2 <osThreadNew+0xca>
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	691b      	ldr	r3, [r3, #16]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d104      	bne.n	8013db2 <osThreadNew+0xca>
          mem = 0;
 8013da8:	2300      	movs	r3, #0
 8013daa:	61bb      	str	r3, [r7, #24]
 8013dac:	e001      	b.n	8013db2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8013dae:	2300      	movs	r3, #0
 8013db0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8013db2:	69bb      	ldr	r3, [r7, #24]
 8013db4:	2b01      	cmp	r3, #1
 8013db6:	d110      	bne.n	8013dda <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8013dbc:	687a      	ldr	r2, [r7, #4]
 8013dbe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013dc0:	9202      	str	r2, [sp, #8]
 8013dc2:	9301      	str	r3, [sp, #4]
 8013dc4:	69fb      	ldr	r3, [r7, #28]
 8013dc6:	9300      	str	r3, [sp, #0]
 8013dc8:	68bb      	ldr	r3, [r7, #8]
 8013dca:	6a3a      	ldr	r2, [r7, #32]
 8013dcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013dce:	68f8      	ldr	r0, [r7, #12]
 8013dd0:	f000 ffea 	bl	8014da8 <xTaskCreateStatic>
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	613b      	str	r3, [r7, #16]
 8013dd8:	e013      	b.n	8013e02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8013dda:	69bb      	ldr	r3, [r7, #24]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d110      	bne.n	8013e02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8013de0:	6a3b      	ldr	r3, [r7, #32]
 8013de2:	b29a      	uxth	r2, r3
 8013de4:	f107 0310 	add.w	r3, r7, #16
 8013de8:	9301      	str	r3, [sp, #4]
 8013dea:	69fb      	ldr	r3, [r7, #28]
 8013dec:	9300      	str	r3, [sp, #0]
 8013dee:	68bb      	ldr	r3, [r7, #8]
 8013df0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013df2:	68f8      	ldr	r0, [r7, #12]
 8013df4:	f001 f835 	bl	8014e62 <xTaskCreate>
 8013df8:	4603      	mov	r3, r0
 8013dfa:	2b01      	cmp	r3, #1
 8013dfc:	d001      	beq.n	8013e02 <osThreadNew+0x11a>
            hTask = NULL;
 8013dfe:	2300      	movs	r3, #0
 8013e00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8013e02:	693b      	ldr	r3, [r7, #16]
}
 8013e04:	4618      	mov	r0, r3
 8013e06:	3728      	adds	r7, #40	; 0x28
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	bd80      	pop	{r7, pc}

08013e0c <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b086      	sub	sp, #24
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013e18:	f3ef 8305 	mrs	r3, IPSR
 8013e1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8013e1e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d003      	beq.n	8013e2c <osThreadSuspend+0x20>
    stat = osErrorISR;
 8013e24:	f06f 0305 	mvn.w	r3, #5
 8013e28:	617b      	str	r3, [r7, #20]
 8013e2a:	e00b      	b.n	8013e44 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8013e2c:	693b      	ldr	r3, [r7, #16]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d103      	bne.n	8013e3a <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8013e32:	f06f 0303 	mvn.w	r3, #3
 8013e36:	617b      	str	r3, [r7, #20]
 8013e38:	e004      	b.n	8013e44 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8013e3e:	6938      	ldr	r0, [r7, #16]
 8013e40:	f001 fa60 	bl	8015304 <vTaskSuspend>
  }

  return (stat);
 8013e44:	697b      	ldr	r3, [r7, #20]
}
 8013e46:	4618      	mov	r0, r3
 8013e48:	3718      	adds	r7, #24
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	bd80      	pop	{r7, pc}

08013e4e <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8013e4e:	b580      	push	{r7, lr}
 8013e50:	b086      	sub	sp, #24
 8013e52:	af00      	add	r7, sp, #0
 8013e54:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013e5a:	f3ef 8305 	mrs	r3, IPSR
 8013e5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8013e60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d003      	beq.n	8013e6e <osThreadTerminate+0x20>
    stat = osErrorISR;
 8013e66:	f06f 0305 	mvn.w	r3, #5
 8013e6a:	617b      	str	r3, [r7, #20]
 8013e6c:	e017      	b.n	8013e9e <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8013e6e:	693b      	ldr	r3, [r7, #16]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d103      	bne.n	8013e7c <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8013e74:	f06f 0303 	mvn.w	r3, #3
 8013e78:	617b      	str	r3, [r7, #20]
 8013e7a:	e010      	b.n	8013e9e <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8013e7c:	6938      	ldr	r0, [r7, #16]
 8013e7e:	f001 f9db 	bl	8015238 <eTaskGetState>
 8013e82:	4603      	mov	r3, r0
 8013e84:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8013e86:	7bfb      	ldrb	r3, [r7, #15]
 8013e88:	2b04      	cmp	r3, #4
 8013e8a:	d005      	beq.n	8013e98 <osThreadTerminate+0x4a>
      stat = osOK;
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8013e90:	6938      	ldr	r0, [r7, #16]
 8013e92:	f001 f92b 	bl	80150ec <vTaskDelete>
 8013e96:	e002      	b.n	8013e9e <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8013e98:	f06f 0302 	mvn.w	r3, #2
 8013e9c:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8013e9e:	697b      	ldr	r3, [r7, #20]
}
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	3718      	adds	r7, #24
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	bd80      	pop	{r7, pc}

08013ea8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b084      	sub	sp, #16
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013eb0:	f3ef 8305 	mrs	r3, IPSR
 8013eb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8013eb6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d003      	beq.n	8013ec4 <osDelay+0x1c>
    stat = osErrorISR;
 8013ebc:	f06f 0305 	mvn.w	r3, #5
 8013ec0:	60fb      	str	r3, [r7, #12]
 8013ec2:	e007      	b.n	8013ed4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d002      	beq.n	8013ed4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8013ece:	6878      	ldr	r0, [r7, #4]
 8013ed0:	f001 f97e 	bl	80151d0 <vTaskDelay>
    }
  }

  return (stat);
 8013ed4:	68fb      	ldr	r3, [r7, #12]
}
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	3710      	adds	r7, #16
 8013eda:	46bd      	mov	sp, r7
 8013edc:	bd80      	pop	{r7, pc}
	...

08013ee0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013ee0:	b480      	push	{r7}
 8013ee2:	b085      	sub	sp, #20
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	60f8      	str	r0, [r7, #12]
 8013ee8:	60b9      	str	r1, [r7, #8]
 8013eea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	4a07      	ldr	r2, [pc, #28]	; (8013f0c <vApplicationGetIdleTaskMemory+0x2c>)
 8013ef0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013ef2:	68bb      	ldr	r3, [r7, #8]
 8013ef4:	4a06      	ldr	r2, [pc, #24]	; (8013f10 <vApplicationGetIdleTaskMemory+0x30>)
 8013ef6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	2280      	movs	r2, #128	; 0x80
 8013efc:	601a      	str	r2, [r3, #0]
}
 8013efe:	bf00      	nop
 8013f00:	3714      	adds	r7, #20
 8013f02:	46bd      	mov	sp, r7
 8013f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f08:	4770      	bx	lr
 8013f0a:	bf00      	nop
 8013f0c:	2000012c 	.word	0x2000012c
 8013f10:	20000188 	.word	0x20000188

08013f14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013f14:	b480      	push	{r7}
 8013f16:	b085      	sub	sp, #20
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	60f8      	str	r0, [r7, #12]
 8013f1c:	60b9      	str	r1, [r7, #8]
 8013f1e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	4a07      	ldr	r2, [pc, #28]	; (8013f40 <vApplicationGetTimerTaskMemory+0x2c>)
 8013f24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013f26:	68bb      	ldr	r3, [r7, #8]
 8013f28:	4a06      	ldr	r2, [pc, #24]	; (8013f44 <vApplicationGetTimerTaskMemory+0x30>)
 8013f2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013f32:	601a      	str	r2, [r3, #0]
}
 8013f34:	bf00      	nop
 8013f36:	3714      	adds	r7, #20
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f3e:	4770      	bx	lr
 8013f40:	20000388 	.word	0x20000388
 8013f44:	200003e4 	.word	0x200003e4

08013f48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013f48:	b480      	push	{r7}
 8013f4a:	b083      	sub	sp, #12
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	f103 0208 	add.w	r2, r3, #8
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8013f60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	f103 0208 	add.w	r2, r3, #8
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	f103 0208 	add.w	r2, r3, #8
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	2200      	movs	r2, #0
 8013f7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013f7c:	bf00      	nop
 8013f7e:	370c      	adds	r7, #12
 8013f80:	46bd      	mov	sp, r7
 8013f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f86:	4770      	bx	lr

08013f88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013f88:	b480      	push	{r7}
 8013f8a:	b083      	sub	sp, #12
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	2200      	movs	r2, #0
 8013f94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013f96:	bf00      	nop
 8013f98:	370c      	adds	r7, #12
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa0:	4770      	bx	lr

08013fa2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013fa2:	b480      	push	{r7}
 8013fa4:	b085      	sub	sp, #20
 8013fa6:	af00      	add	r7, sp, #0
 8013fa8:	6078      	str	r0, [r7, #4]
 8013faa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	685b      	ldr	r3, [r3, #4]
 8013fb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013fb2:	683b      	ldr	r3, [r7, #0]
 8013fb4:	68fa      	ldr	r2, [r7, #12]
 8013fb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	689a      	ldr	r2, [r3, #8]
 8013fbc:	683b      	ldr	r3, [r7, #0]
 8013fbe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	689b      	ldr	r3, [r3, #8]
 8013fc4:	683a      	ldr	r2, [r7, #0]
 8013fc6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	683a      	ldr	r2, [r7, #0]
 8013fcc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013fce:	683b      	ldr	r3, [r7, #0]
 8013fd0:	687a      	ldr	r2, [r7, #4]
 8013fd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	1c5a      	adds	r2, r3, #1
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	601a      	str	r2, [r3, #0]
}
 8013fde:	bf00      	nop
 8013fe0:	3714      	adds	r7, #20
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe8:	4770      	bx	lr

08013fea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013fea:	b480      	push	{r7}
 8013fec:	b085      	sub	sp, #20
 8013fee:	af00      	add	r7, sp, #0
 8013ff0:	6078      	str	r0, [r7, #4]
 8013ff2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013ff4:	683b      	ldr	r3, [r7, #0]
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013ffa:	68bb      	ldr	r3, [r7, #8]
 8013ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014000:	d103      	bne.n	801400a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	691b      	ldr	r3, [r3, #16]
 8014006:	60fb      	str	r3, [r7, #12]
 8014008:	e00c      	b.n	8014024 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	3308      	adds	r3, #8
 801400e:	60fb      	str	r3, [r7, #12]
 8014010:	e002      	b.n	8014018 <vListInsert+0x2e>
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	685b      	ldr	r3, [r3, #4]
 8014016:	60fb      	str	r3, [r7, #12]
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	685b      	ldr	r3, [r3, #4]
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	68ba      	ldr	r2, [r7, #8]
 8014020:	429a      	cmp	r2, r3
 8014022:	d2f6      	bcs.n	8014012 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	685a      	ldr	r2, [r3, #4]
 8014028:	683b      	ldr	r3, [r7, #0]
 801402a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801402c:	683b      	ldr	r3, [r7, #0]
 801402e:	685b      	ldr	r3, [r3, #4]
 8014030:	683a      	ldr	r2, [r7, #0]
 8014032:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014034:	683b      	ldr	r3, [r7, #0]
 8014036:	68fa      	ldr	r2, [r7, #12]
 8014038:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	683a      	ldr	r2, [r7, #0]
 801403e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014040:	683b      	ldr	r3, [r7, #0]
 8014042:	687a      	ldr	r2, [r7, #4]
 8014044:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	1c5a      	adds	r2, r3, #1
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	601a      	str	r2, [r3, #0]
}
 8014050:	bf00      	nop
 8014052:	3714      	adds	r7, #20
 8014054:	46bd      	mov	sp, r7
 8014056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405a:	4770      	bx	lr

0801405c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801405c:	b480      	push	{r7}
 801405e:	b085      	sub	sp, #20
 8014060:	af00      	add	r7, sp, #0
 8014062:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	691b      	ldr	r3, [r3, #16]
 8014068:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	685b      	ldr	r3, [r3, #4]
 801406e:	687a      	ldr	r2, [r7, #4]
 8014070:	6892      	ldr	r2, [r2, #8]
 8014072:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	689b      	ldr	r3, [r3, #8]
 8014078:	687a      	ldr	r2, [r7, #4]
 801407a:	6852      	ldr	r2, [r2, #4]
 801407c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	685b      	ldr	r3, [r3, #4]
 8014082:	687a      	ldr	r2, [r7, #4]
 8014084:	429a      	cmp	r2, r3
 8014086:	d103      	bne.n	8014090 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	689a      	ldr	r2, [r3, #8]
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	2200      	movs	r2, #0
 8014094:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	1e5a      	subs	r2, r3, #1
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	681b      	ldr	r3, [r3, #0]
}
 80140a4:	4618      	mov	r0, r3
 80140a6:	3714      	adds	r7, #20
 80140a8:	46bd      	mov	sp, r7
 80140aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ae:	4770      	bx	lr

080140b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b084      	sub	sp, #16
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
 80140b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d10a      	bne.n	80140da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80140c4:	f04f 0340 	mov.w	r3, #64	; 0x40
 80140c8:	f383 8811 	msr	BASEPRI, r3
 80140cc:	f3bf 8f6f 	isb	sy
 80140d0:	f3bf 8f4f 	dsb	sy
 80140d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80140d6:	bf00      	nop
 80140d8:	e7fe      	b.n	80140d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80140da:	f002 fc53 	bl	8016984 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	681a      	ldr	r2, [r3, #0]
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140e6:	68f9      	ldr	r1, [r7, #12]
 80140e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80140ea:	fb01 f303 	mul.w	r3, r1, r3
 80140ee:	441a      	add	r2, r3
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	2200      	movs	r2, #0
 80140f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	681a      	ldr	r2, [r3, #0]
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	681a      	ldr	r2, [r3, #0]
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801410a:	3b01      	subs	r3, #1
 801410c:	68f9      	ldr	r1, [r7, #12]
 801410e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014110:	fb01 f303 	mul.w	r3, r1, r3
 8014114:	441a      	add	r2, r3
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	22ff      	movs	r2, #255	; 0xff
 801411e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	22ff      	movs	r2, #255	; 0xff
 8014126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801412a:	683b      	ldr	r3, [r7, #0]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d114      	bne.n	801415a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	691b      	ldr	r3, [r3, #16]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d01a      	beq.n	801416e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	3310      	adds	r3, #16
 801413c:	4618      	mov	r0, r3
 801413e:	f001 fc05 	bl	801594c <xTaskRemoveFromEventList>
 8014142:	4603      	mov	r3, r0
 8014144:	2b00      	cmp	r3, #0
 8014146:	d012      	beq.n	801416e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014148:	4b0c      	ldr	r3, [pc, #48]	; (801417c <xQueueGenericReset+0xcc>)
 801414a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801414e:	601a      	str	r2, [r3, #0]
 8014150:	f3bf 8f4f 	dsb	sy
 8014154:	f3bf 8f6f 	isb	sy
 8014158:	e009      	b.n	801416e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	3310      	adds	r3, #16
 801415e:	4618      	mov	r0, r3
 8014160:	f7ff fef2 	bl	8013f48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	3324      	adds	r3, #36	; 0x24
 8014168:	4618      	mov	r0, r3
 801416a:	f7ff feed 	bl	8013f48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801416e:	f002 fc39 	bl	80169e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014172:	2301      	movs	r3, #1
}
 8014174:	4618      	mov	r0, r3
 8014176:	3710      	adds	r7, #16
 8014178:	46bd      	mov	sp, r7
 801417a:	bd80      	pop	{r7, pc}
 801417c:	e000ed04 	.word	0xe000ed04

08014180 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014180:	b580      	push	{r7, lr}
 8014182:	b08e      	sub	sp, #56	; 0x38
 8014184:	af02      	add	r7, sp, #8
 8014186:	60f8      	str	r0, [r7, #12]
 8014188:	60b9      	str	r1, [r7, #8]
 801418a:	607a      	str	r2, [r7, #4]
 801418c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d10a      	bne.n	80141aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8014194:	f04f 0340 	mov.w	r3, #64	; 0x40
 8014198:	f383 8811 	msr	BASEPRI, r3
 801419c:	f3bf 8f6f 	isb	sy
 80141a0:	f3bf 8f4f 	dsb	sy
 80141a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80141a6:	bf00      	nop
 80141a8:	e7fe      	b.n	80141a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80141aa:	683b      	ldr	r3, [r7, #0]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d10a      	bne.n	80141c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80141b0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80141b4:	f383 8811 	msr	BASEPRI, r3
 80141b8:	f3bf 8f6f 	isb	sy
 80141bc:	f3bf 8f4f 	dsb	sy
 80141c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80141c2:	bf00      	nop
 80141c4:	e7fe      	b.n	80141c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d002      	beq.n	80141d2 <xQueueGenericCreateStatic+0x52>
 80141cc:	68bb      	ldr	r3, [r7, #8]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d001      	beq.n	80141d6 <xQueueGenericCreateStatic+0x56>
 80141d2:	2301      	movs	r3, #1
 80141d4:	e000      	b.n	80141d8 <xQueueGenericCreateStatic+0x58>
 80141d6:	2300      	movs	r3, #0
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d10a      	bne.n	80141f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80141dc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80141e0:	f383 8811 	msr	BASEPRI, r3
 80141e4:	f3bf 8f6f 	isb	sy
 80141e8:	f3bf 8f4f 	dsb	sy
 80141ec:	623b      	str	r3, [r7, #32]
}
 80141ee:	bf00      	nop
 80141f0:	e7fe      	b.n	80141f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d102      	bne.n	80141fe <xQueueGenericCreateStatic+0x7e>
 80141f8:	68bb      	ldr	r3, [r7, #8]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d101      	bne.n	8014202 <xQueueGenericCreateStatic+0x82>
 80141fe:	2301      	movs	r3, #1
 8014200:	e000      	b.n	8014204 <xQueueGenericCreateStatic+0x84>
 8014202:	2300      	movs	r3, #0
 8014204:	2b00      	cmp	r3, #0
 8014206:	d10a      	bne.n	801421e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8014208:	f04f 0340 	mov.w	r3, #64	; 0x40
 801420c:	f383 8811 	msr	BASEPRI, r3
 8014210:	f3bf 8f6f 	isb	sy
 8014214:	f3bf 8f4f 	dsb	sy
 8014218:	61fb      	str	r3, [r7, #28]
}
 801421a:	bf00      	nop
 801421c:	e7fe      	b.n	801421c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801421e:	2350      	movs	r3, #80	; 0x50
 8014220:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8014222:	697b      	ldr	r3, [r7, #20]
 8014224:	2b50      	cmp	r3, #80	; 0x50
 8014226:	d00a      	beq.n	801423e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8014228:	f04f 0340 	mov.w	r3, #64	; 0x40
 801422c:	f383 8811 	msr	BASEPRI, r3
 8014230:	f3bf 8f6f 	isb	sy
 8014234:	f3bf 8f4f 	dsb	sy
 8014238:	61bb      	str	r3, [r7, #24]
}
 801423a:	bf00      	nop
 801423c:	e7fe      	b.n	801423c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801423e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014240:	683b      	ldr	r3, [r7, #0]
 8014242:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8014244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014246:	2b00      	cmp	r3, #0
 8014248:	d00d      	beq.n	8014266 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801424a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801424c:	2201      	movs	r2, #1
 801424e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014252:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8014256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014258:	9300      	str	r3, [sp, #0]
 801425a:	4613      	mov	r3, r2
 801425c:	687a      	ldr	r2, [r7, #4]
 801425e:	68b9      	ldr	r1, [r7, #8]
 8014260:	68f8      	ldr	r0, [r7, #12]
 8014262:	f000 f83f 	bl	80142e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8014268:	4618      	mov	r0, r3
 801426a:	3730      	adds	r7, #48	; 0x30
 801426c:	46bd      	mov	sp, r7
 801426e:	bd80      	pop	{r7, pc}

08014270 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014270:	b580      	push	{r7, lr}
 8014272:	b08a      	sub	sp, #40	; 0x28
 8014274:	af02      	add	r7, sp, #8
 8014276:	60f8      	str	r0, [r7, #12]
 8014278:	60b9      	str	r1, [r7, #8]
 801427a:	4613      	mov	r3, r2
 801427c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	2b00      	cmp	r3, #0
 8014282:	d10a      	bne.n	801429a <xQueueGenericCreate+0x2a>
	__asm volatile
 8014284:	f04f 0340 	mov.w	r3, #64	; 0x40
 8014288:	f383 8811 	msr	BASEPRI, r3
 801428c:	f3bf 8f6f 	isb	sy
 8014290:	f3bf 8f4f 	dsb	sy
 8014294:	613b      	str	r3, [r7, #16]
}
 8014296:	bf00      	nop
 8014298:	e7fe      	b.n	8014298 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	68ba      	ldr	r2, [r7, #8]
 801429e:	fb02 f303 	mul.w	r3, r2, r3
 80142a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80142a4:	69fb      	ldr	r3, [r7, #28]
 80142a6:	3350      	adds	r3, #80	; 0x50
 80142a8:	4618      	mov	r0, r3
 80142aa:	f002 fc8d 	bl	8016bc8 <pvPortMalloc>
 80142ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80142b0:	69bb      	ldr	r3, [r7, #24]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d011      	beq.n	80142da <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80142b6:	69bb      	ldr	r3, [r7, #24]
 80142b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80142ba:	697b      	ldr	r3, [r7, #20]
 80142bc:	3350      	adds	r3, #80	; 0x50
 80142be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80142c0:	69bb      	ldr	r3, [r7, #24]
 80142c2:	2200      	movs	r2, #0
 80142c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80142c8:	79fa      	ldrb	r2, [r7, #7]
 80142ca:	69bb      	ldr	r3, [r7, #24]
 80142cc:	9300      	str	r3, [sp, #0]
 80142ce:	4613      	mov	r3, r2
 80142d0:	697a      	ldr	r2, [r7, #20]
 80142d2:	68b9      	ldr	r1, [r7, #8]
 80142d4:	68f8      	ldr	r0, [r7, #12]
 80142d6:	f000 f805 	bl	80142e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80142da:	69bb      	ldr	r3, [r7, #24]
	}
 80142dc:	4618      	mov	r0, r3
 80142de:	3720      	adds	r7, #32
 80142e0:	46bd      	mov	sp, r7
 80142e2:	bd80      	pop	{r7, pc}

080142e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b084      	sub	sp, #16
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	60f8      	str	r0, [r7, #12]
 80142ec:	60b9      	str	r1, [r7, #8]
 80142ee:	607a      	str	r2, [r7, #4]
 80142f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80142f2:	68bb      	ldr	r3, [r7, #8]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d103      	bne.n	8014300 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80142f8:	69bb      	ldr	r3, [r7, #24]
 80142fa:	69ba      	ldr	r2, [r7, #24]
 80142fc:	601a      	str	r2, [r3, #0]
 80142fe:	e002      	b.n	8014306 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014300:	69bb      	ldr	r3, [r7, #24]
 8014302:	687a      	ldr	r2, [r7, #4]
 8014304:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014306:	69bb      	ldr	r3, [r7, #24]
 8014308:	68fa      	ldr	r2, [r7, #12]
 801430a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801430c:	69bb      	ldr	r3, [r7, #24]
 801430e:	68ba      	ldr	r2, [r7, #8]
 8014310:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014312:	2101      	movs	r1, #1
 8014314:	69b8      	ldr	r0, [r7, #24]
 8014316:	f7ff fecb 	bl	80140b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801431a:	69bb      	ldr	r3, [r7, #24]
 801431c:	78fa      	ldrb	r2, [r7, #3]
 801431e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014322:	bf00      	nop
 8014324:	3710      	adds	r7, #16
 8014326:	46bd      	mov	sp, r7
 8014328:	bd80      	pop	{r7, pc}

0801432a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801432a:	b580      	push	{r7, lr}
 801432c:	b086      	sub	sp, #24
 801432e:	af00      	add	r7, sp, #0
 8014330:	6078      	str	r0, [r7, #4]
 8014332:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d10a      	bne.n	8014350 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 801433a:	f04f 0340 	mov.w	r3, #64	; 0x40
 801433e:	f383 8811 	msr	BASEPRI, r3
 8014342:	f3bf 8f6f 	isb	sy
 8014346:	f3bf 8f4f 	dsb	sy
 801434a:	613b      	str	r3, [r7, #16]
}
 801434c:	bf00      	nop
 801434e:	e7fe      	b.n	801434e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8014350:	683a      	ldr	r2, [r7, #0]
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	429a      	cmp	r2, r3
 8014356:	d90a      	bls.n	801436e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8014358:	f04f 0340 	mov.w	r3, #64	; 0x40
 801435c:	f383 8811 	msr	BASEPRI, r3
 8014360:	f3bf 8f6f 	isb	sy
 8014364:	f3bf 8f4f 	dsb	sy
 8014368:	60fb      	str	r3, [r7, #12]
}
 801436a:	bf00      	nop
 801436c:	e7fe      	b.n	801436c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801436e:	2202      	movs	r2, #2
 8014370:	2100      	movs	r1, #0
 8014372:	6878      	ldr	r0, [r7, #4]
 8014374:	f7ff ff7c 	bl	8014270 <xQueueGenericCreate>
 8014378:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801437a:	697b      	ldr	r3, [r7, #20]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d002      	beq.n	8014386 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8014380:	697b      	ldr	r3, [r7, #20]
 8014382:	683a      	ldr	r2, [r7, #0]
 8014384:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8014386:	697b      	ldr	r3, [r7, #20]
	}
 8014388:	4618      	mov	r0, r3
 801438a:	3718      	adds	r7, #24
 801438c:	46bd      	mov	sp, r7
 801438e:	bd80      	pop	{r7, pc}

08014390 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b08e      	sub	sp, #56	; 0x38
 8014394:	af00      	add	r7, sp, #0
 8014396:	60f8      	str	r0, [r7, #12]
 8014398:	60b9      	str	r1, [r7, #8]
 801439a:	607a      	str	r2, [r7, #4]
 801439c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801439e:	2300      	movs	r3, #0
 80143a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80143a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d10a      	bne.n	80143c2 <xQueueGenericSend+0x32>
	__asm volatile
 80143ac:	f04f 0340 	mov.w	r3, #64	; 0x40
 80143b0:	f383 8811 	msr	BASEPRI, r3
 80143b4:	f3bf 8f6f 	isb	sy
 80143b8:	f3bf 8f4f 	dsb	sy
 80143bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80143be:	bf00      	nop
 80143c0:	e7fe      	b.n	80143c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80143c2:	68bb      	ldr	r3, [r7, #8]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d103      	bne.n	80143d0 <xQueueGenericSend+0x40>
 80143c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d101      	bne.n	80143d4 <xQueueGenericSend+0x44>
 80143d0:	2301      	movs	r3, #1
 80143d2:	e000      	b.n	80143d6 <xQueueGenericSend+0x46>
 80143d4:	2300      	movs	r3, #0
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d10a      	bne.n	80143f0 <xQueueGenericSend+0x60>
	__asm volatile
 80143da:	f04f 0340 	mov.w	r3, #64	; 0x40
 80143de:	f383 8811 	msr	BASEPRI, r3
 80143e2:	f3bf 8f6f 	isb	sy
 80143e6:	f3bf 8f4f 	dsb	sy
 80143ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80143ec:	bf00      	nop
 80143ee:	e7fe      	b.n	80143ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80143f0:	683b      	ldr	r3, [r7, #0]
 80143f2:	2b02      	cmp	r3, #2
 80143f4:	d103      	bne.n	80143fe <xQueueGenericSend+0x6e>
 80143f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80143fa:	2b01      	cmp	r3, #1
 80143fc:	d101      	bne.n	8014402 <xQueueGenericSend+0x72>
 80143fe:	2301      	movs	r3, #1
 8014400:	e000      	b.n	8014404 <xQueueGenericSend+0x74>
 8014402:	2300      	movs	r3, #0
 8014404:	2b00      	cmp	r3, #0
 8014406:	d10a      	bne.n	801441e <xQueueGenericSend+0x8e>
	__asm volatile
 8014408:	f04f 0340 	mov.w	r3, #64	; 0x40
 801440c:	f383 8811 	msr	BASEPRI, r3
 8014410:	f3bf 8f6f 	isb	sy
 8014414:	f3bf 8f4f 	dsb	sy
 8014418:	623b      	str	r3, [r7, #32]
}
 801441a:	bf00      	nop
 801441c:	e7fe      	b.n	801441c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801441e:	f001 fc55 	bl	8015ccc <xTaskGetSchedulerState>
 8014422:	4603      	mov	r3, r0
 8014424:	2b00      	cmp	r3, #0
 8014426:	d102      	bne.n	801442e <xQueueGenericSend+0x9e>
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d101      	bne.n	8014432 <xQueueGenericSend+0xa2>
 801442e:	2301      	movs	r3, #1
 8014430:	e000      	b.n	8014434 <xQueueGenericSend+0xa4>
 8014432:	2300      	movs	r3, #0
 8014434:	2b00      	cmp	r3, #0
 8014436:	d10a      	bne.n	801444e <xQueueGenericSend+0xbe>
	__asm volatile
 8014438:	f04f 0340 	mov.w	r3, #64	; 0x40
 801443c:	f383 8811 	msr	BASEPRI, r3
 8014440:	f3bf 8f6f 	isb	sy
 8014444:	f3bf 8f4f 	dsb	sy
 8014448:	61fb      	str	r3, [r7, #28]
}
 801444a:	bf00      	nop
 801444c:	e7fe      	b.n	801444c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801444e:	f002 fa99 	bl	8016984 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801445a:	429a      	cmp	r2, r3
 801445c:	d302      	bcc.n	8014464 <xQueueGenericSend+0xd4>
 801445e:	683b      	ldr	r3, [r7, #0]
 8014460:	2b02      	cmp	r3, #2
 8014462:	d129      	bne.n	80144b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014464:	683a      	ldr	r2, [r7, #0]
 8014466:	68b9      	ldr	r1, [r7, #8]
 8014468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801446a:	f000 fb2f 	bl	8014acc <prvCopyDataToQueue>
 801446e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014474:	2b00      	cmp	r3, #0
 8014476:	d010      	beq.n	801449a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801447a:	3324      	adds	r3, #36	; 0x24
 801447c:	4618      	mov	r0, r3
 801447e:	f001 fa65 	bl	801594c <xTaskRemoveFromEventList>
 8014482:	4603      	mov	r3, r0
 8014484:	2b00      	cmp	r3, #0
 8014486:	d013      	beq.n	80144b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014488:	4b3f      	ldr	r3, [pc, #252]	; (8014588 <xQueueGenericSend+0x1f8>)
 801448a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801448e:	601a      	str	r2, [r3, #0]
 8014490:	f3bf 8f4f 	dsb	sy
 8014494:	f3bf 8f6f 	isb	sy
 8014498:	e00a      	b.n	80144b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801449a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801449c:	2b00      	cmp	r3, #0
 801449e:	d007      	beq.n	80144b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80144a0:	4b39      	ldr	r3, [pc, #228]	; (8014588 <xQueueGenericSend+0x1f8>)
 80144a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144a6:	601a      	str	r2, [r3, #0]
 80144a8:	f3bf 8f4f 	dsb	sy
 80144ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80144b0:	f002 fa98 	bl	80169e4 <vPortExitCritical>
				return pdPASS;
 80144b4:	2301      	movs	r3, #1
 80144b6:	e063      	b.n	8014580 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d103      	bne.n	80144c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80144be:	f002 fa91 	bl	80169e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80144c2:	2300      	movs	r3, #0
 80144c4:	e05c      	b.n	8014580 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80144c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d106      	bne.n	80144da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80144cc:	f107 0314 	add.w	r3, r7, #20
 80144d0:	4618      	mov	r0, r3
 80144d2:	f001 fa9f 	bl	8015a14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80144d6:	2301      	movs	r3, #1
 80144d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80144da:	f002 fa83 	bl	80169e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80144de:	f000 ffed 	bl	80154bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80144e2:	f002 fa4f 	bl	8016984 <vPortEnterCritical>
 80144e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80144ec:	b25b      	sxtb	r3, r3
 80144ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144f2:	d103      	bne.n	80144fc <xQueueGenericSend+0x16c>
 80144f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144f6:	2200      	movs	r2, #0
 80144f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80144fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014502:	b25b      	sxtb	r3, r3
 8014504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014508:	d103      	bne.n	8014512 <xQueueGenericSend+0x182>
 801450a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801450c:	2200      	movs	r2, #0
 801450e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014512:	f002 fa67 	bl	80169e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014516:	1d3a      	adds	r2, r7, #4
 8014518:	f107 0314 	add.w	r3, r7, #20
 801451c:	4611      	mov	r1, r2
 801451e:	4618      	mov	r0, r3
 8014520:	f001 fa8e 	bl	8015a40 <xTaskCheckForTimeOut>
 8014524:	4603      	mov	r3, r0
 8014526:	2b00      	cmp	r3, #0
 8014528:	d124      	bne.n	8014574 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801452a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801452c:	f000 fbc6 	bl	8014cbc <prvIsQueueFull>
 8014530:	4603      	mov	r3, r0
 8014532:	2b00      	cmp	r3, #0
 8014534:	d018      	beq.n	8014568 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014538:	3310      	adds	r3, #16
 801453a:	687a      	ldr	r2, [r7, #4]
 801453c:	4611      	mov	r1, r2
 801453e:	4618      	mov	r0, r3
 8014540:	f001 f9b4 	bl	80158ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014546:	f000 fb51 	bl	8014bec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801454a:	f000 ffc5 	bl	80154d8 <xTaskResumeAll>
 801454e:	4603      	mov	r3, r0
 8014550:	2b00      	cmp	r3, #0
 8014552:	f47f af7c 	bne.w	801444e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8014556:	4b0c      	ldr	r3, [pc, #48]	; (8014588 <xQueueGenericSend+0x1f8>)
 8014558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801455c:	601a      	str	r2, [r3, #0]
 801455e:	f3bf 8f4f 	dsb	sy
 8014562:	f3bf 8f6f 	isb	sy
 8014566:	e772      	b.n	801444e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014568:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801456a:	f000 fb3f 	bl	8014bec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801456e:	f000 ffb3 	bl	80154d8 <xTaskResumeAll>
 8014572:	e76c      	b.n	801444e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014574:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014576:	f000 fb39 	bl	8014bec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801457a:	f000 ffad 	bl	80154d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801457e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014580:	4618      	mov	r0, r3
 8014582:	3738      	adds	r7, #56	; 0x38
 8014584:	46bd      	mov	sp, r7
 8014586:	bd80      	pop	{r7, pc}
 8014588:	e000ed04 	.word	0xe000ed04

0801458c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b090      	sub	sp, #64	; 0x40
 8014590:	af00      	add	r7, sp, #0
 8014592:	60f8      	str	r0, [r7, #12]
 8014594:	60b9      	str	r1, [r7, #8]
 8014596:	607a      	str	r2, [r7, #4]
 8014598:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801459e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d10a      	bne.n	80145ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80145a4:	f04f 0340 	mov.w	r3, #64	; 0x40
 80145a8:	f383 8811 	msr	BASEPRI, r3
 80145ac:	f3bf 8f6f 	isb	sy
 80145b0:	f3bf 8f4f 	dsb	sy
 80145b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80145b6:	bf00      	nop
 80145b8:	e7fe      	b.n	80145b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80145ba:	68bb      	ldr	r3, [r7, #8]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d103      	bne.n	80145c8 <xQueueGenericSendFromISR+0x3c>
 80145c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d101      	bne.n	80145cc <xQueueGenericSendFromISR+0x40>
 80145c8:	2301      	movs	r3, #1
 80145ca:	e000      	b.n	80145ce <xQueueGenericSendFromISR+0x42>
 80145cc:	2300      	movs	r3, #0
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d10a      	bne.n	80145e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80145d2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80145d6:	f383 8811 	msr	BASEPRI, r3
 80145da:	f3bf 8f6f 	isb	sy
 80145de:	f3bf 8f4f 	dsb	sy
 80145e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80145e4:	bf00      	nop
 80145e6:	e7fe      	b.n	80145e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80145e8:	683b      	ldr	r3, [r7, #0]
 80145ea:	2b02      	cmp	r3, #2
 80145ec:	d103      	bne.n	80145f6 <xQueueGenericSendFromISR+0x6a>
 80145ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80145f2:	2b01      	cmp	r3, #1
 80145f4:	d101      	bne.n	80145fa <xQueueGenericSendFromISR+0x6e>
 80145f6:	2301      	movs	r3, #1
 80145f8:	e000      	b.n	80145fc <xQueueGenericSendFromISR+0x70>
 80145fa:	2300      	movs	r3, #0
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d10a      	bne.n	8014616 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8014600:	f04f 0340 	mov.w	r3, #64	; 0x40
 8014604:	f383 8811 	msr	BASEPRI, r3
 8014608:	f3bf 8f6f 	isb	sy
 801460c:	f3bf 8f4f 	dsb	sy
 8014610:	623b      	str	r3, [r7, #32]
}
 8014612:	bf00      	nop
 8014614:	e7fe      	b.n	8014614 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014616:	f002 fa97 	bl	8016b48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801461a:	f3ef 8211 	mrs	r2, BASEPRI
 801461e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8014622:	f383 8811 	msr	BASEPRI, r3
 8014626:	f3bf 8f6f 	isb	sy
 801462a:	f3bf 8f4f 	dsb	sy
 801462e:	61fa      	str	r2, [r7, #28]
 8014630:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014632:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014634:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801463a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801463c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801463e:	429a      	cmp	r2, r3
 8014640:	d302      	bcc.n	8014648 <xQueueGenericSendFromISR+0xbc>
 8014642:	683b      	ldr	r3, [r7, #0]
 8014644:	2b02      	cmp	r3, #2
 8014646:	d12f      	bne.n	80146a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801464a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801464e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014656:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014658:	683a      	ldr	r2, [r7, #0]
 801465a:	68b9      	ldr	r1, [r7, #8]
 801465c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801465e:	f000 fa35 	bl	8014acc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014662:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8014666:	f1b3 3fff 	cmp.w	r3, #4294967295
 801466a:	d112      	bne.n	8014692 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801466c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014670:	2b00      	cmp	r3, #0
 8014672:	d016      	beq.n	80146a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014676:	3324      	adds	r3, #36	; 0x24
 8014678:	4618      	mov	r0, r3
 801467a:	f001 f967 	bl	801594c <xTaskRemoveFromEventList>
 801467e:	4603      	mov	r3, r0
 8014680:	2b00      	cmp	r3, #0
 8014682:	d00e      	beq.n	80146a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d00b      	beq.n	80146a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	2201      	movs	r2, #1
 801468e:	601a      	str	r2, [r3, #0]
 8014690:	e007      	b.n	80146a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014692:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014696:	3301      	adds	r3, #1
 8014698:	b2db      	uxtb	r3, r3
 801469a:	b25a      	sxtb	r2, r3
 801469c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801469e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80146a2:	2301      	movs	r3, #1
 80146a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80146a6:	e001      	b.n	80146ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80146a8:	2300      	movs	r3, #0
 80146aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80146ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80146b0:	697b      	ldr	r3, [r7, #20]
 80146b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80146b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80146b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80146ba:	4618      	mov	r0, r3
 80146bc:	3740      	adds	r7, #64	; 0x40
 80146be:	46bd      	mov	sp, r7
 80146c0:	bd80      	pop	{r7, pc}
	...

080146c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b08c      	sub	sp, #48	; 0x30
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	60f8      	str	r0, [r7, #12]
 80146cc:	60b9      	str	r1, [r7, #8]
 80146ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80146d0:	2300      	movs	r3, #0
 80146d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80146d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d10a      	bne.n	80146f4 <xQueueReceive+0x30>
	__asm volatile
 80146de:	f04f 0340 	mov.w	r3, #64	; 0x40
 80146e2:	f383 8811 	msr	BASEPRI, r3
 80146e6:	f3bf 8f6f 	isb	sy
 80146ea:	f3bf 8f4f 	dsb	sy
 80146ee:	623b      	str	r3, [r7, #32]
}
 80146f0:	bf00      	nop
 80146f2:	e7fe      	b.n	80146f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80146f4:	68bb      	ldr	r3, [r7, #8]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d103      	bne.n	8014702 <xQueueReceive+0x3e>
 80146fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d101      	bne.n	8014706 <xQueueReceive+0x42>
 8014702:	2301      	movs	r3, #1
 8014704:	e000      	b.n	8014708 <xQueueReceive+0x44>
 8014706:	2300      	movs	r3, #0
 8014708:	2b00      	cmp	r3, #0
 801470a:	d10a      	bne.n	8014722 <xQueueReceive+0x5e>
	__asm volatile
 801470c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8014710:	f383 8811 	msr	BASEPRI, r3
 8014714:	f3bf 8f6f 	isb	sy
 8014718:	f3bf 8f4f 	dsb	sy
 801471c:	61fb      	str	r3, [r7, #28]
}
 801471e:	bf00      	nop
 8014720:	e7fe      	b.n	8014720 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014722:	f001 fad3 	bl	8015ccc <xTaskGetSchedulerState>
 8014726:	4603      	mov	r3, r0
 8014728:	2b00      	cmp	r3, #0
 801472a:	d102      	bne.n	8014732 <xQueueReceive+0x6e>
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d101      	bne.n	8014736 <xQueueReceive+0x72>
 8014732:	2301      	movs	r3, #1
 8014734:	e000      	b.n	8014738 <xQueueReceive+0x74>
 8014736:	2300      	movs	r3, #0
 8014738:	2b00      	cmp	r3, #0
 801473a:	d10a      	bne.n	8014752 <xQueueReceive+0x8e>
	__asm volatile
 801473c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8014740:	f383 8811 	msr	BASEPRI, r3
 8014744:	f3bf 8f6f 	isb	sy
 8014748:	f3bf 8f4f 	dsb	sy
 801474c:	61bb      	str	r3, [r7, #24]
}
 801474e:	bf00      	nop
 8014750:	e7fe      	b.n	8014750 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014752:	f002 f917 	bl	8016984 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801475a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801475e:	2b00      	cmp	r3, #0
 8014760:	d01f      	beq.n	80147a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014762:	68b9      	ldr	r1, [r7, #8]
 8014764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014766:	f000 fa1b 	bl	8014ba0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801476c:	1e5a      	subs	r2, r3, #1
 801476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014770:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014774:	691b      	ldr	r3, [r3, #16]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d00f      	beq.n	801479a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801477c:	3310      	adds	r3, #16
 801477e:	4618      	mov	r0, r3
 8014780:	f001 f8e4 	bl	801594c <xTaskRemoveFromEventList>
 8014784:	4603      	mov	r3, r0
 8014786:	2b00      	cmp	r3, #0
 8014788:	d007      	beq.n	801479a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801478a:	4b3d      	ldr	r3, [pc, #244]	; (8014880 <xQueueReceive+0x1bc>)
 801478c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014790:	601a      	str	r2, [r3, #0]
 8014792:	f3bf 8f4f 	dsb	sy
 8014796:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801479a:	f002 f923 	bl	80169e4 <vPortExitCritical>
				return pdPASS;
 801479e:	2301      	movs	r3, #1
 80147a0:	e069      	b.n	8014876 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d103      	bne.n	80147b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80147a8:	f002 f91c 	bl	80169e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80147ac:	2300      	movs	r3, #0
 80147ae:	e062      	b.n	8014876 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80147b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d106      	bne.n	80147c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80147b6:	f107 0310 	add.w	r3, r7, #16
 80147ba:	4618      	mov	r0, r3
 80147bc:	f001 f92a 	bl	8015a14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80147c0:	2301      	movs	r3, #1
 80147c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80147c4:	f002 f90e 	bl	80169e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80147c8:	f000 fe78 	bl	80154bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80147cc:	f002 f8da 	bl	8016984 <vPortEnterCritical>
 80147d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80147d6:	b25b      	sxtb	r3, r3
 80147d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147dc:	d103      	bne.n	80147e6 <xQueueReceive+0x122>
 80147de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147e0:	2200      	movs	r2, #0
 80147e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80147e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80147ec:	b25b      	sxtb	r3, r3
 80147ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147f2:	d103      	bne.n	80147fc <xQueueReceive+0x138>
 80147f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147f6:	2200      	movs	r2, #0
 80147f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80147fc:	f002 f8f2 	bl	80169e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014800:	1d3a      	adds	r2, r7, #4
 8014802:	f107 0310 	add.w	r3, r7, #16
 8014806:	4611      	mov	r1, r2
 8014808:	4618      	mov	r0, r3
 801480a:	f001 f919 	bl	8015a40 <xTaskCheckForTimeOut>
 801480e:	4603      	mov	r3, r0
 8014810:	2b00      	cmp	r3, #0
 8014812:	d123      	bne.n	801485c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014816:	f000 fa3b 	bl	8014c90 <prvIsQueueEmpty>
 801481a:	4603      	mov	r3, r0
 801481c:	2b00      	cmp	r3, #0
 801481e:	d017      	beq.n	8014850 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014822:	3324      	adds	r3, #36	; 0x24
 8014824:	687a      	ldr	r2, [r7, #4]
 8014826:	4611      	mov	r1, r2
 8014828:	4618      	mov	r0, r3
 801482a:	f001 f83f 	bl	80158ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801482e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014830:	f000 f9dc 	bl	8014bec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014834:	f000 fe50 	bl	80154d8 <xTaskResumeAll>
 8014838:	4603      	mov	r3, r0
 801483a:	2b00      	cmp	r3, #0
 801483c:	d189      	bne.n	8014752 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801483e:	4b10      	ldr	r3, [pc, #64]	; (8014880 <xQueueReceive+0x1bc>)
 8014840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014844:	601a      	str	r2, [r3, #0]
 8014846:	f3bf 8f4f 	dsb	sy
 801484a:	f3bf 8f6f 	isb	sy
 801484e:	e780      	b.n	8014752 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014852:	f000 f9cb 	bl	8014bec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014856:	f000 fe3f 	bl	80154d8 <xTaskResumeAll>
 801485a:	e77a      	b.n	8014752 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801485c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801485e:	f000 f9c5 	bl	8014bec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014862:	f000 fe39 	bl	80154d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014866:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014868:	f000 fa12 	bl	8014c90 <prvIsQueueEmpty>
 801486c:	4603      	mov	r3, r0
 801486e:	2b00      	cmp	r3, #0
 8014870:	f43f af6f 	beq.w	8014752 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014874:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014876:	4618      	mov	r0, r3
 8014878:	3730      	adds	r7, #48	; 0x30
 801487a:	46bd      	mov	sp, r7
 801487c:	bd80      	pop	{r7, pc}
 801487e:	bf00      	nop
 8014880:	e000ed04 	.word	0xe000ed04

08014884 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014884:	b580      	push	{r7, lr}
 8014886:	b08e      	sub	sp, #56	; 0x38
 8014888:	af00      	add	r7, sp, #0
 801488a:	6078      	str	r0, [r7, #4]
 801488c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801488e:	2300      	movs	r3, #0
 8014890:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8014896:	2300      	movs	r3, #0
 8014898:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801489c:	2b00      	cmp	r3, #0
 801489e:	d10a      	bne.n	80148b6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80148a0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80148a4:	f383 8811 	msr	BASEPRI, r3
 80148a8:	f3bf 8f6f 	isb	sy
 80148ac:	f3bf 8f4f 	dsb	sy
 80148b0:	623b      	str	r3, [r7, #32]
}
 80148b2:	bf00      	nop
 80148b4:	e7fe      	b.n	80148b4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80148b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d00a      	beq.n	80148d4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80148be:	f04f 0340 	mov.w	r3, #64	; 0x40
 80148c2:	f383 8811 	msr	BASEPRI, r3
 80148c6:	f3bf 8f6f 	isb	sy
 80148ca:	f3bf 8f4f 	dsb	sy
 80148ce:	61fb      	str	r3, [r7, #28]
}
 80148d0:	bf00      	nop
 80148d2:	e7fe      	b.n	80148d2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80148d4:	f001 f9fa 	bl	8015ccc <xTaskGetSchedulerState>
 80148d8:	4603      	mov	r3, r0
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d102      	bne.n	80148e4 <xQueueSemaphoreTake+0x60>
 80148de:	683b      	ldr	r3, [r7, #0]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d101      	bne.n	80148e8 <xQueueSemaphoreTake+0x64>
 80148e4:	2301      	movs	r3, #1
 80148e6:	e000      	b.n	80148ea <xQueueSemaphoreTake+0x66>
 80148e8:	2300      	movs	r3, #0
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d10a      	bne.n	8014904 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80148ee:	f04f 0340 	mov.w	r3, #64	; 0x40
 80148f2:	f383 8811 	msr	BASEPRI, r3
 80148f6:	f3bf 8f6f 	isb	sy
 80148fa:	f3bf 8f4f 	dsb	sy
 80148fe:	61bb      	str	r3, [r7, #24]
}
 8014900:	bf00      	nop
 8014902:	e7fe      	b.n	8014902 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014904:	f002 f83e 	bl	8016984 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801490c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014910:	2b00      	cmp	r3, #0
 8014912:	d024      	beq.n	801495e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014916:	1e5a      	subs	r2, r3, #1
 8014918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801491a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801491c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d104      	bne.n	801492e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8014924:	f001 fb48 	bl	8015fb8 <pvTaskIncrementMutexHeldCount>
 8014928:	4602      	mov	r2, r0
 801492a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801492c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801492e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014930:	691b      	ldr	r3, [r3, #16]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d00f      	beq.n	8014956 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014938:	3310      	adds	r3, #16
 801493a:	4618      	mov	r0, r3
 801493c:	f001 f806 	bl	801594c <xTaskRemoveFromEventList>
 8014940:	4603      	mov	r3, r0
 8014942:	2b00      	cmp	r3, #0
 8014944:	d007      	beq.n	8014956 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014946:	4b54      	ldr	r3, [pc, #336]	; (8014a98 <xQueueSemaphoreTake+0x214>)
 8014948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801494c:	601a      	str	r2, [r3, #0]
 801494e:	f3bf 8f4f 	dsb	sy
 8014952:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014956:	f002 f845 	bl	80169e4 <vPortExitCritical>
				return pdPASS;
 801495a:	2301      	movs	r3, #1
 801495c:	e097      	b.n	8014a8e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801495e:	683b      	ldr	r3, [r7, #0]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d111      	bne.n	8014988 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8014964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014966:	2b00      	cmp	r3, #0
 8014968:	d00a      	beq.n	8014980 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801496a:	f04f 0340 	mov.w	r3, #64	; 0x40
 801496e:	f383 8811 	msr	BASEPRI, r3
 8014972:	f3bf 8f6f 	isb	sy
 8014976:	f3bf 8f4f 	dsb	sy
 801497a:	617b      	str	r3, [r7, #20]
}
 801497c:	bf00      	nop
 801497e:	e7fe      	b.n	801497e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8014980:	f002 f830 	bl	80169e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014984:	2300      	movs	r3, #0
 8014986:	e082      	b.n	8014a8e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801498a:	2b00      	cmp	r3, #0
 801498c:	d106      	bne.n	801499c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801498e:	f107 030c 	add.w	r3, r7, #12
 8014992:	4618      	mov	r0, r3
 8014994:	f001 f83e 	bl	8015a14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014998:	2301      	movs	r3, #1
 801499a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801499c:	f002 f822 	bl	80169e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80149a0:	f000 fd8c 	bl	80154bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80149a4:	f001 ffee 	bl	8016984 <vPortEnterCritical>
 80149a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80149ae:	b25b      	sxtb	r3, r3
 80149b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149b4:	d103      	bne.n	80149be <xQueueSemaphoreTake+0x13a>
 80149b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149b8:	2200      	movs	r2, #0
 80149ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80149be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80149c4:	b25b      	sxtb	r3, r3
 80149c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149ca:	d103      	bne.n	80149d4 <xQueueSemaphoreTake+0x150>
 80149cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149ce:	2200      	movs	r2, #0
 80149d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80149d4:	f002 f806 	bl	80169e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80149d8:	463a      	mov	r2, r7
 80149da:	f107 030c 	add.w	r3, r7, #12
 80149de:	4611      	mov	r1, r2
 80149e0:	4618      	mov	r0, r3
 80149e2:	f001 f82d 	bl	8015a40 <xTaskCheckForTimeOut>
 80149e6:	4603      	mov	r3, r0
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d132      	bne.n	8014a52 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80149ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80149ee:	f000 f94f 	bl	8014c90 <prvIsQueueEmpty>
 80149f2:	4603      	mov	r3, r0
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d026      	beq.n	8014a46 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80149f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d109      	bne.n	8014a14 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8014a00:	f001 ffc0 	bl	8016984 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a06:	689b      	ldr	r3, [r3, #8]
 8014a08:	4618      	mov	r0, r3
 8014a0a:	f001 f97d 	bl	8015d08 <xTaskPriorityInherit>
 8014a0e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8014a10:	f001 ffe8 	bl	80169e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a16:	3324      	adds	r3, #36	; 0x24
 8014a18:	683a      	ldr	r2, [r7, #0]
 8014a1a:	4611      	mov	r1, r2
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	f000 ff45 	bl	80158ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014a22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014a24:	f000 f8e2 	bl	8014bec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014a28:	f000 fd56 	bl	80154d8 <xTaskResumeAll>
 8014a2c:	4603      	mov	r3, r0
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	f47f af68 	bne.w	8014904 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8014a34:	4b18      	ldr	r3, [pc, #96]	; (8014a98 <xQueueSemaphoreTake+0x214>)
 8014a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a3a:	601a      	str	r2, [r3, #0]
 8014a3c:	f3bf 8f4f 	dsb	sy
 8014a40:	f3bf 8f6f 	isb	sy
 8014a44:	e75e      	b.n	8014904 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8014a46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014a48:	f000 f8d0 	bl	8014bec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014a4c:	f000 fd44 	bl	80154d8 <xTaskResumeAll>
 8014a50:	e758      	b.n	8014904 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8014a52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014a54:	f000 f8ca 	bl	8014bec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014a58:	f000 fd3e 	bl	80154d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014a5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014a5e:	f000 f917 	bl	8014c90 <prvIsQueueEmpty>
 8014a62:	4603      	mov	r3, r0
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	f43f af4d 	beq.w	8014904 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8014a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d00d      	beq.n	8014a8c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8014a70:	f001 ff88 	bl	8016984 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014a74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014a76:	f000 f811 	bl	8014a9c <prvGetDisinheritPriorityAfterTimeout>
 8014a7a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a7e:	689b      	ldr	r3, [r3, #8]
 8014a80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014a82:	4618      	mov	r0, r3
 8014a84:	f001 fa16 	bl	8015eb4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8014a88:	f001 ffac 	bl	80169e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014a8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014a8e:	4618      	mov	r0, r3
 8014a90:	3738      	adds	r7, #56	; 0x38
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bd80      	pop	{r7, pc}
 8014a96:	bf00      	nop
 8014a98:	e000ed04 	.word	0xe000ed04

08014a9c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014a9c:	b480      	push	{r7}
 8014a9e:	b085      	sub	sp, #20
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d006      	beq.n	8014aba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8014ab6:	60fb      	str	r3, [r7, #12]
 8014ab8:	e001      	b.n	8014abe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014aba:	2300      	movs	r3, #0
 8014abc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014abe:	68fb      	ldr	r3, [r7, #12]
	}
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	3714      	adds	r7, #20
 8014ac4:	46bd      	mov	sp, r7
 8014ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aca:	4770      	bx	lr

08014acc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b086      	sub	sp, #24
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	60f8      	str	r0, [r7, #12]
 8014ad4:	60b9      	str	r1, [r7, #8]
 8014ad6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014ad8:	2300      	movs	r3, #0
 8014ada:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ae0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d10d      	bne.n	8014b06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d14d      	bne.n	8014b8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	689b      	ldr	r3, [r3, #8]
 8014af6:	4618      	mov	r0, r3
 8014af8:	f001 f96e 	bl	8015dd8 <xTaskPriorityDisinherit>
 8014afc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	2200      	movs	r2, #0
 8014b02:	609a      	str	r2, [r3, #8]
 8014b04:	e043      	b.n	8014b8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d119      	bne.n	8014b40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	6858      	ldr	r0, [r3, #4]
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b14:	461a      	mov	r2, r3
 8014b16:	68b9      	ldr	r1, [r7, #8]
 8014b18:	f005 fb02 	bl	801a120 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	685a      	ldr	r2, [r3, #4]
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b24:	441a      	add	r2, r3
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	685a      	ldr	r2, [r3, #4]
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	689b      	ldr	r3, [r3, #8]
 8014b32:	429a      	cmp	r2, r3
 8014b34:	d32b      	bcc.n	8014b8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	681a      	ldr	r2, [r3, #0]
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	605a      	str	r2, [r3, #4]
 8014b3e:	e026      	b.n	8014b8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	68d8      	ldr	r0, [r3, #12]
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b48:	461a      	mov	r2, r3
 8014b4a:	68b9      	ldr	r1, [r7, #8]
 8014b4c:	f005 fae8 	bl	801a120 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	68da      	ldr	r2, [r3, #12]
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b58:	425b      	negs	r3, r3
 8014b5a:	441a      	add	r2, r3
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	68da      	ldr	r2, [r3, #12]
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	429a      	cmp	r2, r3
 8014b6a:	d207      	bcs.n	8014b7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	689a      	ldr	r2, [r3, #8]
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b74:	425b      	negs	r3, r3
 8014b76:	441a      	add	r2, r3
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	2b02      	cmp	r3, #2
 8014b80:	d105      	bne.n	8014b8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014b82:	693b      	ldr	r3, [r7, #16]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d002      	beq.n	8014b8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014b88:	693b      	ldr	r3, [r7, #16]
 8014b8a:	3b01      	subs	r3, #1
 8014b8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014b8e:	693b      	ldr	r3, [r7, #16]
 8014b90:	1c5a      	adds	r2, r3, #1
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014b96:	697b      	ldr	r3, [r7, #20]
}
 8014b98:	4618      	mov	r0, r3
 8014b9a:	3718      	adds	r7, #24
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	bd80      	pop	{r7, pc}

08014ba0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b082      	sub	sp, #8
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
 8014ba8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d018      	beq.n	8014be4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	68da      	ldr	r2, [r3, #12]
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bba:	441a      	add	r2, r3
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	68da      	ldr	r2, [r3, #12]
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	689b      	ldr	r3, [r3, #8]
 8014bc8:	429a      	cmp	r2, r3
 8014bca:	d303      	bcc.n	8014bd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	681a      	ldr	r2, [r3, #0]
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	68d9      	ldr	r1, [r3, #12]
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bdc:	461a      	mov	r2, r3
 8014bde:	6838      	ldr	r0, [r7, #0]
 8014be0:	f005 fa9e 	bl	801a120 <memcpy>
	}
}
 8014be4:	bf00      	nop
 8014be6:	3708      	adds	r7, #8
 8014be8:	46bd      	mov	sp, r7
 8014bea:	bd80      	pop	{r7, pc}

08014bec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b084      	sub	sp, #16
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014bf4:	f001 fec6 	bl	8016984 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014bfe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014c00:	e011      	b.n	8014c26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d012      	beq.n	8014c30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	3324      	adds	r3, #36	; 0x24
 8014c0e:	4618      	mov	r0, r3
 8014c10:	f000 fe9c 	bl	801594c <xTaskRemoveFromEventList>
 8014c14:	4603      	mov	r3, r0
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d001      	beq.n	8014c1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014c1a:	f000 ff73 	bl	8015b04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014c1e:	7bfb      	ldrb	r3, [r7, #15]
 8014c20:	3b01      	subs	r3, #1
 8014c22:	b2db      	uxtb	r3, r3
 8014c24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	dce9      	bgt.n	8014c02 <prvUnlockQueue+0x16>
 8014c2e:	e000      	b.n	8014c32 <prvUnlockQueue+0x46>
					break;
 8014c30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	22ff      	movs	r2, #255	; 0xff
 8014c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014c3a:	f001 fed3 	bl	80169e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014c3e:	f001 fea1 	bl	8016984 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014c48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014c4a:	e011      	b.n	8014c70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	691b      	ldr	r3, [r3, #16]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d012      	beq.n	8014c7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	3310      	adds	r3, #16
 8014c58:	4618      	mov	r0, r3
 8014c5a:	f000 fe77 	bl	801594c <xTaskRemoveFromEventList>
 8014c5e:	4603      	mov	r3, r0
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d001      	beq.n	8014c68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014c64:	f000 ff4e 	bl	8015b04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014c68:	7bbb      	ldrb	r3, [r7, #14]
 8014c6a:	3b01      	subs	r3, #1
 8014c6c:	b2db      	uxtb	r3, r3
 8014c6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014c70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	dce9      	bgt.n	8014c4c <prvUnlockQueue+0x60>
 8014c78:	e000      	b.n	8014c7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014c7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	22ff      	movs	r2, #255	; 0xff
 8014c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014c84:	f001 feae 	bl	80169e4 <vPortExitCritical>
}
 8014c88:	bf00      	nop
 8014c8a:	3710      	adds	r7, #16
 8014c8c:	46bd      	mov	sp, r7
 8014c8e:	bd80      	pop	{r7, pc}

08014c90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014c90:	b580      	push	{r7, lr}
 8014c92:	b084      	sub	sp, #16
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014c98:	f001 fe74 	bl	8016984 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d102      	bne.n	8014caa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014ca4:	2301      	movs	r3, #1
 8014ca6:	60fb      	str	r3, [r7, #12]
 8014ca8:	e001      	b.n	8014cae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014caa:	2300      	movs	r3, #0
 8014cac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014cae:	f001 fe99 	bl	80169e4 <vPortExitCritical>

	return xReturn;
 8014cb2:	68fb      	ldr	r3, [r7, #12]
}
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	3710      	adds	r7, #16
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	bd80      	pop	{r7, pc}

08014cbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b084      	sub	sp, #16
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014cc4:	f001 fe5e 	bl	8016984 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014cd0:	429a      	cmp	r2, r3
 8014cd2:	d102      	bne.n	8014cda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014cd4:	2301      	movs	r3, #1
 8014cd6:	60fb      	str	r3, [r7, #12]
 8014cd8:	e001      	b.n	8014cde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014cda:	2300      	movs	r3, #0
 8014cdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014cde:	f001 fe81 	bl	80169e4 <vPortExitCritical>

	return xReturn;
 8014ce2:	68fb      	ldr	r3, [r7, #12]
}
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	3710      	adds	r7, #16
 8014ce8:	46bd      	mov	sp, r7
 8014cea:	bd80      	pop	{r7, pc}

08014cec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014cec:	b480      	push	{r7}
 8014cee:	b085      	sub	sp, #20
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
 8014cf4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	60fb      	str	r3, [r7, #12]
 8014cfa:	e014      	b.n	8014d26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014cfc:	4a0f      	ldr	r2, [pc, #60]	; (8014d3c <vQueueAddToRegistry+0x50>)
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d10b      	bne.n	8014d20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014d08:	490c      	ldr	r1, [pc, #48]	; (8014d3c <vQueueAddToRegistry+0x50>)
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	683a      	ldr	r2, [r7, #0]
 8014d0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014d12:	4a0a      	ldr	r2, [pc, #40]	; (8014d3c <vQueueAddToRegistry+0x50>)
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	00db      	lsls	r3, r3, #3
 8014d18:	4413      	add	r3, r2
 8014d1a:	687a      	ldr	r2, [r7, #4]
 8014d1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014d1e:	e006      	b.n	8014d2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	3301      	adds	r3, #1
 8014d24:	60fb      	str	r3, [r7, #12]
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	2b07      	cmp	r3, #7
 8014d2a:	d9e7      	bls.n	8014cfc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014d2c:	bf00      	nop
 8014d2e:	bf00      	nop
 8014d30:	3714      	adds	r7, #20
 8014d32:	46bd      	mov	sp, r7
 8014d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d38:	4770      	bx	lr
 8014d3a:	bf00      	nop
 8014d3c:	2000af60 	.word	0x2000af60

08014d40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014d40:	b580      	push	{r7, lr}
 8014d42:	b086      	sub	sp, #24
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	60f8      	str	r0, [r7, #12]
 8014d48:	60b9      	str	r1, [r7, #8]
 8014d4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014d50:	f001 fe18 	bl	8016984 <vPortEnterCritical>
 8014d54:	697b      	ldr	r3, [r7, #20]
 8014d56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014d5a:	b25b      	sxtb	r3, r3
 8014d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d60:	d103      	bne.n	8014d6a <vQueueWaitForMessageRestricted+0x2a>
 8014d62:	697b      	ldr	r3, [r7, #20]
 8014d64:	2200      	movs	r2, #0
 8014d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014d6a:	697b      	ldr	r3, [r7, #20]
 8014d6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014d70:	b25b      	sxtb	r3, r3
 8014d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d76:	d103      	bne.n	8014d80 <vQueueWaitForMessageRestricted+0x40>
 8014d78:	697b      	ldr	r3, [r7, #20]
 8014d7a:	2200      	movs	r2, #0
 8014d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014d80:	f001 fe30 	bl	80169e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014d84:	697b      	ldr	r3, [r7, #20]
 8014d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d106      	bne.n	8014d9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014d8c:	697b      	ldr	r3, [r7, #20]
 8014d8e:	3324      	adds	r3, #36	; 0x24
 8014d90:	687a      	ldr	r2, [r7, #4]
 8014d92:	68b9      	ldr	r1, [r7, #8]
 8014d94:	4618      	mov	r0, r3
 8014d96:	f000 fdad 	bl	80158f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014d9a:	6978      	ldr	r0, [r7, #20]
 8014d9c:	f7ff ff26 	bl	8014bec <prvUnlockQueue>
	}
 8014da0:	bf00      	nop
 8014da2:	3718      	adds	r7, #24
 8014da4:	46bd      	mov	sp, r7
 8014da6:	bd80      	pop	{r7, pc}

08014da8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b08e      	sub	sp, #56	; 0x38
 8014dac:	af04      	add	r7, sp, #16
 8014dae:	60f8      	str	r0, [r7, #12]
 8014db0:	60b9      	str	r1, [r7, #8]
 8014db2:	607a      	str	r2, [r7, #4]
 8014db4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d10a      	bne.n	8014dd2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8014dbc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8014dc0:	f383 8811 	msr	BASEPRI, r3
 8014dc4:	f3bf 8f6f 	isb	sy
 8014dc8:	f3bf 8f4f 	dsb	sy
 8014dcc:	623b      	str	r3, [r7, #32]
}
 8014dce:	bf00      	nop
 8014dd0:	e7fe      	b.n	8014dd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d10a      	bne.n	8014dee <xTaskCreateStatic+0x46>
	__asm volatile
 8014dd8:	f04f 0340 	mov.w	r3, #64	; 0x40
 8014ddc:	f383 8811 	msr	BASEPRI, r3
 8014de0:	f3bf 8f6f 	isb	sy
 8014de4:	f3bf 8f4f 	dsb	sy
 8014de8:	61fb      	str	r3, [r7, #28]
}
 8014dea:	bf00      	nop
 8014dec:	e7fe      	b.n	8014dec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014dee:	235c      	movs	r3, #92	; 0x5c
 8014df0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014df2:	693b      	ldr	r3, [r7, #16]
 8014df4:	2b5c      	cmp	r3, #92	; 0x5c
 8014df6:	d00a      	beq.n	8014e0e <xTaskCreateStatic+0x66>
	__asm volatile
 8014df8:	f04f 0340 	mov.w	r3, #64	; 0x40
 8014dfc:	f383 8811 	msr	BASEPRI, r3
 8014e00:	f3bf 8f6f 	isb	sy
 8014e04:	f3bf 8f4f 	dsb	sy
 8014e08:	61bb      	str	r3, [r7, #24]
}
 8014e0a:	bf00      	nop
 8014e0c:	e7fe      	b.n	8014e0c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014e0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d01e      	beq.n	8014e54 <xTaskCreateStatic+0xac>
 8014e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d01b      	beq.n	8014e54 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014e24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e28:	2202      	movs	r2, #2
 8014e2a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014e2e:	2300      	movs	r3, #0
 8014e30:	9303      	str	r3, [sp, #12]
 8014e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e34:	9302      	str	r3, [sp, #8]
 8014e36:	f107 0314 	add.w	r3, r7, #20
 8014e3a:	9301      	str	r3, [sp, #4]
 8014e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e3e:	9300      	str	r3, [sp, #0]
 8014e40:	683b      	ldr	r3, [r7, #0]
 8014e42:	687a      	ldr	r2, [r7, #4]
 8014e44:	68b9      	ldr	r1, [r7, #8]
 8014e46:	68f8      	ldr	r0, [r7, #12]
 8014e48:	f000 f850 	bl	8014eec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014e4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014e4e:	f000 f8dd 	bl	801500c <prvAddNewTaskToReadyList>
 8014e52:	e001      	b.n	8014e58 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014e54:	2300      	movs	r3, #0
 8014e56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014e58:	697b      	ldr	r3, [r7, #20]
	}
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	3728      	adds	r7, #40	; 0x28
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	bd80      	pop	{r7, pc}

08014e62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014e62:	b580      	push	{r7, lr}
 8014e64:	b08c      	sub	sp, #48	; 0x30
 8014e66:	af04      	add	r7, sp, #16
 8014e68:	60f8      	str	r0, [r7, #12]
 8014e6a:	60b9      	str	r1, [r7, #8]
 8014e6c:	603b      	str	r3, [r7, #0]
 8014e6e:	4613      	mov	r3, r2
 8014e70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014e72:	88fb      	ldrh	r3, [r7, #6]
 8014e74:	009b      	lsls	r3, r3, #2
 8014e76:	4618      	mov	r0, r3
 8014e78:	f001 fea6 	bl	8016bc8 <pvPortMalloc>
 8014e7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014e7e:	697b      	ldr	r3, [r7, #20]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d00e      	beq.n	8014ea2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014e84:	205c      	movs	r0, #92	; 0x5c
 8014e86:	f001 fe9f 	bl	8016bc8 <pvPortMalloc>
 8014e8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014e8c:	69fb      	ldr	r3, [r7, #28]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d003      	beq.n	8014e9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014e92:	69fb      	ldr	r3, [r7, #28]
 8014e94:	697a      	ldr	r2, [r7, #20]
 8014e96:	631a      	str	r2, [r3, #48]	; 0x30
 8014e98:	e005      	b.n	8014ea6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014e9a:	6978      	ldr	r0, [r7, #20]
 8014e9c:	f001 ff64 	bl	8016d68 <vPortFree>
 8014ea0:	e001      	b.n	8014ea6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014ea6:	69fb      	ldr	r3, [r7, #28]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d017      	beq.n	8014edc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014eac:	69fb      	ldr	r3, [r7, #28]
 8014eae:	2200      	movs	r2, #0
 8014eb0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014eb4:	88fa      	ldrh	r2, [r7, #6]
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	9303      	str	r3, [sp, #12]
 8014eba:	69fb      	ldr	r3, [r7, #28]
 8014ebc:	9302      	str	r3, [sp, #8]
 8014ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ec0:	9301      	str	r3, [sp, #4]
 8014ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ec4:	9300      	str	r3, [sp, #0]
 8014ec6:	683b      	ldr	r3, [r7, #0]
 8014ec8:	68b9      	ldr	r1, [r7, #8]
 8014eca:	68f8      	ldr	r0, [r7, #12]
 8014ecc:	f000 f80e 	bl	8014eec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014ed0:	69f8      	ldr	r0, [r7, #28]
 8014ed2:	f000 f89b 	bl	801500c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014ed6:	2301      	movs	r3, #1
 8014ed8:	61bb      	str	r3, [r7, #24]
 8014eda:	e002      	b.n	8014ee2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014edc:	f04f 33ff 	mov.w	r3, #4294967295
 8014ee0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014ee2:	69bb      	ldr	r3, [r7, #24]
	}
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	3720      	adds	r7, #32
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	bd80      	pop	{r7, pc}

08014eec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b088      	sub	sp, #32
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	60f8      	str	r0, [r7, #12]
 8014ef4:	60b9      	str	r1, [r7, #8]
 8014ef6:	607a      	str	r2, [r7, #4]
 8014ef8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014efc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	009b      	lsls	r3, r3, #2
 8014f02:	461a      	mov	r2, r3
 8014f04:	21a5      	movs	r1, #165	; 0xa5
 8014f06:	f005 f919 	bl	801a13c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014f14:	3b01      	subs	r3, #1
 8014f16:	009b      	lsls	r3, r3, #2
 8014f18:	4413      	add	r3, r2
 8014f1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014f1c:	69bb      	ldr	r3, [r7, #24]
 8014f1e:	f023 0307 	bic.w	r3, r3, #7
 8014f22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014f24:	69bb      	ldr	r3, [r7, #24]
 8014f26:	f003 0307 	and.w	r3, r3, #7
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d00a      	beq.n	8014f44 <prvInitialiseNewTask+0x58>
	__asm volatile
 8014f2e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8014f32:	f383 8811 	msr	BASEPRI, r3
 8014f36:	f3bf 8f6f 	isb	sy
 8014f3a:	f3bf 8f4f 	dsb	sy
 8014f3e:	617b      	str	r3, [r7, #20]
}
 8014f40:	bf00      	nop
 8014f42:	e7fe      	b.n	8014f42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014f44:	68bb      	ldr	r3, [r7, #8]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d01f      	beq.n	8014f8a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	61fb      	str	r3, [r7, #28]
 8014f4e:	e012      	b.n	8014f76 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014f50:	68ba      	ldr	r2, [r7, #8]
 8014f52:	69fb      	ldr	r3, [r7, #28]
 8014f54:	4413      	add	r3, r2
 8014f56:	7819      	ldrb	r1, [r3, #0]
 8014f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f5a:	69fb      	ldr	r3, [r7, #28]
 8014f5c:	4413      	add	r3, r2
 8014f5e:	3334      	adds	r3, #52	; 0x34
 8014f60:	460a      	mov	r2, r1
 8014f62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014f64:	68ba      	ldr	r2, [r7, #8]
 8014f66:	69fb      	ldr	r3, [r7, #28]
 8014f68:	4413      	add	r3, r2
 8014f6a:	781b      	ldrb	r3, [r3, #0]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d006      	beq.n	8014f7e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014f70:	69fb      	ldr	r3, [r7, #28]
 8014f72:	3301      	adds	r3, #1
 8014f74:	61fb      	str	r3, [r7, #28]
 8014f76:	69fb      	ldr	r3, [r7, #28]
 8014f78:	2b0f      	cmp	r3, #15
 8014f7a:	d9e9      	bls.n	8014f50 <prvInitialiseNewTask+0x64>
 8014f7c:	e000      	b.n	8014f80 <prvInitialiseNewTask+0x94>
			{
				break;
 8014f7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f82:	2200      	movs	r2, #0
 8014f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014f88:	e003      	b.n	8014f92 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f94:	2b37      	cmp	r3, #55	; 0x37
 8014f96:	d901      	bls.n	8014f9c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014f98:	2337      	movs	r3, #55	; 0x37
 8014f9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014fa0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014fa6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014faa:	2200      	movs	r2, #0
 8014fac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fb0:	3304      	adds	r3, #4
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	f7fe ffe8 	bl	8013f88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fba:	3318      	adds	r3, #24
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	f7fe ffe3 	bl	8013f88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014fc6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fd0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014fd6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fda:	2200      	movs	r2, #0
 8014fdc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fe0:	2200      	movs	r2, #0
 8014fe2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014fe6:	683a      	ldr	r2, [r7, #0]
 8014fe8:	68f9      	ldr	r1, [r7, #12]
 8014fea:	69b8      	ldr	r0, [r7, #24]
 8014fec:	f001 fb9a 	bl	8016724 <pxPortInitialiseStack>
 8014ff0:	4602      	mov	r2, r0
 8014ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ff4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d002      	beq.n	8015002 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015000:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015002:	bf00      	nop
 8015004:	3720      	adds	r7, #32
 8015006:	46bd      	mov	sp, r7
 8015008:	bd80      	pop	{r7, pc}
	...

0801500c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801500c:	b580      	push	{r7, lr}
 801500e:	b082      	sub	sp, #8
 8015010:	af00      	add	r7, sp, #0
 8015012:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015014:	f001 fcb6 	bl	8016984 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015018:	4b2d      	ldr	r3, [pc, #180]	; (80150d0 <prvAddNewTaskToReadyList+0xc4>)
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	3301      	adds	r3, #1
 801501e:	4a2c      	ldr	r2, [pc, #176]	; (80150d0 <prvAddNewTaskToReadyList+0xc4>)
 8015020:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015022:	4b2c      	ldr	r3, [pc, #176]	; (80150d4 <prvAddNewTaskToReadyList+0xc8>)
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	2b00      	cmp	r3, #0
 8015028:	d109      	bne.n	801503e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801502a:	4a2a      	ldr	r2, [pc, #168]	; (80150d4 <prvAddNewTaskToReadyList+0xc8>)
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015030:	4b27      	ldr	r3, [pc, #156]	; (80150d0 <prvAddNewTaskToReadyList+0xc4>)
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	2b01      	cmp	r3, #1
 8015036:	d110      	bne.n	801505a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015038:	f000 fd8a 	bl	8015b50 <prvInitialiseTaskLists>
 801503c:	e00d      	b.n	801505a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801503e:	4b26      	ldr	r3, [pc, #152]	; (80150d8 <prvAddNewTaskToReadyList+0xcc>)
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	2b00      	cmp	r3, #0
 8015044:	d109      	bne.n	801505a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015046:	4b23      	ldr	r3, [pc, #140]	; (80150d4 <prvAddNewTaskToReadyList+0xc8>)
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015050:	429a      	cmp	r2, r3
 8015052:	d802      	bhi.n	801505a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015054:	4a1f      	ldr	r2, [pc, #124]	; (80150d4 <prvAddNewTaskToReadyList+0xc8>)
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801505a:	4b20      	ldr	r3, [pc, #128]	; (80150dc <prvAddNewTaskToReadyList+0xd0>)
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	3301      	adds	r3, #1
 8015060:	4a1e      	ldr	r2, [pc, #120]	; (80150dc <prvAddNewTaskToReadyList+0xd0>)
 8015062:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8015064:	4b1d      	ldr	r3, [pc, #116]	; (80150dc <prvAddNewTaskToReadyList+0xd0>)
 8015066:	681a      	ldr	r2, [r3, #0]
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015070:	4b1b      	ldr	r3, [pc, #108]	; (80150e0 <prvAddNewTaskToReadyList+0xd4>)
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	429a      	cmp	r2, r3
 8015076:	d903      	bls.n	8015080 <prvAddNewTaskToReadyList+0x74>
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801507c:	4a18      	ldr	r2, [pc, #96]	; (80150e0 <prvAddNewTaskToReadyList+0xd4>)
 801507e:	6013      	str	r3, [r2, #0]
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015084:	4613      	mov	r3, r2
 8015086:	009b      	lsls	r3, r3, #2
 8015088:	4413      	add	r3, r2
 801508a:	009b      	lsls	r3, r3, #2
 801508c:	4a15      	ldr	r2, [pc, #84]	; (80150e4 <prvAddNewTaskToReadyList+0xd8>)
 801508e:	441a      	add	r2, r3
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	3304      	adds	r3, #4
 8015094:	4619      	mov	r1, r3
 8015096:	4610      	mov	r0, r2
 8015098:	f7fe ff83 	bl	8013fa2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801509c:	f001 fca2 	bl	80169e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80150a0:	4b0d      	ldr	r3, [pc, #52]	; (80150d8 <prvAddNewTaskToReadyList+0xcc>)
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d00e      	beq.n	80150c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80150a8:	4b0a      	ldr	r3, [pc, #40]	; (80150d4 <prvAddNewTaskToReadyList+0xc8>)
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150b2:	429a      	cmp	r2, r3
 80150b4:	d207      	bcs.n	80150c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80150b6:	4b0c      	ldr	r3, [pc, #48]	; (80150e8 <prvAddNewTaskToReadyList+0xdc>)
 80150b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150bc:	601a      	str	r2, [r3, #0]
 80150be:	f3bf 8f4f 	dsb	sy
 80150c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80150c6:	bf00      	nop
 80150c8:	3708      	adds	r7, #8
 80150ca:	46bd      	mov	sp, r7
 80150cc:	bd80      	pop	{r7, pc}
 80150ce:	bf00      	nop
 80150d0:	20000cb8 	.word	0x20000cb8
 80150d4:	200007e4 	.word	0x200007e4
 80150d8:	20000cc4 	.word	0x20000cc4
 80150dc:	20000cd4 	.word	0x20000cd4
 80150e0:	20000cc0 	.word	0x20000cc0
 80150e4:	200007e8 	.word	0x200007e8
 80150e8:	e000ed04 	.word	0xe000ed04

080150ec <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b084      	sub	sp, #16
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80150f4:	f001 fc46 	bl	8016984 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d102      	bne.n	8015104 <vTaskDelete+0x18>
 80150fe:	4b2c      	ldr	r3, [pc, #176]	; (80151b0 <vTaskDelete+0xc4>)
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	e000      	b.n	8015106 <vTaskDelete+0x1a>
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	3304      	adds	r3, #4
 801510c:	4618      	mov	r0, r3
 801510e:	f7fe ffa5 	bl	801405c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015116:	2b00      	cmp	r3, #0
 8015118:	d004      	beq.n	8015124 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	3318      	adds	r3, #24
 801511e:	4618      	mov	r0, r3
 8015120:	f7fe ff9c 	bl	801405c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8015124:	4b23      	ldr	r3, [pc, #140]	; (80151b4 <vTaskDelete+0xc8>)
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	3301      	adds	r3, #1
 801512a:	4a22      	ldr	r2, [pc, #136]	; (80151b4 <vTaskDelete+0xc8>)
 801512c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801512e:	4b20      	ldr	r3, [pc, #128]	; (80151b0 <vTaskDelete+0xc4>)
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	68fa      	ldr	r2, [r7, #12]
 8015134:	429a      	cmp	r2, r3
 8015136:	d10b      	bne.n	8015150 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	3304      	adds	r3, #4
 801513c:	4619      	mov	r1, r3
 801513e:	481e      	ldr	r0, [pc, #120]	; (80151b8 <vTaskDelete+0xcc>)
 8015140:	f7fe ff2f 	bl	8013fa2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8015144:	4b1d      	ldr	r3, [pc, #116]	; (80151bc <vTaskDelete+0xd0>)
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	3301      	adds	r3, #1
 801514a:	4a1c      	ldr	r2, [pc, #112]	; (80151bc <vTaskDelete+0xd0>)
 801514c:	6013      	str	r3, [r2, #0]
 801514e:	e009      	b.n	8015164 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8015150:	4b1b      	ldr	r3, [pc, #108]	; (80151c0 <vTaskDelete+0xd4>)
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	3b01      	subs	r3, #1
 8015156:	4a1a      	ldr	r2, [pc, #104]	; (80151c0 <vTaskDelete+0xd4>)
 8015158:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801515a:	68f8      	ldr	r0, [r7, #12]
 801515c:	f000 fd66 	bl	8015c2c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8015160:	f000 fd94 	bl	8015c8c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8015164:	f001 fc3e 	bl	80169e4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8015168:	4b16      	ldr	r3, [pc, #88]	; (80151c4 <vTaskDelete+0xd8>)
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d01b      	beq.n	80151a8 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8015170:	4b0f      	ldr	r3, [pc, #60]	; (80151b0 <vTaskDelete+0xc4>)
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	68fa      	ldr	r2, [r7, #12]
 8015176:	429a      	cmp	r2, r3
 8015178:	d116      	bne.n	80151a8 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801517a:	4b13      	ldr	r3, [pc, #76]	; (80151c8 <vTaskDelete+0xdc>)
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	2b00      	cmp	r3, #0
 8015180:	d00a      	beq.n	8015198 <vTaskDelete+0xac>
	__asm volatile
 8015182:	f04f 0340 	mov.w	r3, #64	; 0x40
 8015186:	f383 8811 	msr	BASEPRI, r3
 801518a:	f3bf 8f6f 	isb	sy
 801518e:	f3bf 8f4f 	dsb	sy
 8015192:	60bb      	str	r3, [r7, #8]
}
 8015194:	bf00      	nop
 8015196:	e7fe      	b.n	8015196 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8015198:	4b0c      	ldr	r3, [pc, #48]	; (80151cc <vTaskDelete+0xe0>)
 801519a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801519e:	601a      	str	r2, [r3, #0]
 80151a0:	f3bf 8f4f 	dsb	sy
 80151a4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80151a8:	bf00      	nop
 80151aa:	3710      	adds	r7, #16
 80151ac:	46bd      	mov	sp, r7
 80151ae:	bd80      	pop	{r7, pc}
 80151b0:	200007e4 	.word	0x200007e4
 80151b4:	20000cd4 	.word	0x20000cd4
 80151b8:	20000c8c 	.word	0x20000c8c
 80151bc:	20000ca0 	.word	0x20000ca0
 80151c0:	20000cb8 	.word	0x20000cb8
 80151c4:	20000cc4 	.word	0x20000cc4
 80151c8:	20000ce0 	.word	0x20000ce0
 80151cc:	e000ed04 	.word	0xe000ed04

080151d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80151d0:	b580      	push	{r7, lr}
 80151d2:	b084      	sub	sp, #16
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80151d8:	2300      	movs	r3, #0
 80151da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d017      	beq.n	8015212 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80151e2:	4b13      	ldr	r3, [pc, #76]	; (8015230 <vTaskDelay+0x60>)
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d00a      	beq.n	8015200 <vTaskDelay+0x30>
	__asm volatile
 80151ea:	f04f 0340 	mov.w	r3, #64	; 0x40
 80151ee:	f383 8811 	msr	BASEPRI, r3
 80151f2:	f3bf 8f6f 	isb	sy
 80151f6:	f3bf 8f4f 	dsb	sy
 80151fa:	60bb      	str	r3, [r7, #8]
}
 80151fc:	bf00      	nop
 80151fe:	e7fe      	b.n	80151fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8015200:	f000 f95c 	bl	80154bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015204:	2100      	movs	r1, #0
 8015206:	6878      	ldr	r0, [r7, #4]
 8015208:	f000 feea 	bl	8015fe0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801520c:	f000 f964 	bl	80154d8 <xTaskResumeAll>
 8015210:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	2b00      	cmp	r3, #0
 8015216:	d107      	bne.n	8015228 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8015218:	4b06      	ldr	r3, [pc, #24]	; (8015234 <vTaskDelay+0x64>)
 801521a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801521e:	601a      	str	r2, [r3, #0]
 8015220:	f3bf 8f4f 	dsb	sy
 8015224:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015228:	bf00      	nop
 801522a:	3710      	adds	r7, #16
 801522c:	46bd      	mov	sp, r7
 801522e:	bd80      	pop	{r7, pc}
 8015230:	20000ce0 	.word	0x20000ce0
 8015234:	e000ed04 	.word	0xe000ed04

08015238 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8015238:	b580      	push	{r7, lr}
 801523a:	b088      	sub	sp, #32
 801523c:	af00      	add	r7, sp, #0
 801523e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8015244:	69bb      	ldr	r3, [r7, #24]
 8015246:	2b00      	cmp	r3, #0
 8015248:	d10a      	bne.n	8015260 <eTaskGetState+0x28>
	__asm volatile
 801524a:	f04f 0340 	mov.w	r3, #64	; 0x40
 801524e:	f383 8811 	msr	BASEPRI, r3
 8015252:	f3bf 8f6f 	isb	sy
 8015256:	f3bf 8f4f 	dsb	sy
 801525a:	60bb      	str	r3, [r7, #8]
}
 801525c:	bf00      	nop
 801525e:	e7fe      	b.n	801525e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8015260:	4b23      	ldr	r3, [pc, #140]	; (80152f0 <eTaskGetState+0xb8>)
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	69ba      	ldr	r2, [r7, #24]
 8015266:	429a      	cmp	r2, r3
 8015268:	d102      	bne.n	8015270 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 801526a:	2300      	movs	r3, #0
 801526c:	77fb      	strb	r3, [r7, #31]
 801526e:	e03a      	b.n	80152e6 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8015270:	f001 fb88 	bl	8016984 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8015274:	69bb      	ldr	r3, [r7, #24]
 8015276:	695b      	ldr	r3, [r3, #20]
 8015278:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 801527a:	4b1e      	ldr	r3, [pc, #120]	; (80152f4 <eTaskGetState+0xbc>)
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8015280:	4b1d      	ldr	r3, [pc, #116]	; (80152f8 <eTaskGetState+0xc0>)
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8015286:	f001 fbad 	bl	80169e4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 801528a:	697a      	ldr	r2, [r7, #20]
 801528c:	693b      	ldr	r3, [r7, #16]
 801528e:	429a      	cmp	r2, r3
 8015290:	d003      	beq.n	801529a <eTaskGetState+0x62>
 8015292:	697a      	ldr	r2, [r7, #20]
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	429a      	cmp	r2, r3
 8015298:	d102      	bne.n	80152a0 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 801529a:	2302      	movs	r3, #2
 801529c:	77fb      	strb	r3, [r7, #31]
 801529e:	e022      	b.n	80152e6 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80152a0:	697b      	ldr	r3, [r7, #20]
 80152a2:	4a16      	ldr	r2, [pc, #88]	; (80152fc <eTaskGetState+0xc4>)
 80152a4:	4293      	cmp	r3, r2
 80152a6:	d112      	bne.n	80152ce <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80152a8:	69bb      	ldr	r3, [r7, #24]
 80152aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d10b      	bne.n	80152c8 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80152b0:	69bb      	ldr	r3, [r7, #24]
 80152b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80152b6:	b2db      	uxtb	r3, r3
 80152b8:	2b01      	cmp	r3, #1
 80152ba:	d102      	bne.n	80152c2 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 80152bc:	2302      	movs	r3, #2
 80152be:	77fb      	strb	r3, [r7, #31]
 80152c0:	e011      	b.n	80152e6 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 80152c2:	2303      	movs	r3, #3
 80152c4:	77fb      	strb	r3, [r7, #31]
 80152c6:	e00e      	b.n	80152e6 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80152c8:	2302      	movs	r3, #2
 80152ca:	77fb      	strb	r3, [r7, #31]
 80152cc:	e00b      	b.n	80152e6 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80152ce:	697b      	ldr	r3, [r7, #20]
 80152d0:	4a0b      	ldr	r2, [pc, #44]	; (8015300 <eTaskGetState+0xc8>)
 80152d2:	4293      	cmp	r3, r2
 80152d4:	d002      	beq.n	80152dc <eTaskGetState+0xa4>
 80152d6:	697b      	ldr	r3, [r7, #20]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d102      	bne.n	80152e2 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80152dc:	2304      	movs	r3, #4
 80152de:	77fb      	strb	r3, [r7, #31]
 80152e0:	e001      	b.n	80152e6 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80152e2:	2301      	movs	r3, #1
 80152e4:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80152e6:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80152e8:	4618      	mov	r0, r3
 80152ea:	3720      	adds	r7, #32
 80152ec:	46bd      	mov	sp, r7
 80152ee:	bd80      	pop	{r7, pc}
 80152f0:	200007e4 	.word	0x200007e4
 80152f4:	20000c70 	.word	0x20000c70
 80152f8:	20000c74 	.word	0x20000c74
 80152fc:	20000ca4 	.word	0x20000ca4
 8015300:	20000c8c 	.word	0x20000c8c

08015304 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8015304:	b580      	push	{r7, lr}
 8015306:	b084      	sub	sp, #16
 8015308:	af00      	add	r7, sp, #0
 801530a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801530c:	f001 fb3a 	bl	8016984 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	2b00      	cmp	r3, #0
 8015314:	d102      	bne.n	801531c <vTaskSuspend+0x18>
 8015316:	4b30      	ldr	r3, [pc, #192]	; (80153d8 <vTaskSuspend+0xd4>)
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	e000      	b.n	801531e <vTaskSuspend+0x1a>
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	3304      	adds	r3, #4
 8015324:	4618      	mov	r0, r3
 8015326:	f7fe fe99 	bl	801405c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801532e:	2b00      	cmp	r3, #0
 8015330:	d004      	beq.n	801533c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	3318      	adds	r3, #24
 8015336:	4618      	mov	r0, r3
 8015338:	f7fe fe90 	bl	801405c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	3304      	adds	r3, #4
 8015340:	4619      	mov	r1, r3
 8015342:	4826      	ldr	r0, [pc, #152]	; (80153dc <vTaskSuspend+0xd8>)
 8015344:	f7fe fe2d 	bl	8013fa2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801534e:	b2db      	uxtb	r3, r3
 8015350:	2b01      	cmp	r3, #1
 8015352:	d103      	bne.n	801535c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	2200      	movs	r2, #0
 8015358:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801535c:	f001 fb42 	bl	80169e4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8015360:	4b1f      	ldr	r3, [pc, #124]	; (80153e0 <vTaskSuspend+0xdc>)
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	2b00      	cmp	r3, #0
 8015366:	d005      	beq.n	8015374 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8015368:	f001 fb0c 	bl	8016984 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801536c:	f000 fc8e 	bl	8015c8c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8015370:	f001 fb38 	bl	80169e4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8015374:	4b18      	ldr	r3, [pc, #96]	; (80153d8 <vTaskSuspend+0xd4>)
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	68fa      	ldr	r2, [r7, #12]
 801537a:	429a      	cmp	r2, r3
 801537c:	d127      	bne.n	80153ce <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 801537e:	4b18      	ldr	r3, [pc, #96]	; (80153e0 <vTaskSuspend+0xdc>)
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d017      	beq.n	80153b6 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8015386:	4b17      	ldr	r3, [pc, #92]	; (80153e4 <vTaskSuspend+0xe0>)
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d00a      	beq.n	80153a4 <vTaskSuspend+0xa0>
	__asm volatile
 801538e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8015392:	f383 8811 	msr	BASEPRI, r3
 8015396:	f3bf 8f6f 	isb	sy
 801539a:	f3bf 8f4f 	dsb	sy
 801539e:	60bb      	str	r3, [r7, #8]
}
 80153a0:	bf00      	nop
 80153a2:	e7fe      	b.n	80153a2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80153a4:	4b10      	ldr	r3, [pc, #64]	; (80153e8 <vTaskSuspend+0xe4>)
 80153a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80153aa:	601a      	str	r2, [r3, #0]
 80153ac:	f3bf 8f4f 	dsb	sy
 80153b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80153b4:	e00b      	b.n	80153ce <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80153b6:	4b09      	ldr	r3, [pc, #36]	; (80153dc <vTaskSuspend+0xd8>)
 80153b8:	681a      	ldr	r2, [r3, #0]
 80153ba:	4b0c      	ldr	r3, [pc, #48]	; (80153ec <vTaskSuspend+0xe8>)
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	429a      	cmp	r2, r3
 80153c0:	d103      	bne.n	80153ca <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80153c2:	4b05      	ldr	r3, [pc, #20]	; (80153d8 <vTaskSuspend+0xd4>)
 80153c4:	2200      	movs	r2, #0
 80153c6:	601a      	str	r2, [r3, #0]
	}
 80153c8:	e001      	b.n	80153ce <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80153ca:	f000 f9ed 	bl	80157a8 <vTaskSwitchContext>
	}
 80153ce:	bf00      	nop
 80153d0:	3710      	adds	r7, #16
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}
 80153d6:	bf00      	nop
 80153d8:	200007e4 	.word	0x200007e4
 80153dc:	20000ca4 	.word	0x20000ca4
 80153e0:	20000cc4 	.word	0x20000cc4
 80153e4:	20000ce0 	.word	0x20000ce0
 80153e8:	e000ed04 	.word	0xe000ed04
 80153ec:	20000cb8 	.word	0x20000cb8

080153f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b08a      	sub	sp, #40	; 0x28
 80153f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80153f6:	2300      	movs	r3, #0
 80153f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80153fa:	2300      	movs	r3, #0
 80153fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80153fe:	463a      	mov	r2, r7
 8015400:	1d39      	adds	r1, r7, #4
 8015402:	f107 0308 	add.w	r3, r7, #8
 8015406:	4618      	mov	r0, r3
 8015408:	f7fe fd6a 	bl	8013ee0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801540c:	6839      	ldr	r1, [r7, #0]
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	68ba      	ldr	r2, [r7, #8]
 8015412:	9202      	str	r2, [sp, #8]
 8015414:	9301      	str	r3, [sp, #4]
 8015416:	2300      	movs	r3, #0
 8015418:	9300      	str	r3, [sp, #0]
 801541a:	2300      	movs	r3, #0
 801541c:	460a      	mov	r2, r1
 801541e:	4921      	ldr	r1, [pc, #132]	; (80154a4 <vTaskStartScheduler+0xb4>)
 8015420:	4821      	ldr	r0, [pc, #132]	; (80154a8 <vTaskStartScheduler+0xb8>)
 8015422:	f7ff fcc1 	bl	8014da8 <xTaskCreateStatic>
 8015426:	4603      	mov	r3, r0
 8015428:	4a20      	ldr	r2, [pc, #128]	; (80154ac <vTaskStartScheduler+0xbc>)
 801542a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801542c:	4b1f      	ldr	r3, [pc, #124]	; (80154ac <vTaskStartScheduler+0xbc>)
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d002      	beq.n	801543a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015434:	2301      	movs	r3, #1
 8015436:	617b      	str	r3, [r7, #20]
 8015438:	e001      	b.n	801543e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801543a:	2300      	movs	r3, #0
 801543c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801543e:	697b      	ldr	r3, [r7, #20]
 8015440:	2b01      	cmp	r3, #1
 8015442:	d102      	bne.n	801544a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8015444:	f000 fe20 	bl	8016088 <xTimerCreateTimerTask>
 8015448:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801544a:	697b      	ldr	r3, [r7, #20]
 801544c:	2b01      	cmp	r3, #1
 801544e:	d116      	bne.n	801547e <vTaskStartScheduler+0x8e>
	__asm volatile
 8015450:	f04f 0340 	mov.w	r3, #64	; 0x40
 8015454:	f383 8811 	msr	BASEPRI, r3
 8015458:	f3bf 8f6f 	isb	sy
 801545c:	f3bf 8f4f 	dsb	sy
 8015460:	613b      	str	r3, [r7, #16]
}
 8015462:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015464:	4b12      	ldr	r3, [pc, #72]	; (80154b0 <vTaskStartScheduler+0xc0>)
 8015466:	f04f 32ff 	mov.w	r2, #4294967295
 801546a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801546c:	4b11      	ldr	r3, [pc, #68]	; (80154b4 <vTaskStartScheduler+0xc4>)
 801546e:	2201      	movs	r2, #1
 8015470:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015472:	4b11      	ldr	r3, [pc, #68]	; (80154b8 <vTaskStartScheduler+0xc8>)
 8015474:	2200      	movs	r2, #0
 8015476:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015478:	f001 f9e2 	bl	8016840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801547c:	e00e      	b.n	801549c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801547e:	697b      	ldr	r3, [r7, #20]
 8015480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015484:	d10a      	bne.n	801549c <vTaskStartScheduler+0xac>
	__asm volatile
 8015486:	f04f 0340 	mov.w	r3, #64	; 0x40
 801548a:	f383 8811 	msr	BASEPRI, r3
 801548e:	f3bf 8f6f 	isb	sy
 8015492:	f3bf 8f4f 	dsb	sy
 8015496:	60fb      	str	r3, [r7, #12]
}
 8015498:	bf00      	nop
 801549a:	e7fe      	b.n	801549a <vTaskStartScheduler+0xaa>
}
 801549c:	bf00      	nop
 801549e:	3718      	adds	r7, #24
 80154a0:	46bd      	mov	sp, r7
 80154a2:	bd80      	pop	{r7, pc}
 80154a4:	0801b09c 	.word	0x0801b09c
 80154a8:	08015b1d 	.word	0x08015b1d
 80154ac:	20000cdc 	.word	0x20000cdc
 80154b0:	20000cd8 	.word	0x20000cd8
 80154b4:	20000cc4 	.word	0x20000cc4
 80154b8:	20000cbc 	.word	0x20000cbc

080154bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80154bc:	b480      	push	{r7}
 80154be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80154c0:	4b04      	ldr	r3, [pc, #16]	; (80154d4 <vTaskSuspendAll+0x18>)
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	3301      	adds	r3, #1
 80154c6:	4a03      	ldr	r2, [pc, #12]	; (80154d4 <vTaskSuspendAll+0x18>)
 80154c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80154ca:	bf00      	nop
 80154cc:	46bd      	mov	sp, r7
 80154ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d2:	4770      	bx	lr
 80154d4:	20000ce0 	.word	0x20000ce0

080154d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80154d8:	b580      	push	{r7, lr}
 80154da:	b084      	sub	sp, #16
 80154dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80154de:	2300      	movs	r3, #0
 80154e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80154e2:	2300      	movs	r3, #0
 80154e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80154e6:	4b42      	ldr	r3, [pc, #264]	; (80155f0 <xTaskResumeAll+0x118>)
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d10a      	bne.n	8015504 <xTaskResumeAll+0x2c>
	__asm volatile
 80154ee:	f04f 0340 	mov.w	r3, #64	; 0x40
 80154f2:	f383 8811 	msr	BASEPRI, r3
 80154f6:	f3bf 8f6f 	isb	sy
 80154fa:	f3bf 8f4f 	dsb	sy
 80154fe:	603b      	str	r3, [r7, #0]
}
 8015500:	bf00      	nop
 8015502:	e7fe      	b.n	8015502 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015504:	f001 fa3e 	bl	8016984 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015508:	4b39      	ldr	r3, [pc, #228]	; (80155f0 <xTaskResumeAll+0x118>)
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	3b01      	subs	r3, #1
 801550e:	4a38      	ldr	r2, [pc, #224]	; (80155f0 <xTaskResumeAll+0x118>)
 8015510:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015512:	4b37      	ldr	r3, [pc, #220]	; (80155f0 <xTaskResumeAll+0x118>)
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d162      	bne.n	80155e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801551a:	4b36      	ldr	r3, [pc, #216]	; (80155f4 <xTaskResumeAll+0x11c>)
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d05e      	beq.n	80155e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015522:	e02f      	b.n	8015584 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015524:	4b34      	ldr	r3, [pc, #208]	; (80155f8 <xTaskResumeAll+0x120>)
 8015526:	68db      	ldr	r3, [r3, #12]
 8015528:	68db      	ldr	r3, [r3, #12]
 801552a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	3318      	adds	r3, #24
 8015530:	4618      	mov	r0, r3
 8015532:	f7fe fd93 	bl	801405c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	3304      	adds	r3, #4
 801553a:	4618      	mov	r0, r3
 801553c:	f7fe fd8e 	bl	801405c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015544:	4b2d      	ldr	r3, [pc, #180]	; (80155fc <xTaskResumeAll+0x124>)
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	429a      	cmp	r2, r3
 801554a:	d903      	bls.n	8015554 <xTaskResumeAll+0x7c>
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015550:	4a2a      	ldr	r2, [pc, #168]	; (80155fc <xTaskResumeAll+0x124>)
 8015552:	6013      	str	r3, [r2, #0]
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015558:	4613      	mov	r3, r2
 801555a:	009b      	lsls	r3, r3, #2
 801555c:	4413      	add	r3, r2
 801555e:	009b      	lsls	r3, r3, #2
 8015560:	4a27      	ldr	r2, [pc, #156]	; (8015600 <xTaskResumeAll+0x128>)
 8015562:	441a      	add	r2, r3
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	3304      	adds	r3, #4
 8015568:	4619      	mov	r1, r3
 801556a:	4610      	mov	r0, r2
 801556c:	f7fe fd19 	bl	8013fa2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015574:	4b23      	ldr	r3, [pc, #140]	; (8015604 <xTaskResumeAll+0x12c>)
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801557a:	429a      	cmp	r2, r3
 801557c:	d302      	bcc.n	8015584 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801557e:	4b22      	ldr	r3, [pc, #136]	; (8015608 <xTaskResumeAll+0x130>)
 8015580:	2201      	movs	r2, #1
 8015582:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015584:	4b1c      	ldr	r3, [pc, #112]	; (80155f8 <xTaskResumeAll+0x120>)
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	2b00      	cmp	r3, #0
 801558a:	d1cb      	bne.n	8015524 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d001      	beq.n	8015596 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015592:	f000 fb7b 	bl	8015c8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8015596:	4b1d      	ldr	r3, [pc, #116]	; (801560c <xTaskResumeAll+0x134>)
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d010      	beq.n	80155c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80155a2:	f000 f847 	bl	8015634 <xTaskIncrementTick>
 80155a6:	4603      	mov	r3, r0
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d002      	beq.n	80155b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80155ac:	4b16      	ldr	r3, [pc, #88]	; (8015608 <xTaskResumeAll+0x130>)
 80155ae:	2201      	movs	r2, #1
 80155b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	3b01      	subs	r3, #1
 80155b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d1f1      	bne.n	80155a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80155be:	4b13      	ldr	r3, [pc, #76]	; (801560c <xTaskResumeAll+0x134>)
 80155c0:	2200      	movs	r2, #0
 80155c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80155c4:	4b10      	ldr	r3, [pc, #64]	; (8015608 <xTaskResumeAll+0x130>)
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d009      	beq.n	80155e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80155cc:	2301      	movs	r3, #1
 80155ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80155d0:	4b0f      	ldr	r3, [pc, #60]	; (8015610 <xTaskResumeAll+0x138>)
 80155d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80155d6:	601a      	str	r2, [r3, #0]
 80155d8:	f3bf 8f4f 	dsb	sy
 80155dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80155e0:	f001 fa00 	bl	80169e4 <vPortExitCritical>

	return xAlreadyYielded;
 80155e4:	68bb      	ldr	r3, [r7, #8]
}
 80155e6:	4618      	mov	r0, r3
 80155e8:	3710      	adds	r7, #16
 80155ea:	46bd      	mov	sp, r7
 80155ec:	bd80      	pop	{r7, pc}
 80155ee:	bf00      	nop
 80155f0:	20000ce0 	.word	0x20000ce0
 80155f4:	20000cb8 	.word	0x20000cb8
 80155f8:	20000c78 	.word	0x20000c78
 80155fc:	20000cc0 	.word	0x20000cc0
 8015600:	200007e8 	.word	0x200007e8
 8015604:	200007e4 	.word	0x200007e4
 8015608:	20000ccc 	.word	0x20000ccc
 801560c:	20000cc8 	.word	0x20000cc8
 8015610:	e000ed04 	.word	0xe000ed04

08015614 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015614:	b480      	push	{r7}
 8015616:	b083      	sub	sp, #12
 8015618:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801561a:	4b05      	ldr	r3, [pc, #20]	; (8015630 <xTaskGetTickCount+0x1c>)
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015620:	687b      	ldr	r3, [r7, #4]
}
 8015622:	4618      	mov	r0, r3
 8015624:	370c      	adds	r7, #12
 8015626:	46bd      	mov	sp, r7
 8015628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801562c:	4770      	bx	lr
 801562e:	bf00      	nop
 8015630:	20000cbc 	.word	0x20000cbc

08015634 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015634:	b580      	push	{r7, lr}
 8015636:	b086      	sub	sp, #24
 8015638:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801563a:	2300      	movs	r3, #0
 801563c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801563e:	4b4f      	ldr	r3, [pc, #316]	; (801577c <xTaskIncrementTick+0x148>)
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	2b00      	cmp	r3, #0
 8015644:	f040 808f 	bne.w	8015766 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015648:	4b4d      	ldr	r3, [pc, #308]	; (8015780 <xTaskIncrementTick+0x14c>)
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	3301      	adds	r3, #1
 801564e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015650:	4a4b      	ldr	r2, [pc, #300]	; (8015780 <xTaskIncrementTick+0x14c>)
 8015652:	693b      	ldr	r3, [r7, #16]
 8015654:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015656:	693b      	ldr	r3, [r7, #16]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d120      	bne.n	801569e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801565c:	4b49      	ldr	r3, [pc, #292]	; (8015784 <xTaskIncrementTick+0x150>)
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	2b00      	cmp	r3, #0
 8015664:	d00a      	beq.n	801567c <xTaskIncrementTick+0x48>
	__asm volatile
 8015666:	f04f 0340 	mov.w	r3, #64	; 0x40
 801566a:	f383 8811 	msr	BASEPRI, r3
 801566e:	f3bf 8f6f 	isb	sy
 8015672:	f3bf 8f4f 	dsb	sy
 8015676:	603b      	str	r3, [r7, #0]
}
 8015678:	bf00      	nop
 801567a:	e7fe      	b.n	801567a <xTaskIncrementTick+0x46>
 801567c:	4b41      	ldr	r3, [pc, #260]	; (8015784 <xTaskIncrementTick+0x150>)
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	60fb      	str	r3, [r7, #12]
 8015682:	4b41      	ldr	r3, [pc, #260]	; (8015788 <xTaskIncrementTick+0x154>)
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	4a3f      	ldr	r2, [pc, #252]	; (8015784 <xTaskIncrementTick+0x150>)
 8015688:	6013      	str	r3, [r2, #0]
 801568a:	4a3f      	ldr	r2, [pc, #252]	; (8015788 <xTaskIncrementTick+0x154>)
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	6013      	str	r3, [r2, #0]
 8015690:	4b3e      	ldr	r3, [pc, #248]	; (801578c <xTaskIncrementTick+0x158>)
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	3301      	adds	r3, #1
 8015696:	4a3d      	ldr	r2, [pc, #244]	; (801578c <xTaskIncrementTick+0x158>)
 8015698:	6013      	str	r3, [r2, #0]
 801569a:	f000 faf7 	bl	8015c8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801569e:	4b3c      	ldr	r3, [pc, #240]	; (8015790 <xTaskIncrementTick+0x15c>)
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	693a      	ldr	r2, [r7, #16]
 80156a4:	429a      	cmp	r2, r3
 80156a6:	d349      	bcc.n	801573c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80156a8:	4b36      	ldr	r3, [pc, #216]	; (8015784 <xTaskIncrementTick+0x150>)
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d104      	bne.n	80156bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80156b2:	4b37      	ldr	r3, [pc, #220]	; (8015790 <xTaskIncrementTick+0x15c>)
 80156b4:	f04f 32ff 	mov.w	r2, #4294967295
 80156b8:	601a      	str	r2, [r3, #0]
					break;
 80156ba:	e03f      	b.n	801573c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80156bc:	4b31      	ldr	r3, [pc, #196]	; (8015784 <xTaskIncrementTick+0x150>)
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	68db      	ldr	r3, [r3, #12]
 80156c2:	68db      	ldr	r3, [r3, #12]
 80156c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80156c6:	68bb      	ldr	r3, [r7, #8]
 80156c8:	685b      	ldr	r3, [r3, #4]
 80156ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80156cc:	693a      	ldr	r2, [r7, #16]
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	429a      	cmp	r2, r3
 80156d2:	d203      	bcs.n	80156dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80156d4:	4a2e      	ldr	r2, [pc, #184]	; (8015790 <xTaskIncrementTick+0x15c>)
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80156da:	e02f      	b.n	801573c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80156dc:	68bb      	ldr	r3, [r7, #8]
 80156de:	3304      	adds	r3, #4
 80156e0:	4618      	mov	r0, r3
 80156e2:	f7fe fcbb 	bl	801405c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80156e6:	68bb      	ldr	r3, [r7, #8]
 80156e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d004      	beq.n	80156f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80156ee:	68bb      	ldr	r3, [r7, #8]
 80156f0:	3318      	adds	r3, #24
 80156f2:	4618      	mov	r0, r3
 80156f4:	f7fe fcb2 	bl	801405c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80156f8:	68bb      	ldr	r3, [r7, #8]
 80156fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80156fc:	4b25      	ldr	r3, [pc, #148]	; (8015794 <xTaskIncrementTick+0x160>)
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	429a      	cmp	r2, r3
 8015702:	d903      	bls.n	801570c <xTaskIncrementTick+0xd8>
 8015704:	68bb      	ldr	r3, [r7, #8]
 8015706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015708:	4a22      	ldr	r2, [pc, #136]	; (8015794 <xTaskIncrementTick+0x160>)
 801570a:	6013      	str	r3, [r2, #0]
 801570c:	68bb      	ldr	r3, [r7, #8]
 801570e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015710:	4613      	mov	r3, r2
 8015712:	009b      	lsls	r3, r3, #2
 8015714:	4413      	add	r3, r2
 8015716:	009b      	lsls	r3, r3, #2
 8015718:	4a1f      	ldr	r2, [pc, #124]	; (8015798 <xTaskIncrementTick+0x164>)
 801571a:	441a      	add	r2, r3
 801571c:	68bb      	ldr	r3, [r7, #8]
 801571e:	3304      	adds	r3, #4
 8015720:	4619      	mov	r1, r3
 8015722:	4610      	mov	r0, r2
 8015724:	f7fe fc3d 	bl	8013fa2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015728:	68bb      	ldr	r3, [r7, #8]
 801572a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801572c:	4b1b      	ldr	r3, [pc, #108]	; (801579c <xTaskIncrementTick+0x168>)
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015732:	429a      	cmp	r2, r3
 8015734:	d3b8      	bcc.n	80156a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8015736:	2301      	movs	r3, #1
 8015738:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801573a:	e7b5      	b.n	80156a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801573c:	4b17      	ldr	r3, [pc, #92]	; (801579c <xTaskIncrementTick+0x168>)
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015742:	4915      	ldr	r1, [pc, #84]	; (8015798 <xTaskIncrementTick+0x164>)
 8015744:	4613      	mov	r3, r2
 8015746:	009b      	lsls	r3, r3, #2
 8015748:	4413      	add	r3, r2
 801574a:	009b      	lsls	r3, r3, #2
 801574c:	440b      	add	r3, r1
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	2b01      	cmp	r3, #1
 8015752:	d901      	bls.n	8015758 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8015754:	2301      	movs	r3, #1
 8015756:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015758:	4b11      	ldr	r3, [pc, #68]	; (80157a0 <xTaskIncrementTick+0x16c>)
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	2b00      	cmp	r3, #0
 801575e:	d007      	beq.n	8015770 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8015760:	2301      	movs	r3, #1
 8015762:	617b      	str	r3, [r7, #20]
 8015764:	e004      	b.n	8015770 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015766:	4b0f      	ldr	r3, [pc, #60]	; (80157a4 <xTaskIncrementTick+0x170>)
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	3301      	adds	r3, #1
 801576c:	4a0d      	ldr	r2, [pc, #52]	; (80157a4 <xTaskIncrementTick+0x170>)
 801576e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8015770:	697b      	ldr	r3, [r7, #20]
}
 8015772:	4618      	mov	r0, r3
 8015774:	3718      	adds	r7, #24
 8015776:	46bd      	mov	sp, r7
 8015778:	bd80      	pop	{r7, pc}
 801577a:	bf00      	nop
 801577c:	20000ce0 	.word	0x20000ce0
 8015780:	20000cbc 	.word	0x20000cbc
 8015784:	20000c70 	.word	0x20000c70
 8015788:	20000c74 	.word	0x20000c74
 801578c:	20000cd0 	.word	0x20000cd0
 8015790:	20000cd8 	.word	0x20000cd8
 8015794:	20000cc0 	.word	0x20000cc0
 8015798:	200007e8 	.word	0x200007e8
 801579c:	200007e4 	.word	0x200007e4
 80157a0:	20000ccc 	.word	0x20000ccc
 80157a4:	20000cc8 	.word	0x20000cc8

080157a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b086      	sub	sp, #24
 80157ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80157ae:	4b3a      	ldr	r3, [pc, #232]	; (8015898 <vTaskSwitchContext+0xf0>)
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d003      	beq.n	80157be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80157b6:	4b39      	ldr	r3, [pc, #228]	; (801589c <vTaskSwitchContext+0xf4>)
 80157b8:	2201      	movs	r2, #1
 80157ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80157bc:	e068      	b.n	8015890 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 80157be:	4b37      	ldr	r3, [pc, #220]	; (801589c <vTaskSwitchContext+0xf4>)
 80157c0:	2200      	movs	r2, #0
 80157c2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80157c4:	4b36      	ldr	r3, [pc, #216]	; (80158a0 <vTaskSwitchContext+0xf8>)
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157ca:	613b      	str	r3, [r7, #16]
 80157cc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80157d0:	60fb      	str	r3, [r7, #12]
 80157d2:	693b      	ldr	r3, [r7, #16]
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	68fa      	ldr	r2, [r7, #12]
 80157d8:	429a      	cmp	r2, r3
 80157da:	d111      	bne.n	8015800 <vTaskSwitchContext+0x58>
 80157dc:	693b      	ldr	r3, [r7, #16]
 80157de:	3304      	adds	r3, #4
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	68fa      	ldr	r2, [r7, #12]
 80157e4:	429a      	cmp	r2, r3
 80157e6:	d10b      	bne.n	8015800 <vTaskSwitchContext+0x58>
 80157e8:	693b      	ldr	r3, [r7, #16]
 80157ea:	3308      	adds	r3, #8
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	68fa      	ldr	r2, [r7, #12]
 80157f0:	429a      	cmp	r2, r3
 80157f2:	d105      	bne.n	8015800 <vTaskSwitchContext+0x58>
 80157f4:	693b      	ldr	r3, [r7, #16]
 80157f6:	330c      	adds	r3, #12
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	68fa      	ldr	r2, [r7, #12]
 80157fc:	429a      	cmp	r2, r3
 80157fe:	d008      	beq.n	8015812 <vTaskSwitchContext+0x6a>
 8015800:	4b27      	ldr	r3, [pc, #156]	; (80158a0 <vTaskSwitchContext+0xf8>)
 8015802:	681a      	ldr	r2, [r3, #0]
 8015804:	4b26      	ldr	r3, [pc, #152]	; (80158a0 <vTaskSwitchContext+0xf8>)
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	3334      	adds	r3, #52	; 0x34
 801580a:	4619      	mov	r1, r3
 801580c:	4610      	mov	r0, r2
 801580e:	f7fa fe0a 	bl	8010426 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015812:	4b24      	ldr	r3, [pc, #144]	; (80158a4 <vTaskSwitchContext+0xfc>)
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	617b      	str	r3, [r7, #20]
 8015818:	e010      	b.n	801583c <vTaskSwitchContext+0x94>
 801581a:	697b      	ldr	r3, [r7, #20]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d10a      	bne.n	8015836 <vTaskSwitchContext+0x8e>
	__asm volatile
 8015820:	f04f 0340 	mov.w	r3, #64	; 0x40
 8015824:	f383 8811 	msr	BASEPRI, r3
 8015828:	f3bf 8f6f 	isb	sy
 801582c:	f3bf 8f4f 	dsb	sy
 8015830:	607b      	str	r3, [r7, #4]
}
 8015832:	bf00      	nop
 8015834:	e7fe      	b.n	8015834 <vTaskSwitchContext+0x8c>
 8015836:	697b      	ldr	r3, [r7, #20]
 8015838:	3b01      	subs	r3, #1
 801583a:	617b      	str	r3, [r7, #20]
 801583c:	491a      	ldr	r1, [pc, #104]	; (80158a8 <vTaskSwitchContext+0x100>)
 801583e:	697a      	ldr	r2, [r7, #20]
 8015840:	4613      	mov	r3, r2
 8015842:	009b      	lsls	r3, r3, #2
 8015844:	4413      	add	r3, r2
 8015846:	009b      	lsls	r3, r3, #2
 8015848:	440b      	add	r3, r1
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	2b00      	cmp	r3, #0
 801584e:	d0e4      	beq.n	801581a <vTaskSwitchContext+0x72>
 8015850:	697a      	ldr	r2, [r7, #20]
 8015852:	4613      	mov	r3, r2
 8015854:	009b      	lsls	r3, r3, #2
 8015856:	4413      	add	r3, r2
 8015858:	009b      	lsls	r3, r3, #2
 801585a:	4a13      	ldr	r2, [pc, #76]	; (80158a8 <vTaskSwitchContext+0x100>)
 801585c:	4413      	add	r3, r2
 801585e:	60bb      	str	r3, [r7, #8]
 8015860:	68bb      	ldr	r3, [r7, #8]
 8015862:	685b      	ldr	r3, [r3, #4]
 8015864:	685a      	ldr	r2, [r3, #4]
 8015866:	68bb      	ldr	r3, [r7, #8]
 8015868:	605a      	str	r2, [r3, #4]
 801586a:	68bb      	ldr	r3, [r7, #8]
 801586c:	685a      	ldr	r2, [r3, #4]
 801586e:	68bb      	ldr	r3, [r7, #8]
 8015870:	3308      	adds	r3, #8
 8015872:	429a      	cmp	r2, r3
 8015874:	d104      	bne.n	8015880 <vTaskSwitchContext+0xd8>
 8015876:	68bb      	ldr	r3, [r7, #8]
 8015878:	685b      	ldr	r3, [r3, #4]
 801587a:	685a      	ldr	r2, [r3, #4]
 801587c:	68bb      	ldr	r3, [r7, #8]
 801587e:	605a      	str	r2, [r3, #4]
 8015880:	68bb      	ldr	r3, [r7, #8]
 8015882:	685b      	ldr	r3, [r3, #4]
 8015884:	68db      	ldr	r3, [r3, #12]
 8015886:	4a06      	ldr	r2, [pc, #24]	; (80158a0 <vTaskSwitchContext+0xf8>)
 8015888:	6013      	str	r3, [r2, #0]
 801588a:	4a06      	ldr	r2, [pc, #24]	; (80158a4 <vTaskSwitchContext+0xfc>)
 801588c:	697b      	ldr	r3, [r7, #20]
 801588e:	6013      	str	r3, [r2, #0]
}
 8015890:	bf00      	nop
 8015892:	3718      	adds	r7, #24
 8015894:	46bd      	mov	sp, r7
 8015896:	bd80      	pop	{r7, pc}
 8015898:	20000ce0 	.word	0x20000ce0
 801589c:	20000ccc 	.word	0x20000ccc
 80158a0:	200007e4 	.word	0x200007e4
 80158a4:	20000cc0 	.word	0x20000cc0
 80158a8:	200007e8 	.word	0x200007e8

080158ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b084      	sub	sp, #16
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]
 80158b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d10a      	bne.n	80158d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80158bc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80158c0:	f383 8811 	msr	BASEPRI, r3
 80158c4:	f3bf 8f6f 	isb	sy
 80158c8:	f3bf 8f4f 	dsb	sy
 80158cc:	60fb      	str	r3, [r7, #12]
}
 80158ce:	bf00      	nop
 80158d0:	e7fe      	b.n	80158d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80158d2:	4b07      	ldr	r3, [pc, #28]	; (80158f0 <vTaskPlaceOnEventList+0x44>)
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	3318      	adds	r3, #24
 80158d8:	4619      	mov	r1, r3
 80158da:	6878      	ldr	r0, [r7, #4]
 80158dc:	f7fe fb85 	bl	8013fea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80158e0:	2101      	movs	r1, #1
 80158e2:	6838      	ldr	r0, [r7, #0]
 80158e4:	f000 fb7c 	bl	8015fe0 <prvAddCurrentTaskToDelayedList>
}
 80158e8:	bf00      	nop
 80158ea:	3710      	adds	r7, #16
 80158ec:	46bd      	mov	sp, r7
 80158ee:	bd80      	pop	{r7, pc}
 80158f0:	200007e4 	.word	0x200007e4

080158f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b086      	sub	sp, #24
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	60f8      	str	r0, [r7, #12]
 80158fc:	60b9      	str	r1, [r7, #8]
 80158fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8015900:	68fb      	ldr	r3, [r7, #12]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d10a      	bne.n	801591c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8015906:	f04f 0340 	mov.w	r3, #64	; 0x40
 801590a:	f383 8811 	msr	BASEPRI, r3
 801590e:	f3bf 8f6f 	isb	sy
 8015912:	f3bf 8f4f 	dsb	sy
 8015916:	617b      	str	r3, [r7, #20]
}
 8015918:	bf00      	nop
 801591a:	e7fe      	b.n	801591a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801591c:	4b0a      	ldr	r3, [pc, #40]	; (8015948 <vTaskPlaceOnEventListRestricted+0x54>)
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	3318      	adds	r3, #24
 8015922:	4619      	mov	r1, r3
 8015924:	68f8      	ldr	r0, [r7, #12]
 8015926:	f7fe fb3c 	bl	8013fa2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d002      	beq.n	8015936 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8015930:	f04f 33ff 	mov.w	r3, #4294967295
 8015934:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015936:	6879      	ldr	r1, [r7, #4]
 8015938:	68b8      	ldr	r0, [r7, #8]
 801593a:	f000 fb51 	bl	8015fe0 <prvAddCurrentTaskToDelayedList>
	}
 801593e:	bf00      	nop
 8015940:	3718      	adds	r7, #24
 8015942:	46bd      	mov	sp, r7
 8015944:	bd80      	pop	{r7, pc}
 8015946:	bf00      	nop
 8015948:	200007e4 	.word	0x200007e4

0801594c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801594c:	b580      	push	{r7, lr}
 801594e:	b086      	sub	sp, #24
 8015950:	af00      	add	r7, sp, #0
 8015952:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	68db      	ldr	r3, [r3, #12]
 8015958:	68db      	ldr	r3, [r3, #12]
 801595a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801595c:	693b      	ldr	r3, [r7, #16]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d10a      	bne.n	8015978 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8015962:	f04f 0340 	mov.w	r3, #64	; 0x40
 8015966:	f383 8811 	msr	BASEPRI, r3
 801596a:	f3bf 8f6f 	isb	sy
 801596e:	f3bf 8f4f 	dsb	sy
 8015972:	60fb      	str	r3, [r7, #12]
}
 8015974:	bf00      	nop
 8015976:	e7fe      	b.n	8015976 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015978:	693b      	ldr	r3, [r7, #16]
 801597a:	3318      	adds	r3, #24
 801597c:	4618      	mov	r0, r3
 801597e:	f7fe fb6d 	bl	801405c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015982:	4b1e      	ldr	r3, [pc, #120]	; (80159fc <xTaskRemoveFromEventList+0xb0>)
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d11d      	bne.n	80159c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801598a:	693b      	ldr	r3, [r7, #16]
 801598c:	3304      	adds	r3, #4
 801598e:	4618      	mov	r0, r3
 8015990:	f7fe fb64 	bl	801405c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015994:	693b      	ldr	r3, [r7, #16]
 8015996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015998:	4b19      	ldr	r3, [pc, #100]	; (8015a00 <xTaskRemoveFromEventList+0xb4>)
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	429a      	cmp	r2, r3
 801599e:	d903      	bls.n	80159a8 <xTaskRemoveFromEventList+0x5c>
 80159a0:	693b      	ldr	r3, [r7, #16]
 80159a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159a4:	4a16      	ldr	r2, [pc, #88]	; (8015a00 <xTaskRemoveFromEventList+0xb4>)
 80159a6:	6013      	str	r3, [r2, #0]
 80159a8:	693b      	ldr	r3, [r7, #16]
 80159aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159ac:	4613      	mov	r3, r2
 80159ae:	009b      	lsls	r3, r3, #2
 80159b0:	4413      	add	r3, r2
 80159b2:	009b      	lsls	r3, r3, #2
 80159b4:	4a13      	ldr	r2, [pc, #76]	; (8015a04 <xTaskRemoveFromEventList+0xb8>)
 80159b6:	441a      	add	r2, r3
 80159b8:	693b      	ldr	r3, [r7, #16]
 80159ba:	3304      	adds	r3, #4
 80159bc:	4619      	mov	r1, r3
 80159be:	4610      	mov	r0, r2
 80159c0:	f7fe faef 	bl	8013fa2 <vListInsertEnd>
 80159c4:	e005      	b.n	80159d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80159c6:	693b      	ldr	r3, [r7, #16]
 80159c8:	3318      	adds	r3, #24
 80159ca:	4619      	mov	r1, r3
 80159cc:	480e      	ldr	r0, [pc, #56]	; (8015a08 <xTaskRemoveFromEventList+0xbc>)
 80159ce:	f7fe fae8 	bl	8013fa2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80159d2:	693b      	ldr	r3, [r7, #16]
 80159d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159d6:	4b0d      	ldr	r3, [pc, #52]	; (8015a0c <xTaskRemoveFromEventList+0xc0>)
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159dc:	429a      	cmp	r2, r3
 80159de:	d905      	bls.n	80159ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80159e0:	2301      	movs	r3, #1
 80159e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80159e4:	4b0a      	ldr	r3, [pc, #40]	; (8015a10 <xTaskRemoveFromEventList+0xc4>)
 80159e6:	2201      	movs	r2, #1
 80159e8:	601a      	str	r2, [r3, #0]
 80159ea:	e001      	b.n	80159f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80159ec:	2300      	movs	r3, #0
 80159ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80159f0:	697b      	ldr	r3, [r7, #20]
}
 80159f2:	4618      	mov	r0, r3
 80159f4:	3718      	adds	r7, #24
 80159f6:	46bd      	mov	sp, r7
 80159f8:	bd80      	pop	{r7, pc}
 80159fa:	bf00      	nop
 80159fc:	20000ce0 	.word	0x20000ce0
 8015a00:	20000cc0 	.word	0x20000cc0
 8015a04:	200007e8 	.word	0x200007e8
 8015a08:	20000c78 	.word	0x20000c78
 8015a0c:	200007e4 	.word	0x200007e4
 8015a10:	20000ccc 	.word	0x20000ccc

08015a14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015a14:	b480      	push	{r7}
 8015a16:	b083      	sub	sp, #12
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015a1c:	4b06      	ldr	r3, [pc, #24]	; (8015a38 <vTaskInternalSetTimeOutState+0x24>)
 8015a1e:	681a      	ldr	r2, [r3, #0]
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015a24:	4b05      	ldr	r3, [pc, #20]	; (8015a3c <vTaskInternalSetTimeOutState+0x28>)
 8015a26:	681a      	ldr	r2, [r3, #0]
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	605a      	str	r2, [r3, #4]
}
 8015a2c:	bf00      	nop
 8015a2e:	370c      	adds	r7, #12
 8015a30:	46bd      	mov	sp, r7
 8015a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a36:	4770      	bx	lr
 8015a38:	20000cd0 	.word	0x20000cd0
 8015a3c:	20000cbc 	.word	0x20000cbc

08015a40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015a40:	b580      	push	{r7, lr}
 8015a42:	b088      	sub	sp, #32
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
 8015a48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d10a      	bne.n	8015a66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8015a50:	f04f 0340 	mov.w	r3, #64	; 0x40
 8015a54:	f383 8811 	msr	BASEPRI, r3
 8015a58:	f3bf 8f6f 	isb	sy
 8015a5c:	f3bf 8f4f 	dsb	sy
 8015a60:	613b      	str	r3, [r7, #16]
}
 8015a62:	bf00      	nop
 8015a64:	e7fe      	b.n	8015a64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015a66:	683b      	ldr	r3, [r7, #0]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d10a      	bne.n	8015a82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8015a6c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8015a70:	f383 8811 	msr	BASEPRI, r3
 8015a74:	f3bf 8f6f 	isb	sy
 8015a78:	f3bf 8f4f 	dsb	sy
 8015a7c:	60fb      	str	r3, [r7, #12]
}
 8015a7e:	bf00      	nop
 8015a80:	e7fe      	b.n	8015a80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8015a82:	f000 ff7f 	bl	8016984 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015a86:	4b1d      	ldr	r3, [pc, #116]	; (8015afc <xTaskCheckForTimeOut+0xbc>)
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	685b      	ldr	r3, [r3, #4]
 8015a90:	69ba      	ldr	r2, [r7, #24]
 8015a92:	1ad3      	subs	r3, r2, r3
 8015a94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015a96:	683b      	ldr	r3, [r7, #0]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a9e:	d102      	bne.n	8015aa6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	61fb      	str	r3, [r7, #28]
 8015aa4:	e023      	b.n	8015aee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	681a      	ldr	r2, [r3, #0]
 8015aaa:	4b15      	ldr	r3, [pc, #84]	; (8015b00 <xTaskCheckForTimeOut+0xc0>)
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	429a      	cmp	r2, r3
 8015ab0:	d007      	beq.n	8015ac2 <xTaskCheckForTimeOut+0x82>
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	685b      	ldr	r3, [r3, #4]
 8015ab6:	69ba      	ldr	r2, [r7, #24]
 8015ab8:	429a      	cmp	r2, r3
 8015aba:	d302      	bcc.n	8015ac2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015abc:	2301      	movs	r3, #1
 8015abe:	61fb      	str	r3, [r7, #28]
 8015ac0:	e015      	b.n	8015aee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015ac2:	683b      	ldr	r3, [r7, #0]
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	697a      	ldr	r2, [r7, #20]
 8015ac8:	429a      	cmp	r2, r3
 8015aca:	d20b      	bcs.n	8015ae4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015acc:	683b      	ldr	r3, [r7, #0]
 8015ace:	681a      	ldr	r2, [r3, #0]
 8015ad0:	697b      	ldr	r3, [r7, #20]
 8015ad2:	1ad2      	subs	r2, r2, r3
 8015ad4:	683b      	ldr	r3, [r7, #0]
 8015ad6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015ad8:	6878      	ldr	r0, [r7, #4]
 8015ada:	f7ff ff9b 	bl	8015a14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015ade:	2300      	movs	r3, #0
 8015ae0:	61fb      	str	r3, [r7, #28]
 8015ae2:	e004      	b.n	8015aee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8015ae4:	683b      	ldr	r3, [r7, #0]
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015aea:	2301      	movs	r3, #1
 8015aec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015aee:	f000 ff79 	bl	80169e4 <vPortExitCritical>

	return xReturn;
 8015af2:	69fb      	ldr	r3, [r7, #28]
}
 8015af4:	4618      	mov	r0, r3
 8015af6:	3720      	adds	r7, #32
 8015af8:	46bd      	mov	sp, r7
 8015afa:	bd80      	pop	{r7, pc}
 8015afc:	20000cbc 	.word	0x20000cbc
 8015b00:	20000cd0 	.word	0x20000cd0

08015b04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015b04:	b480      	push	{r7}
 8015b06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015b08:	4b03      	ldr	r3, [pc, #12]	; (8015b18 <vTaskMissedYield+0x14>)
 8015b0a:	2201      	movs	r2, #1
 8015b0c:	601a      	str	r2, [r3, #0]
}
 8015b0e:	bf00      	nop
 8015b10:	46bd      	mov	sp, r7
 8015b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b16:	4770      	bx	lr
 8015b18:	20000ccc 	.word	0x20000ccc

08015b1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	b082      	sub	sp, #8
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015b24:	f000 f854 	bl	8015bd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015b28:	4b07      	ldr	r3, [pc, #28]	; (8015b48 <prvIdleTask+0x2c>)
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	2b01      	cmp	r3, #1
 8015b2e:	d907      	bls.n	8015b40 <prvIdleTask+0x24>
			{
				taskYIELD();
 8015b30:	4b06      	ldr	r3, [pc, #24]	; (8015b4c <prvIdleTask+0x30>)
 8015b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b36:	601a      	str	r2, [r3, #0]
 8015b38:	f3bf 8f4f 	dsb	sy
 8015b3c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8015b40:	f7fa fc6a 	bl	8010418 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8015b44:	e7ee      	b.n	8015b24 <prvIdleTask+0x8>
 8015b46:	bf00      	nop
 8015b48:	200007e8 	.word	0x200007e8
 8015b4c:	e000ed04 	.word	0xe000ed04

08015b50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b082      	sub	sp, #8
 8015b54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015b56:	2300      	movs	r3, #0
 8015b58:	607b      	str	r3, [r7, #4]
 8015b5a:	e00c      	b.n	8015b76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015b5c:	687a      	ldr	r2, [r7, #4]
 8015b5e:	4613      	mov	r3, r2
 8015b60:	009b      	lsls	r3, r3, #2
 8015b62:	4413      	add	r3, r2
 8015b64:	009b      	lsls	r3, r3, #2
 8015b66:	4a12      	ldr	r2, [pc, #72]	; (8015bb0 <prvInitialiseTaskLists+0x60>)
 8015b68:	4413      	add	r3, r2
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	f7fe f9ec 	bl	8013f48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	3301      	adds	r3, #1
 8015b74:	607b      	str	r3, [r7, #4]
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	2b37      	cmp	r3, #55	; 0x37
 8015b7a:	d9ef      	bls.n	8015b5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015b7c:	480d      	ldr	r0, [pc, #52]	; (8015bb4 <prvInitialiseTaskLists+0x64>)
 8015b7e:	f7fe f9e3 	bl	8013f48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015b82:	480d      	ldr	r0, [pc, #52]	; (8015bb8 <prvInitialiseTaskLists+0x68>)
 8015b84:	f7fe f9e0 	bl	8013f48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015b88:	480c      	ldr	r0, [pc, #48]	; (8015bbc <prvInitialiseTaskLists+0x6c>)
 8015b8a:	f7fe f9dd 	bl	8013f48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015b8e:	480c      	ldr	r0, [pc, #48]	; (8015bc0 <prvInitialiseTaskLists+0x70>)
 8015b90:	f7fe f9da 	bl	8013f48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015b94:	480b      	ldr	r0, [pc, #44]	; (8015bc4 <prvInitialiseTaskLists+0x74>)
 8015b96:	f7fe f9d7 	bl	8013f48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015b9a:	4b0b      	ldr	r3, [pc, #44]	; (8015bc8 <prvInitialiseTaskLists+0x78>)
 8015b9c:	4a05      	ldr	r2, [pc, #20]	; (8015bb4 <prvInitialiseTaskLists+0x64>)
 8015b9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015ba0:	4b0a      	ldr	r3, [pc, #40]	; (8015bcc <prvInitialiseTaskLists+0x7c>)
 8015ba2:	4a05      	ldr	r2, [pc, #20]	; (8015bb8 <prvInitialiseTaskLists+0x68>)
 8015ba4:	601a      	str	r2, [r3, #0]
}
 8015ba6:	bf00      	nop
 8015ba8:	3708      	adds	r7, #8
 8015baa:	46bd      	mov	sp, r7
 8015bac:	bd80      	pop	{r7, pc}
 8015bae:	bf00      	nop
 8015bb0:	200007e8 	.word	0x200007e8
 8015bb4:	20000c48 	.word	0x20000c48
 8015bb8:	20000c5c 	.word	0x20000c5c
 8015bbc:	20000c78 	.word	0x20000c78
 8015bc0:	20000c8c 	.word	0x20000c8c
 8015bc4:	20000ca4 	.word	0x20000ca4
 8015bc8:	20000c70 	.word	0x20000c70
 8015bcc:	20000c74 	.word	0x20000c74

08015bd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b082      	sub	sp, #8
 8015bd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015bd6:	e019      	b.n	8015c0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015bd8:	f000 fed4 	bl	8016984 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015bdc:	4b10      	ldr	r3, [pc, #64]	; (8015c20 <prvCheckTasksWaitingTermination+0x50>)
 8015bde:	68db      	ldr	r3, [r3, #12]
 8015be0:	68db      	ldr	r3, [r3, #12]
 8015be2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	3304      	adds	r3, #4
 8015be8:	4618      	mov	r0, r3
 8015bea:	f7fe fa37 	bl	801405c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015bee:	4b0d      	ldr	r3, [pc, #52]	; (8015c24 <prvCheckTasksWaitingTermination+0x54>)
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	3b01      	subs	r3, #1
 8015bf4:	4a0b      	ldr	r2, [pc, #44]	; (8015c24 <prvCheckTasksWaitingTermination+0x54>)
 8015bf6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015bf8:	4b0b      	ldr	r3, [pc, #44]	; (8015c28 <prvCheckTasksWaitingTermination+0x58>)
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	3b01      	subs	r3, #1
 8015bfe:	4a0a      	ldr	r2, [pc, #40]	; (8015c28 <prvCheckTasksWaitingTermination+0x58>)
 8015c00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015c02:	f000 feef 	bl	80169e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015c06:	6878      	ldr	r0, [r7, #4]
 8015c08:	f000 f810 	bl	8015c2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015c0c:	4b06      	ldr	r3, [pc, #24]	; (8015c28 <prvCheckTasksWaitingTermination+0x58>)
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d1e1      	bne.n	8015bd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015c14:	bf00      	nop
 8015c16:	bf00      	nop
 8015c18:	3708      	adds	r7, #8
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	bd80      	pop	{r7, pc}
 8015c1e:	bf00      	nop
 8015c20:	20000c8c 	.word	0x20000c8c
 8015c24:	20000cb8 	.word	0x20000cb8
 8015c28:	20000ca0 	.word	0x20000ca0

08015c2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015c2c:	b580      	push	{r7, lr}
 8015c2e:	b084      	sub	sp, #16
 8015c30:	af00      	add	r7, sp, #0
 8015c32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d108      	bne.n	8015c50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c42:	4618      	mov	r0, r3
 8015c44:	f001 f890 	bl	8016d68 <vPortFree>
				vPortFree( pxTCB );
 8015c48:	6878      	ldr	r0, [r7, #4]
 8015c4a:	f001 f88d 	bl	8016d68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015c4e:	e018      	b.n	8015c82 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015c56:	2b01      	cmp	r3, #1
 8015c58:	d103      	bne.n	8015c62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015c5a:	6878      	ldr	r0, [r7, #4]
 8015c5c:	f001 f884 	bl	8016d68 <vPortFree>
	}
 8015c60:	e00f      	b.n	8015c82 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015c68:	2b02      	cmp	r3, #2
 8015c6a:	d00a      	beq.n	8015c82 <prvDeleteTCB+0x56>
	__asm volatile
 8015c6c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8015c70:	f383 8811 	msr	BASEPRI, r3
 8015c74:	f3bf 8f6f 	isb	sy
 8015c78:	f3bf 8f4f 	dsb	sy
 8015c7c:	60fb      	str	r3, [r7, #12]
}
 8015c7e:	bf00      	nop
 8015c80:	e7fe      	b.n	8015c80 <prvDeleteTCB+0x54>
	}
 8015c82:	bf00      	nop
 8015c84:	3710      	adds	r7, #16
 8015c86:	46bd      	mov	sp, r7
 8015c88:	bd80      	pop	{r7, pc}
	...

08015c8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015c8c:	b480      	push	{r7}
 8015c8e:	b083      	sub	sp, #12
 8015c90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015c92:	4b0c      	ldr	r3, [pc, #48]	; (8015cc4 <prvResetNextTaskUnblockTime+0x38>)
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d104      	bne.n	8015ca6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015c9c:	4b0a      	ldr	r3, [pc, #40]	; (8015cc8 <prvResetNextTaskUnblockTime+0x3c>)
 8015c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8015ca2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015ca4:	e008      	b.n	8015cb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015ca6:	4b07      	ldr	r3, [pc, #28]	; (8015cc4 <prvResetNextTaskUnblockTime+0x38>)
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	68db      	ldr	r3, [r3, #12]
 8015cac:	68db      	ldr	r3, [r3, #12]
 8015cae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	685b      	ldr	r3, [r3, #4]
 8015cb4:	4a04      	ldr	r2, [pc, #16]	; (8015cc8 <prvResetNextTaskUnblockTime+0x3c>)
 8015cb6:	6013      	str	r3, [r2, #0]
}
 8015cb8:	bf00      	nop
 8015cba:	370c      	adds	r7, #12
 8015cbc:	46bd      	mov	sp, r7
 8015cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc2:	4770      	bx	lr
 8015cc4:	20000c70 	.word	0x20000c70
 8015cc8:	20000cd8 	.word	0x20000cd8

08015ccc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015ccc:	b480      	push	{r7}
 8015cce:	b083      	sub	sp, #12
 8015cd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015cd2:	4b0b      	ldr	r3, [pc, #44]	; (8015d00 <xTaskGetSchedulerState+0x34>)
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d102      	bne.n	8015ce0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015cda:	2301      	movs	r3, #1
 8015cdc:	607b      	str	r3, [r7, #4]
 8015cde:	e008      	b.n	8015cf2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015ce0:	4b08      	ldr	r3, [pc, #32]	; (8015d04 <xTaskGetSchedulerState+0x38>)
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d102      	bne.n	8015cee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015ce8:	2302      	movs	r3, #2
 8015cea:	607b      	str	r3, [r7, #4]
 8015cec:	e001      	b.n	8015cf2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015cee:	2300      	movs	r3, #0
 8015cf0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015cf2:	687b      	ldr	r3, [r7, #4]
	}
 8015cf4:	4618      	mov	r0, r3
 8015cf6:	370c      	adds	r7, #12
 8015cf8:	46bd      	mov	sp, r7
 8015cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cfe:	4770      	bx	lr
 8015d00:	20000cc4 	.word	0x20000cc4
 8015d04:	20000ce0 	.word	0x20000ce0

08015d08 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b084      	sub	sp, #16
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8015d14:	2300      	movs	r3, #0
 8015d16:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d051      	beq.n	8015dc2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8015d1e:	68bb      	ldr	r3, [r7, #8]
 8015d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015d22:	4b2a      	ldr	r3, [pc, #168]	; (8015dcc <xTaskPriorityInherit+0xc4>)
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d28:	429a      	cmp	r2, r3
 8015d2a:	d241      	bcs.n	8015db0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015d2c:	68bb      	ldr	r3, [r7, #8]
 8015d2e:	699b      	ldr	r3, [r3, #24]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	db06      	blt.n	8015d42 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015d34:	4b25      	ldr	r3, [pc, #148]	; (8015dcc <xTaskPriorityInherit+0xc4>)
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015d3e:	68bb      	ldr	r3, [r7, #8]
 8015d40:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8015d42:	68bb      	ldr	r3, [r7, #8]
 8015d44:	6959      	ldr	r1, [r3, #20]
 8015d46:	68bb      	ldr	r3, [r7, #8]
 8015d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015d4a:	4613      	mov	r3, r2
 8015d4c:	009b      	lsls	r3, r3, #2
 8015d4e:	4413      	add	r3, r2
 8015d50:	009b      	lsls	r3, r3, #2
 8015d52:	4a1f      	ldr	r2, [pc, #124]	; (8015dd0 <xTaskPriorityInherit+0xc8>)
 8015d54:	4413      	add	r3, r2
 8015d56:	4299      	cmp	r1, r3
 8015d58:	d122      	bne.n	8015da0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015d5a:	68bb      	ldr	r3, [r7, #8]
 8015d5c:	3304      	adds	r3, #4
 8015d5e:	4618      	mov	r0, r3
 8015d60:	f7fe f97c 	bl	801405c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015d64:	4b19      	ldr	r3, [pc, #100]	; (8015dcc <xTaskPriorityInherit+0xc4>)
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015d6a:	68bb      	ldr	r3, [r7, #8]
 8015d6c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8015d6e:	68bb      	ldr	r3, [r7, #8]
 8015d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015d72:	4b18      	ldr	r3, [pc, #96]	; (8015dd4 <xTaskPriorityInherit+0xcc>)
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	429a      	cmp	r2, r3
 8015d78:	d903      	bls.n	8015d82 <xTaskPriorityInherit+0x7a>
 8015d7a:	68bb      	ldr	r3, [r7, #8]
 8015d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d7e:	4a15      	ldr	r2, [pc, #84]	; (8015dd4 <xTaskPriorityInherit+0xcc>)
 8015d80:	6013      	str	r3, [r2, #0]
 8015d82:	68bb      	ldr	r3, [r7, #8]
 8015d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015d86:	4613      	mov	r3, r2
 8015d88:	009b      	lsls	r3, r3, #2
 8015d8a:	4413      	add	r3, r2
 8015d8c:	009b      	lsls	r3, r3, #2
 8015d8e:	4a10      	ldr	r2, [pc, #64]	; (8015dd0 <xTaskPriorityInherit+0xc8>)
 8015d90:	441a      	add	r2, r3
 8015d92:	68bb      	ldr	r3, [r7, #8]
 8015d94:	3304      	adds	r3, #4
 8015d96:	4619      	mov	r1, r3
 8015d98:	4610      	mov	r0, r2
 8015d9a:	f7fe f902 	bl	8013fa2 <vListInsertEnd>
 8015d9e:	e004      	b.n	8015daa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015da0:	4b0a      	ldr	r3, [pc, #40]	; (8015dcc <xTaskPriorityInherit+0xc4>)
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015da6:	68bb      	ldr	r3, [r7, #8]
 8015da8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8015daa:	2301      	movs	r3, #1
 8015dac:	60fb      	str	r3, [r7, #12]
 8015dae:	e008      	b.n	8015dc2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015db0:	68bb      	ldr	r3, [r7, #8]
 8015db2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015db4:	4b05      	ldr	r3, [pc, #20]	; (8015dcc <xTaskPriorityInherit+0xc4>)
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015dba:	429a      	cmp	r2, r3
 8015dbc:	d201      	bcs.n	8015dc2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8015dbe:	2301      	movs	r3, #1
 8015dc0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015dc2:	68fb      	ldr	r3, [r7, #12]
	}
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	3710      	adds	r7, #16
 8015dc8:	46bd      	mov	sp, r7
 8015dca:	bd80      	pop	{r7, pc}
 8015dcc:	200007e4 	.word	0x200007e4
 8015dd0:	200007e8 	.word	0x200007e8
 8015dd4:	20000cc0 	.word	0x20000cc0

08015dd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015dd8:	b580      	push	{r7, lr}
 8015dda:	b086      	sub	sp, #24
 8015ddc:	af00      	add	r7, sp, #0
 8015dde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015de4:	2300      	movs	r3, #0
 8015de6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d056      	beq.n	8015e9c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015dee:	4b2e      	ldr	r3, [pc, #184]	; (8015ea8 <xTaskPriorityDisinherit+0xd0>)
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	693a      	ldr	r2, [r7, #16]
 8015df4:	429a      	cmp	r2, r3
 8015df6:	d00a      	beq.n	8015e0e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015df8:	f04f 0340 	mov.w	r3, #64	; 0x40
 8015dfc:	f383 8811 	msr	BASEPRI, r3
 8015e00:	f3bf 8f6f 	isb	sy
 8015e04:	f3bf 8f4f 	dsb	sy
 8015e08:	60fb      	str	r3, [r7, #12]
}
 8015e0a:	bf00      	nop
 8015e0c:	e7fe      	b.n	8015e0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015e0e:	693b      	ldr	r3, [r7, #16]
 8015e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d10a      	bne.n	8015e2c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8015e16:	f04f 0340 	mov.w	r3, #64	; 0x40
 8015e1a:	f383 8811 	msr	BASEPRI, r3
 8015e1e:	f3bf 8f6f 	isb	sy
 8015e22:	f3bf 8f4f 	dsb	sy
 8015e26:	60bb      	str	r3, [r7, #8]
}
 8015e28:	bf00      	nop
 8015e2a:	e7fe      	b.n	8015e2a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8015e2c:	693b      	ldr	r3, [r7, #16]
 8015e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015e30:	1e5a      	subs	r2, r3, #1
 8015e32:	693b      	ldr	r3, [r7, #16]
 8015e34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015e36:	693b      	ldr	r3, [r7, #16]
 8015e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e3a:	693b      	ldr	r3, [r7, #16]
 8015e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015e3e:	429a      	cmp	r2, r3
 8015e40:	d02c      	beq.n	8015e9c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015e42:	693b      	ldr	r3, [r7, #16]
 8015e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d128      	bne.n	8015e9c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015e4a:	693b      	ldr	r3, [r7, #16]
 8015e4c:	3304      	adds	r3, #4
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f7fe f904 	bl	801405c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015e54:	693b      	ldr	r3, [r7, #16]
 8015e56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015e58:	693b      	ldr	r3, [r7, #16]
 8015e5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015e5c:	693b      	ldr	r3, [r7, #16]
 8015e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015e64:	693b      	ldr	r3, [r7, #16]
 8015e66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015e68:	693b      	ldr	r3, [r7, #16]
 8015e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e6c:	4b0f      	ldr	r3, [pc, #60]	; (8015eac <xTaskPriorityDisinherit+0xd4>)
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	429a      	cmp	r2, r3
 8015e72:	d903      	bls.n	8015e7c <xTaskPriorityDisinherit+0xa4>
 8015e74:	693b      	ldr	r3, [r7, #16]
 8015e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e78:	4a0c      	ldr	r2, [pc, #48]	; (8015eac <xTaskPriorityDisinherit+0xd4>)
 8015e7a:	6013      	str	r3, [r2, #0]
 8015e7c:	693b      	ldr	r3, [r7, #16]
 8015e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e80:	4613      	mov	r3, r2
 8015e82:	009b      	lsls	r3, r3, #2
 8015e84:	4413      	add	r3, r2
 8015e86:	009b      	lsls	r3, r3, #2
 8015e88:	4a09      	ldr	r2, [pc, #36]	; (8015eb0 <xTaskPriorityDisinherit+0xd8>)
 8015e8a:	441a      	add	r2, r3
 8015e8c:	693b      	ldr	r3, [r7, #16]
 8015e8e:	3304      	adds	r3, #4
 8015e90:	4619      	mov	r1, r3
 8015e92:	4610      	mov	r0, r2
 8015e94:	f7fe f885 	bl	8013fa2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015e98:	2301      	movs	r3, #1
 8015e9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015e9c:	697b      	ldr	r3, [r7, #20]
	}
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	3718      	adds	r7, #24
 8015ea2:	46bd      	mov	sp, r7
 8015ea4:	bd80      	pop	{r7, pc}
 8015ea6:	bf00      	nop
 8015ea8:	200007e4 	.word	0x200007e4
 8015eac:	20000cc0 	.word	0x20000cc0
 8015eb0:	200007e8 	.word	0x200007e8

08015eb4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015eb4:	b580      	push	{r7, lr}
 8015eb6:	b088      	sub	sp, #32
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	6078      	str	r0, [r7, #4]
 8015ebc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015ec2:	2301      	movs	r3, #1
 8015ec4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d06a      	beq.n	8015fa2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015ecc:	69bb      	ldr	r3, [r7, #24]
 8015ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d10a      	bne.n	8015eea <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8015ed4:	f04f 0340 	mov.w	r3, #64	; 0x40
 8015ed8:	f383 8811 	msr	BASEPRI, r3
 8015edc:	f3bf 8f6f 	isb	sy
 8015ee0:	f3bf 8f4f 	dsb	sy
 8015ee4:	60fb      	str	r3, [r7, #12]
}
 8015ee6:	bf00      	nop
 8015ee8:	e7fe      	b.n	8015ee8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015eea:	69bb      	ldr	r3, [r7, #24]
 8015eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015eee:	683a      	ldr	r2, [r7, #0]
 8015ef0:	429a      	cmp	r2, r3
 8015ef2:	d902      	bls.n	8015efa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015ef4:	683b      	ldr	r3, [r7, #0]
 8015ef6:	61fb      	str	r3, [r7, #28]
 8015ef8:	e002      	b.n	8015f00 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8015efa:	69bb      	ldr	r3, [r7, #24]
 8015efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015efe:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8015f00:	69bb      	ldr	r3, [r7, #24]
 8015f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f04:	69fa      	ldr	r2, [r7, #28]
 8015f06:	429a      	cmp	r2, r3
 8015f08:	d04b      	beq.n	8015fa2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015f0a:	69bb      	ldr	r3, [r7, #24]
 8015f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015f0e:	697a      	ldr	r2, [r7, #20]
 8015f10:	429a      	cmp	r2, r3
 8015f12:	d146      	bne.n	8015fa2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8015f14:	4b25      	ldr	r3, [pc, #148]	; (8015fac <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	69ba      	ldr	r2, [r7, #24]
 8015f1a:	429a      	cmp	r2, r3
 8015f1c:	d10a      	bne.n	8015f34 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8015f1e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8015f22:	f383 8811 	msr	BASEPRI, r3
 8015f26:	f3bf 8f6f 	isb	sy
 8015f2a:	f3bf 8f4f 	dsb	sy
 8015f2e:	60bb      	str	r3, [r7, #8]
}
 8015f30:	bf00      	nop
 8015f32:	e7fe      	b.n	8015f32 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015f34:	69bb      	ldr	r3, [r7, #24]
 8015f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f38:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8015f3a:	69bb      	ldr	r3, [r7, #24]
 8015f3c:	69fa      	ldr	r2, [r7, #28]
 8015f3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015f40:	69bb      	ldr	r3, [r7, #24]
 8015f42:	699b      	ldr	r3, [r3, #24]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	db04      	blt.n	8015f52 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015f48:	69fb      	ldr	r3, [r7, #28]
 8015f4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015f4e:	69bb      	ldr	r3, [r7, #24]
 8015f50:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015f52:	69bb      	ldr	r3, [r7, #24]
 8015f54:	6959      	ldr	r1, [r3, #20]
 8015f56:	693a      	ldr	r2, [r7, #16]
 8015f58:	4613      	mov	r3, r2
 8015f5a:	009b      	lsls	r3, r3, #2
 8015f5c:	4413      	add	r3, r2
 8015f5e:	009b      	lsls	r3, r3, #2
 8015f60:	4a13      	ldr	r2, [pc, #76]	; (8015fb0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8015f62:	4413      	add	r3, r2
 8015f64:	4299      	cmp	r1, r3
 8015f66:	d11c      	bne.n	8015fa2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015f68:	69bb      	ldr	r3, [r7, #24]
 8015f6a:	3304      	adds	r3, #4
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	f7fe f875 	bl	801405c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8015f72:	69bb      	ldr	r3, [r7, #24]
 8015f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f76:	4b0f      	ldr	r3, [pc, #60]	; (8015fb4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	429a      	cmp	r2, r3
 8015f7c:	d903      	bls.n	8015f86 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8015f7e:	69bb      	ldr	r3, [r7, #24]
 8015f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f82:	4a0c      	ldr	r2, [pc, #48]	; (8015fb4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015f84:	6013      	str	r3, [r2, #0]
 8015f86:	69bb      	ldr	r3, [r7, #24]
 8015f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f8a:	4613      	mov	r3, r2
 8015f8c:	009b      	lsls	r3, r3, #2
 8015f8e:	4413      	add	r3, r2
 8015f90:	009b      	lsls	r3, r3, #2
 8015f92:	4a07      	ldr	r2, [pc, #28]	; (8015fb0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8015f94:	441a      	add	r2, r3
 8015f96:	69bb      	ldr	r3, [r7, #24]
 8015f98:	3304      	adds	r3, #4
 8015f9a:	4619      	mov	r1, r3
 8015f9c:	4610      	mov	r0, r2
 8015f9e:	f7fe f800 	bl	8013fa2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015fa2:	bf00      	nop
 8015fa4:	3720      	adds	r7, #32
 8015fa6:	46bd      	mov	sp, r7
 8015fa8:	bd80      	pop	{r7, pc}
 8015faa:	bf00      	nop
 8015fac:	200007e4 	.word	0x200007e4
 8015fb0:	200007e8 	.word	0x200007e8
 8015fb4:	20000cc0 	.word	0x20000cc0

08015fb8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015fb8:	b480      	push	{r7}
 8015fba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8015fbc:	4b07      	ldr	r3, [pc, #28]	; (8015fdc <pvTaskIncrementMutexHeldCount+0x24>)
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d004      	beq.n	8015fce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015fc4:	4b05      	ldr	r3, [pc, #20]	; (8015fdc <pvTaskIncrementMutexHeldCount+0x24>)
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015fca:	3201      	adds	r2, #1
 8015fcc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8015fce:	4b03      	ldr	r3, [pc, #12]	; (8015fdc <pvTaskIncrementMutexHeldCount+0x24>)
 8015fd0:	681b      	ldr	r3, [r3, #0]
	}
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fda:	4770      	bx	lr
 8015fdc:	200007e4 	.word	0x200007e4

08015fe0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b084      	sub	sp, #16
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	6078      	str	r0, [r7, #4]
 8015fe8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015fea:	4b21      	ldr	r3, [pc, #132]	; (8016070 <prvAddCurrentTaskToDelayedList+0x90>)
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015ff0:	4b20      	ldr	r3, [pc, #128]	; (8016074 <prvAddCurrentTaskToDelayedList+0x94>)
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	3304      	adds	r3, #4
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	f7fe f830 	bl	801405c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016002:	d10a      	bne.n	801601a <prvAddCurrentTaskToDelayedList+0x3a>
 8016004:	683b      	ldr	r3, [r7, #0]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d007      	beq.n	801601a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801600a:	4b1a      	ldr	r3, [pc, #104]	; (8016074 <prvAddCurrentTaskToDelayedList+0x94>)
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	3304      	adds	r3, #4
 8016010:	4619      	mov	r1, r3
 8016012:	4819      	ldr	r0, [pc, #100]	; (8016078 <prvAddCurrentTaskToDelayedList+0x98>)
 8016014:	f7fd ffc5 	bl	8013fa2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016018:	e026      	b.n	8016068 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801601a:	68fa      	ldr	r2, [r7, #12]
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	4413      	add	r3, r2
 8016020:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016022:	4b14      	ldr	r3, [pc, #80]	; (8016074 <prvAddCurrentTaskToDelayedList+0x94>)
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	68ba      	ldr	r2, [r7, #8]
 8016028:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801602a:	68ba      	ldr	r2, [r7, #8]
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	429a      	cmp	r2, r3
 8016030:	d209      	bcs.n	8016046 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016032:	4b12      	ldr	r3, [pc, #72]	; (801607c <prvAddCurrentTaskToDelayedList+0x9c>)
 8016034:	681a      	ldr	r2, [r3, #0]
 8016036:	4b0f      	ldr	r3, [pc, #60]	; (8016074 <prvAddCurrentTaskToDelayedList+0x94>)
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	3304      	adds	r3, #4
 801603c:	4619      	mov	r1, r3
 801603e:	4610      	mov	r0, r2
 8016040:	f7fd ffd3 	bl	8013fea <vListInsert>
}
 8016044:	e010      	b.n	8016068 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016046:	4b0e      	ldr	r3, [pc, #56]	; (8016080 <prvAddCurrentTaskToDelayedList+0xa0>)
 8016048:	681a      	ldr	r2, [r3, #0]
 801604a:	4b0a      	ldr	r3, [pc, #40]	; (8016074 <prvAddCurrentTaskToDelayedList+0x94>)
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	3304      	adds	r3, #4
 8016050:	4619      	mov	r1, r3
 8016052:	4610      	mov	r0, r2
 8016054:	f7fd ffc9 	bl	8013fea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016058:	4b0a      	ldr	r3, [pc, #40]	; (8016084 <prvAddCurrentTaskToDelayedList+0xa4>)
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	68ba      	ldr	r2, [r7, #8]
 801605e:	429a      	cmp	r2, r3
 8016060:	d202      	bcs.n	8016068 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8016062:	4a08      	ldr	r2, [pc, #32]	; (8016084 <prvAddCurrentTaskToDelayedList+0xa4>)
 8016064:	68bb      	ldr	r3, [r7, #8]
 8016066:	6013      	str	r3, [r2, #0]
}
 8016068:	bf00      	nop
 801606a:	3710      	adds	r7, #16
 801606c:	46bd      	mov	sp, r7
 801606e:	bd80      	pop	{r7, pc}
 8016070:	20000cbc 	.word	0x20000cbc
 8016074:	200007e4 	.word	0x200007e4
 8016078:	20000ca4 	.word	0x20000ca4
 801607c:	20000c74 	.word	0x20000c74
 8016080:	20000c70 	.word	0x20000c70
 8016084:	20000cd8 	.word	0x20000cd8

08016088 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b08a      	sub	sp, #40	; 0x28
 801608c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801608e:	2300      	movs	r3, #0
 8016090:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8016092:	f000 fb07 	bl	80166a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8016096:	4b1c      	ldr	r3, [pc, #112]	; (8016108 <xTimerCreateTimerTask+0x80>)
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d021      	beq.n	80160e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801609e:	2300      	movs	r3, #0
 80160a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80160a2:	2300      	movs	r3, #0
 80160a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80160a6:	1d3a      	adds	r2, r7, #4
 80160a8:	f107 0108 	add.w	r1, r7, #8
 80160ac:	f107 030c 	add.w	r3, r7, #12
 80160b0:	4618      	mov	r0, r3
 80160b2:	f7fd ff2f 	bl	8013f14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80160b6:	6879      	ldr	r1, [r7, #4]
 80160b8:	68bb      	ldr	r3, [r7, #8]
 80160ba:	68fa      	ldr	r2, [r7, #12]
 80160bc:	9202      	str	r2, [sp, #8]
 80160be:	9301      	str	r3, [sp, #4]
 80160c0:	2302      	movs	r3, #2
 80160c2:	9300      	str	r3, [sp, #0]
 80160c4:	2300      	movs	r3, #0
 80160c6:	460a      	mov	r2, r1
 80160c8:	4910      	ldr	r1, [pc, #64]	; (801610c <xTimerCreateTimerTask+0x84>)
 80160ca:	4811      	ldr	r0, [pc, #68]	; (8016110 <xTimerCreateTimerTask+0x88>)
 80160cc:	f7fe fe6c 	bl	8014da8 <xTaskCreateStatic>
 80160d0:	4603      	mov	r3, r0
 80160d2:	4a10      	ldr	r2, [pc, #64]	; (8016114 <xTimerCreateTimerTask+0x8c>)
 80160d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80160d6:	4b0f      	ldr	r3, [pc, #60]	; (8016114 <xTimerCreateTimerTask+0x8c>)
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d001      	beq.n	80160e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80160de:	2301      	movs	r3, #1
 80160e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80160e2:	697b      	ldr	r3, [r7, #20]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d10a      	bne.n	80160fe <xTimerCreateTimerTask+0x76>
	__asm volatile
 80160e8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80160ec:	f383 8811 	msr	BASEPRI, r3
 80160f0:	f3bf 8f6f 	isb	sy
 80160f4:	f3bf 8f4f 	dsb	sy
 80160f8:	613b      	str	r3, [r7, #16]
}
 80160fa:	bf00      	nop
 80160fc:	e7fe      	b.n	80160fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80160fe:	697b      	ldr	r3, [r7, #20]
}
 8016100:	4618      	mov	r0, r3
 8016102:	3718      	adds	r7, #24
 8016104:	46bd      	mov	sp, r7
 8016106:	bd80      	pop	{r7, pc}
 8016108:	20000d14 	.word	0x20000d14
 801610c:	0801b0a4 	.word	0x0801b0a4
 8016110:	0801624d 	.word	0x0801624d
 8016114:	20000d18 	.word	0x20000d18

08016118 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b08a      	sub	sp, #40	; 0x28
 801611c:	af00      	add	r7, sp, #0
 801611e:	60f8      	str	r0, [r7, #12]
 8016120:	60b9      	str	r1, [r7, #8]
 8016122:	607a      	str	r2, [r7, #4]
 8016124:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8016126:	2300      	movs	r3, #0
 8016128:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	2b00      	cmp	r3, #0
 801612e:	d10a      	bne.n	8016146 <xTimerGenericCommand+0x2e>
	__asm volatile
 8016130:	f04f 0340 	mov.w	r3, #64	; 0x40
 8016134:	f383 8811 	msr	BASEPRI, r3
 8016138:	f3bf 8f6f 	isb	sy
 801613c:	f3bf 8f4f 	dsb	sy
 8016140:	623b      	str	r3, [r7, #32]
}
 8016142:	bf00      	nop
 8016144:	e7fe      	b.n	8016144 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8016146:	4b1a      	ldr	r3, [pc, #104]	; (80161b0 <xTimerGenericCommand+0x98>)
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	2b00      	cmp	r3, #0
 801614c:	d02a      	beq.n	80161a4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801614e:	68bb      	ldr	r3, [r7, #8]
 8016150:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801615a:	68bb      	ldr	r3, [r7, #8]
 801615c:	2b05      	cmp	r3, #5
 801615e:	dc18      	bgt.n	8016192 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8016160:	f7ff fdb4 	bl	8015ccc <xTaskGetSchedulerState>
 8016164:	4603      	mov	r3, r0
 8016166:	2b02      	cmp	r3, #2
 8016168:	d109      	bne.n	801617e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801616a:	4b11      	ldr	r3, [pc, #68]	; (80161b0 <xTimerGenericCommand+0x98>)
 801616c:	6818      	ldr	r0, [r3, #0]
 801616e:	f107 0110 	add.w	r1, r7, #16
 8016172:	2300      	movs	r3, #0
 8016174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016176:	f7fe f90b 	bl	8014390 <xQueueGenericSend>
 801617a:	6278      	str	r0, [r7, #36]	; 0x24
 801617c:	e012      	b.n	80161a4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801617e:	4b0c      	ldr	r3, [pc, #48]	; (80161b0 <xTimerGenericCommand+0x98>)
 8016180:	6818      	ldr	r0, [r3, #0]
 8016182:	f107 0110 	add.w	r1, r7, #16
 8016186:	2300      	movs	r3, #0
 8016188:	2200      	movs	r2, #0
 801618a:	f7fe f901 	bl	8014390 <xQueueGenericSend>
 801618e:	6278      	str	r0, [r7, #36]	; 0x24
 8016190:	e008      	b.n	80161a4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016192:	4b07      	ldr	r3, [pc, #28]	; (80161b0 <xTimerGenericCommand+0x98>)
 8016194:	6818      	ldr	r0, [r3, #0]
 8016196:	f107 0110 	add.w	r1, r7, #16
 801619a:	2300      	movs	r3, #0
 801619c:	683a      	ldr	r2, [r7, #0]
 801619e:	f7fe f9f5 	bl	801458c <xQueueGenericSendFromISR>
 80161a2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80161a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80161a6:	4618      	mov	r0, r3
 80161a8:	3728      	adds	r7, #40	; 0x28
 80161aa:	46bd      	mov	sp, r7
 80161ac:	bd80      	pop	{r7, pc}
 80161ae:	bf00      	nop
 80161b0:	20000d14 	.word	0x20000d14

080161b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80161b4:	b580      	push	{r7, lr}
 80161b6:	b088      	sub	sp, #32
 80161b8:	af02      	add	r7, sp, #8
 80161ba:	6078      	str	r0, [r7, #4]
 80161bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80161be:	4b22      	ldr	r3, [pc, #136]	; (8016248 <prvProcessExpiredTimer+0x94>)
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	68db      	ldr	r3, [r3, #12]
 80161c4:	68db      	ldr	r3, [r3, #12]
 80161c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80161c8:	697b      	ldr	r3, [r7, #20]
 80161ca:	3304      	adds	r3, #4
 80161cc:	4618      	mov	r0, r3
 80161ce:	f7fd ff45 	bl	801405c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80161d2:	697b      	ldr	r3, [r7, #20]
 80161d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80161d8:	f003 0304 	and.w	r3, r3, #4
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d022      	beq.n	8016226 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80161e0:	697b      	ldr	r3, [r7, #20]
 80161e2:	699a      	ldr	r2, [r3, #24]
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	18d1      	adds	r1, r2, r3
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	683a      	ldr	r2, [r7, #0]
 80161ec:	6978      	ldr	r0, [r7, #20]
 80161ee:	f000 f8d1 	bl	8016394 <prvInsertTimerInActiveList>
 80161f2:	4603      	mov	r3, r0
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d01f      	beq.n	8016238 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80161f8:	2300      	movs	r3, #0
 80161fa:	9300      	str	r3, [sp, #0]
 80161fc:	2300      	movs	r3, #0
 80161fe:	687a      	ldr	r2, [r7, #4]
 8016200:	2100      	movs	r1, #0
 8016202:	6978      	ldr	r0, [r7, #20]
 8016204:	f7ff ff88 	bl	8016118 <xTimerGenericCommand>
 8016208:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801620a:	693b      	ldr	r3, [r7, #16]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d113      	bne.n	8016238 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8016210:	f04f 0340 	mov.w	r3, #64	; 0x40
 8016214:	f383 8811 	msr	BASEPRI, r3
 8016218:	f3bf 8f6f 	isb	sy
 801621c:	f3bf 8f4f 	dsb	sy
 8016220:	60fb      	str	r3, [r7, #12]
}
 8016222:	bf00      	nop
 8016224:	e7fe      	b.n	8016224 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016226:	697b      	ldr	r3, [r7, #20]
 8016228:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801622c:	f023 0301 	bic.w	r3, r3, #1
 8016230:	b2da      	uxtb	r2, r3
 8016232:	697b      	ldr	r3, [r7, #20]
 8016234:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016238:	697b      	ldr	r3, [r7, #20]
 801623a:	6a1b      	ldr	r3, [r3, #32]
 801623c:	6978      	ldr	r0, [r7, #20]
 801623e:	4798      	blx	r3
}
 8016240:	bf00      	nop
 8016242:	3718      	adds	r7, #24
 8016244:	46bd      	mov	sp, r7
 8016246:	bd80      	pop	{r7, pc}
 8016248:	20000d0c 	.word	0x20000d0c

0801624c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801624c:	b580      	push	{r7, lr}
 801624e:	b084      	sub	sp, #16
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016254:	f107 0308 	add.w	r3, r7, #8
 8016258:	4618      	mov	r0, r3
 801625a:	f000 f857 	bl	801630c <prvGetNextExpireTime>
 801625e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8016260:	68bb      	ldr	r3, [r7, #8]
 8016262:	4619      	mov	r1, r3
 8016264:	68f8      	ldr	r0, [r7, #12]
 8016266:	f000 f803 	bl	8016270 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801626a:	f000 f8d5 	bl	8016418 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801626e:	e7f1      	b.n	8016254 <prvTimerTask+0x8>

08016270 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8016270:	b580      	push	{r7, lr}
 8016272:	b084      	sub	sp, #16
 8016274:	af00      	add	r7, sp, #0
 8016276:	6078      	str	r0, [r7, #4]
 8016278:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801627a:	f7ff f91f 	bl	80154bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801627e:	f107 0308 	add.w	r3, r7, #8
 8016282:	4618      	mov	r0, r3
 8016284:	f000 f866 	bl	8016354 <prvSampleTimeNow>
 8016288:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801628a:	68bb      	ldr	r3, [r7, #8]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d130      	bne.n	80162f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8016290:	683b      	ldr	r3, [r7, #0]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d10a      	bne.n	80162ac <prvProcessTimerOrBlockTask+0x3c>
 8016296:	687a      	ldr	r2, [r7, #4]
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	429a      	cmp	r2, r3
 801629c:	d806      	bhi.n	80162ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801629e:	f7ff f91b 	bl	80154d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80162a2:	68f9      	ldr	r1, [r7, #12]
 80162a4:	6878      	ldr	r0, [r7, #4]
 80162a6:	f7ff ff85 	bl	80161b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80162aa:	e024      	b.n	80162f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80162ac:	683b      	ldr	r3, [r7, #0]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d008      	beq.n	80162c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80162b2:	4b13      	ldr	r3, [pc, #76]	; (8016300 <prvProcessTimerOrBlockTask+0x90>)
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d101      	bne.n	80162c0 <prvProcessTimerOrBlockTask+0x50>
 80162bc:	2301      	movs	r3, #1
 80162be:	e000      	b.n	80162c2 <prvProcessTimerOrBlockTask+0x52>
 80162c0:	2300      	movs	r3, #0
 80162c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80162c4:	4b0f      	ldr	r3, [pc, #60]	; (8016304 <prvProcessTimerOrBlockTask+0x94>)
 80162c6:	6818      	ldr	r0, [r3, #0]
 80162c8:	687a      	ldr	r2, [r7, #4]
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	1ad3      	subs	r3, r2, r3
 80162ce:	683a      	ldr	r2, [r7, #0]
 80162d0:	4619      	mov	r1, r3
 80162d2:	f7fe fd35 	bl	8014d40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80162d6:	f7ff f8ff 	bl	80154d8 <xTaskResumeAll>
 80162da:	4603      	mov	r3, r0
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d10a      	bne.n	80162f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80162e0:	4b09      	ldr	r3, [pc, #36]	; (8016308 <prvProcessTimerOrBlockTask+0x98>)
 80162e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80162e6:	601a      	str	r2, [r3, #0]
 80162e8:	f3bf 8f4f 	dsb	sy
 80162ec:	f3bf 8f6f 	isb	sy
}
 80162f0:	e001      	b.n	80162f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80162f2:	f7ff f8f1 	bl	80154d8 <xTaskResumeAll>
}
 80162f6:	bf00      	nop
 80162f8:	3710      	adds	r7, #16
 80162fa:	46bd      	mov	sp, r7
 80162fc:	bd80      	pop	{r7, pc}
 80162fe:	bf00      	nop
 8016300:	20000d10 	.word	0x20000d10
 8016304:	20000d14 	.word	0x20000d14
 8016308:	e000ed04 	.word	0xe000ed04

0801630c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801630c:	b480      	push	{r7}
 801630e:	b085      	sub	sp, #20
 8016310:	af00      	add	r7, sp, #0
 8016312:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8016314:	4b0e      	ldr	r3, [pc, #56]	; (8016350 <prvGetNextExpireTime+0x44>)
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d101      	bne.n	8016322 <prvGetNextExpireTime+0x16>
 801631e:	2201      	movs	r2, #1
 8016320:	e000      	b.n	8016324 <prvGetNextExpireTime+0x18>
 8016322:	2200      	movs	r2, #0
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d105      	bne.n	801633c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016330:	4b07      	ldr	r3, [pc, #28]	; (8016350 <prvGetNextExpireTime+0x44>)
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	68db      	ldr	r3, [r3, #12]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	60fb      	str	r3, [r7, #12]
 801633a:	e001      	b.n	8016340 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801633c:	2300      	movs	r3, #0
 801633e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8016340:	68fb      	ldr	r3, [r7, #12]
}
 8016342:	4618      	mov	r0, r3
 8016344:	3714      	adds	r7, #20
 8016346:	46bd      	mov	sp, r7
 8016348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801634c:	4770      	bx	lr
 801634e:	bf00      	nop
 8016350:	20000d0c 	.word	0x20000d0c

08016354 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8016354:	b580      	push	{r7, lr}
 8016356:	b084      	sub	sp, #16
 8016358:	af00      	add	r7, sp, #0
 801635a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801635c:	f7ff f95a 	bl	8015614 <xTaskGetTickCount>
 8016360:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8016362:	4b0b      	ldr	r3, [pc, #44]	; (8016390 <prvSampleTimeNow+0x3c>)
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	68fa      	ldr	r2, [r7, #12]
 8016368:	429a      	cmp	r2, r3
 801636a:	d205      	bcs.n	8016378 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801636c:	f000 f936 	bl	80165dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	2201      	movs	r2, #1
 8016374:	601a      	str	r2, [r3, #0]
 8016376:	e002      	b.n	801637e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	2200      	movs	r2, #0
 801637c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801637e:	4a04      	ldr	r2, [pc, #16]	; (8016390 <prvSampleTimeNow+0x3c>)
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8016384:	68fb      	ldr	r3, [r7, #12]
}
 8016386:	4618      	mov	r0, r3
 8016388:	3710      	adds	r7, #16
 801638a:	46bd      	mov	sp, r7
 801638c:	bd80      	pop	{r7, pc}
 801638e:	bf00      	nop
 8016390:	20000d1c 	.word	0x20000d1c

08016394 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8016394:	b580      	push	{r7, lr}
 8016396:	b086      	sub	sp, #24
 8016398:	af00      	add	r7, sp, #0
 801639a:	60f8      	str	r0, [r7, #12]
 801639c:	60b9      	str	r1, [r7, #8]
 801639e:	607a      	str	r2, [r7, #4]
 80163a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80163a2:	2300      	movs	r3, #0
 80163a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	68ba      	ldr	r2, [r7, #8]
 80163aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	68fa      	ldr	r2, [r7, #12]
 80163b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80163b2:	68ba      	ldr	r2, [r7, #8]
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	429a      	cmp	r2, r3
 80163b8:	d812      	bhi.n	80163e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80163ba:	687a      	ldr	r2, [r7, #4]
 80163bc:	683b      	ldr	r3, [r7, #0]
 80163be:	1ad2      	subs	r2, r2, r3
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	699b      	ldr	r3, [r3, #24]
 80163c4:	429a      	cmp	r2, r3
 80163c6:	d302      	bcc.n	80163ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80163c8:	2301      	movs	r3, #1
 80163ca:	617b      	str	r3, [r7, #20]
 80163cc:	e01b      	b.n	8016406 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80163ce:	4b10      	ldr	r3, [pc, #64]	; (8016410 <prvInsertTimerInActiveList+0x7c>)
 80163d0:	681a      	ldr	r2, [r3, #0]
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	3304      	adds	r3, #4
 80163d6:	4619      	mov	r1, r3
 80163d8:	4610      	mov	r0, r2
 80163da:	f7fd fe06 	bl	8013fea <vListInsert>
 80163de:	e012      	b.n	8016406 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80163e0:	687a      	ldr	r2, [r7, #4]
 80163e2:	683b      	ldr	r3, [r7, #0]
 80163e4:	429a      	cmp	r2, r3
 80163e6:	d206      	bcs.n	80163f6 <prvInsertTimerInActiveList+0x62>
 80163e8:	68ba      	ldr	r2, [r7, #8]
 80163ea:	683b      	ldr	r3, [r7, #0]
 80163ec:	429a      	cmp	r2, r3
 80163ee:	d302      	bcc.n	80163f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80163f0:	2301      	movs	r3, #1
 80163f2:	617b      	str	r3, [r7, #20]
 80163f4:	e007      	b.n	8016406 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80163f6:	4b07      	ldr	r3, [pc, #28]	; (8016414 <prvInsertTimerInActiveList+0x80>)
 80163f8:	681a      	ldr	r2, [r3, #0]
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	3304      	adds	r3, #4
 80163fe:	4619      	mov	r1, r3
 8016400:	4610      	mov	r0, r2
 8016402:	f7fd fdf2 	bl	8013fea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8016406:	697b      	ldr	r3, [r7, #20]
}
 8016408:	4618      	mov	r0, r3
 801640a:	3718      	adds	r7, #24
 801640c:	46bd      	mov	sp, r7
 801640e:	bd80      	pop	{r7, pc}
 8016410:	20000d10 	.word	0x20000d10
 8016414:	20000d0c 	.word	0x20000d0c

08016418 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8016418:	b580      	push	{r7, lr}
 801641a:	b08e      	sub	sp, #56	; 0x38
 801641c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801641e:	e0ca      	b.n	80165b6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	2b00      	cmp	r3, #0
 8016424:	da18      	bge.n	8016458 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8016426:	1d3b      	adds	r3, r7, #4
 8016428:	3304      	adds	r3, #4
 801642a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801642c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801642e:	2b00      	cmp	r3, #0
 8016430:	d10a      	bne.n	8016448 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8016432:	f04f 0340 	mov.w	r3, #64	; 0x40
 8016436:	f383 8811 	msr	BASEPRI, r3
 801643a:	f3bf 8f6f 	isb	sy
 801643e:	f3bf 8f4f 	dsb	sy
 8016442:	61fb      	str	r3, [r7, #28]
}
 8016444:	bf00      	nop
 8016446:	e7fe      	b.n	8016446 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8016448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801644e:	6850      	ldr	r0, [r2, #4]
 8016450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016452:	6892      	ldr	r2, [r2, #8]
 8016454:	4611      	mov	r1, r2
 8016456:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	2b00      	cmp	r3, #0
 801645c:	f2c0 80aa 	blt.w	80165b4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8016464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016466:	695b      	ldr	r3, [r3, #20]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d004      	beq.n	8016476 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801646c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801646e:	3304      	adds	r3, #4
 8016470:	4618      	mov	r0, r3
 8016472:	f7fd fdf3 	bl	801405c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016476:	463b      	mov	r3, r7
 8016478:	4618      	mov	r0, r3
 801647a:	f7ff ff6b 	bl	8016354 <prvSampleTimeNow>
 801647e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	2b09      	cmp	r3, #9
 8016484:	f200 8097 	bhi.w	80165b6 <prvProcessReceivedCommands+0x19e>
 8016488:	a201      	add	r2, pc, #4	; (adr r2, 8016490 <prvProcessReceivedCommands+0x78>)
 801648a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801648e:	bf00      	nop
 8016490:	080164b9 	.word	0x080164b9
 8016494:	080164b9 	.word	0x080164b9
 8016498:	080164b9 	.word	0x080164b9
 801649c:	0801652d 	.word	0x0801652d
 80164a0:	08016541 	.word	0x08016541
 80164a4:	0801658b 	.word	0x0801658b
 80164a8:	080164b9 	.word	0x080164b9
 80164ac:	080164b9 	.word	0x080164b9
 80164b0:	0801652d 	.word	0x0801652d
 80164b4:	08016541 	.word	0x08016541
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80164b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80164be:	f043 0301 	orr.w	r3, r3, #1
 80164c2:	b2da      	uxtb	r2, r3
 80164c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80164ca:	68ba      	ldr	r2, [r7, #8]
 80164cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164ce:	699b      	ldr	r3, [r3, #24]
 80164d0:	18d1      	adds	r1, r2, r3
 80164d2:	68bb      	ldr	r3, [r7, #8]
 80164d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80164d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80164d8:	f7ff ff5c 	bl	8016394 <prvInsertTimerInActiveList>
 80164dc:	4603      	mov	r3, r0
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d069      	beq.n	80165b6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80164e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164e4:	6a1b      	ldr	r3, [r3, #32]
 80164e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80164e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80164ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80164f0:	f003 0304 	and.w	r3, r3, #4
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d05e      	beq.n	80165b6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80164f8:	68ba      	ldr	r2, [r7, #8]
 80164fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164fc:	699b      	ldr	r3, [r3, #24]
 80164fe:	441a      	add	r2, r3
 8016500:	2300      	movs	r3, #0
 8016502:	9300      	str	r3, [sp, #0]
 8016504:	2300      	movs	r3, #0
 8016506:	2100      	movs	r1, #0
 8016508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801650a:	f7ff fe05 	bl	8016118 <xTimerGenericCommand>
 801650e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8016510:	6a3b      	ldr	r3, [r7, #32]
 8016512:	2b00      	cmp	r3, #0
 8016514:	d14f      	bne.n	80165b6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8016516:	f04f 0340 	mov.w	r3, #64	; 0x40
 801651a:	f383 8811 	msr	BASEPRI, r3
 801651e:	f3bf 8f6f 	isb	sy
 8016522:	f3bf 8f4f 	dsb	sy
 8016526:	61bb      	str	r3, [r7, #24]
}
 8016528:	bf00      	nop
 801652a:	e7fe      	b.n	801652a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801652e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016532:	f023 0301 	bic.w	r3, r3, #1
 8016536:	b2da      	uxtb	r2, r3
 8016538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801653a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801653e:	e03a      	b.n	80165b6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016542:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016546:	f043 0301 	orr.w	r3, r3, #1
 801654a:	b2da      	uxtb	r2, r3
 801654c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801654e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016552:	68ba      	ldr	r2, [r7, #8]
 8016554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016556:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8016558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801655a:	699b      	ldr	r3, [r3, #24]
 801655c:	2b00      	cmp	r3, #0
 801655e:	d10a      	bne.n	8016576 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8016560:	f04f 0340 	mov.w	r3, #64	; 0x40
 8016564:	f383 8811 	msr	BASEPRI, r3
 8016568:	f3bf 8f6f 	isb	sy
 801656c:	f3bf 8f4f 	dsb	sy
 8016570:	617b      	str	r3, [r7, #20]
}
 8016572:	bf00      	nop
 8016574:	e7fe      	b.n	8016574 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8016576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016578:	699a      	ldr	r2, [r3, #24]
 801657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801657c:	18d1      	adds	r1, r2, r3
 801657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016584:	f7ff ff06 	bl	8016394 <prvInsertTimerInActiveList>
					break;
 8016588:	e015      	b.n	80165b6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801658c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016590:	f003 0302 	and.w	r3, r3, #2
 8016594:	2b00      	cmp	r3, #0
 8016596:	d103      	bne.n	80165a0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8016598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801659a:	f000 fbe5 	bl	8016d68 <vPortFree>
 801659e:	e00a      	b.n	80165b6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80165a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80165a6:	f023 0301 	bic.w	r3, r3, #1
 80165aa:	b2da      	uxtb	r2, r3
 80165ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80165b2:	e000      	b.n	80165b6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80165b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80165b6:	4b08      	ldr	r3, [pc, #32]	; (80165d8 <prvProcessReceivedCommands+0x1c0>)
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	1d39      	adds	r1, r7, #4
 80165bc:	2200      	movs	r2, #0
 80165be:	4618      	mov	r0, r3
 80165c0:	f7fe f880 	bl	80146c4 <xQueueReceive>
 80165c4:	4603      	mov	r3, r0
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	f47f af2a 	bne.w	8016420 <prvProcessReceivedCommands+0x8>
	}
}
 80165cc:	bf00      	nop
 80165ce:	bf00      	nop
 80165d0:	3730      	adds	r7, #48	; 0x30
 80165d2:	46bd      	mov	sp, r7
 80165d4:	bd80      	pop	{r7, pc}
 80165d6:	bf00      	nop
 80165d8:	20000d14 	.word	0x20000d14

080165dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80165dc:	b580      	push	{r7, lr}
 80165de:	b088      	sub	sp, #32
 80165e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80165e2:	e048      	b.n	8016676 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80165e4:	4b2d      	ldr	r3, [pc, #180]	; (801669c <prvSwitchTimerLists+0xc0>)
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	68db      	ldr	r3, [r3, #12]
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80165ee:	4b2b      	ldr	r3, [pc, #172]	; (801669c <prvSwitchTimerLists+0xc0>)
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	68db      	ldr	r3, [r3, #12]
 80165f4:	68db      	ldr	r3, [r3, #12]
 80165f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	3304      	adds	r3, #4
 80165fc:	4618      	mov	r0, r3
 80165fe:	f7fd fd2d 	bl	801405c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	6a1b      	ldr	r3, [r3, #32]
 8016606:	68f8      	ldr	r0, [r7, #12]
 8016608:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016610:	f003 0304 	and.w	r3, r3, #4
 8016614:	2b00      	cmp	r3, #0
 8016616:	d02e      	beq.n	8016676 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	699b      	ldr	r3, [r3, #24]
 801661c:	693a      	ldr	r2, [r7, #16]
 801661e:	4413      	add	r3, r2
 8016620:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8016622:	68ba      	ldr	r2, [r7, #8]
 8016624:	693b      	ldr	r3, [r7, #16]
 8016626:	429a      	cmp	r2, r3
 8016628:	d90e      	bls.n	8016648 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	68ba      	ldr	r2, [r7, #8]
 801662e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	68fa      	ldr	r2, [r7, #12]
 8016634:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016636:	4b19      	ldr	r3, [pc, #100]	; (801669c <prvSwitchTimerLists+0xc0>)
 8016638:	681a      	ldr	r2, [r3, #0]
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	3304      	adds	r3, #4
 801663e:	4619      	mov	r1, r3
 8016640:	4610      	mov	r0, r2
 8016642:	f7fd fcd2 	bl	8013fea <vListInsert>
 8016646:	e016      	b.n	8016676 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016648:	2300      	movs	r3, #0
 801664a:	9300      	str	r3, [sp, #0]
 801664c:	2300      	movs	r3, #0
 801664e:	693a      	ldr	r2, [r7, #16]
 8016650:	2100      	movs	r1, #0
 8016652:	68f8      	ldr	r0, [r7, #12]
 8016654:	f7ff fd60 	bl	8016118 <xTimerGenericCommand>
 8016658:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	2b00      	cmp	r3, #0
 801665e:	d10a      	bne.n	8016676 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8016660:	f04f 0340 	mov.w	r3, #64	; 0x40
 8016664:	f383 8811 	msr	BASEPRI, r3
 8016668:	f3bf 8f6f 	isb	sy
 801666c:	f3bf 8f4f 	dsb	sy
 8016670:	603b      	str	r3, [r7, #0]
}
 8016672:	bf00      	nop
 8016674:	e7fe      	b.n	8016674 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016676:	4b09      	ldr	r3, [pc, #36]	; (801669c <prvSwitchTimerLists+0xc0>)
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	2b00      	cmp	r3, #0
 801667e:	d1b1      	bne.n	80165e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8016680:	4b06      	ldr	r3, [pc, #24]	; (801669c <prvSwitchTimerLists+0xc0>)
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8016686:	4b06      	ldr	r3, [pc, #24]	; (80166a0 <prvSwitchTimerLists+0xc4>)
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	4a04      	ldr	r2, [pc, #16]	; (801669c <prvSwitchTimerLists+0xc0>)
 801668c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801668e:	4a04      	ldr	r2, [pc, #16]	; (80166a0 <prvSwitchTimerLists+0xc4>)
 8016690:	697b      	ldr	r3, [r7, #20]
 8016692:	6013      	str	r3, [r2, #0]
}
 8016694:	bf00      	nop
 8016696:	3718      	adds	r7, #24
 8016698:	46bd      	mov	sp, r7
 801669a:	bd80      	pop	{r7, pc}
 801669c:	20000d0c 	.word	0x20000d0c
 80166a0:	20000d10 	.word	0x20000d10

080166a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80166a4:	b580      	push	{r7, lr}
 80166a6:	b082      	sub	sp, #8
 80166a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80166aa:	f000 f96b 	bl	8016984 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80166ae:	4b15      	ldr	r3, [pc, #84]	; (8016704 <prvCheckForValidListAndQueue+0x60>)
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d120      	bne.n	80166f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80166b6:	4814      	ldr	r0, [pc, #80]	; (8016708 <prvCheckForValidListAndQueue+0x64>)
 80166b8:	f7fd fc46 	bl	8013f48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80166bc:	4813      	ldr	r0, [pc, #76]	; (801670c <prvCheckForValidListAndQueue+0x68>)
 80166be:	f7fd fc43 	bl	8013f48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80166c2:	4b13      	ldr	r3, [pc, #76]	; (8016710 <prvCheckForValidListAndQueue+0x6c>)
 80166c4:	4a10      	ldr	r2, [pc, #64]	; (8016708 <prvCheckForValidListAndQueue+0x64>)
 80166c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80166c8:	4b12      	ldr	r3, [pc, #72]	; (8016714 <prvCheckForValidListAndQueue+0x70>)
 80166ca:	4a10      	ldr	r2, [pc, #64]	; (801670c <prvCheckForValidListAndQueue+0x68>)
 80166cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80166ce:	2300      	movs	r3, #0
 80166d0:	9300      	str	r3, [sp, #0]
 80166d2:	4b11      	ldr	r3, [pc, #68]	; (8016718 <prvCheckForValidListAndQueue+0x74>)
 80166d4:	4a11      	ldr	r2, [pc, #68]	; (801671c <prvCheckForValidListAndQueue+0x78>)
 80166d6:	2110      	movs	r1, #16
 80166d8:	200a      	movs	r0, #10
 80166da:	f7fd fd51 	bl	8014180 <xQueueGenericCreateStatic>
 80166de:	4603      	mov	r3, r0
 80166e0:	4a08      	ldr	r2, [pc, #32]	; (8016704 <prvCheckForValidListAndQueue+0x60>)
 80166e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80166e4:	4b07      	ldr	r3, [pc, #28]	; (8016704 <prvCheckForValidListAndQueue+0x60>)
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d005      	beq.n	80166f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80166ec:	4b05      	ldr	r3, [pc, #20]	; (8016704 <prvCheckForValidListAndQueue+0x60>)
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	490b      	ldr	r1, [pc, #44]	; (8016720 <prvCheckForValidListAndQueue+0x7c>)
 80166f2:	4618      	mov	r0, r3
 80166f4:	f7fe fafa 	bl	8014cec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80166f8:	f000 f974 	bl	80169e4 <vPortExitCritical>
}
 80166fc:	bf00      	nop
 80166fe:	46bd      	mov	sp, r7
 8016700:	bd80      	pop	{r7, pc}
 8016702:	bf00      	nop
 8016704:	20000d14 	.word	0x20000d14
 8016708:	20000ce4 	.word	0x20000ce4
 801670c:	20000cf8 	.word	0x20000cf8
 8016710:	20000d0c 	.word	0x20000d0c
 8016714:	20000d10 	.word	0x20000d10
 8016718:	20000dc0 	.word	0x20000dc0
 801671c:	20000d20 	.word	0x20000d20
 8016720:	0801b0ac 	.word	0x0801b0ac

08016724 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016724:	b480      	push	{r7}
 8016726:	b085      	sub	sp, #20
 8016728:	af00      	add	r7, sp, #0
 801672a:	60f8      	str	r0, [r7, #12]
 801672c:	60b9      	str	r1, [r7, #8]
 801672e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	3b04      	subs	r3, #4
 8016734:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801673c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	3b04      	subs	r3, #4
 8016742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016744:	68bb      	ldr	r3, [r7, #8]
 8016746:	f023 0201 	bic.w	r2, r3, #1
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	3b04      	subs	r3, #4
 8016752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016754:	4a0c      	ldr	r2, [pc, #48]	; (8016788 <pxPortInitialiseStack+0x64>)
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	3b14      	subs	r3, #20
 801675e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016760:	687a      	ldr	r2, [r7, #4]
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	3b04      	subs	r3, #4
 801676a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	f06f 0202 	mvn.w	r2, #2
 8016772:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	3b20      	subs	r3, #32
 8016778:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801677a:	68fb      	ldr	r3, [r7, #12]
}
 801677c:	4618      	mov	r0, r3
 801677e:	3714      	adds	r7, #20
 8016780:	46bd      	mov	sp, r7
 8016782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016786:	4770      	bx	lr
 8016788:	0801678d 	.word	0x0801678d

0801678c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801678c:	b480      	push	{r7}
 801678e:	b085      	sub	sp, #20
 8016790:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016792:	2300      	movs	r3, #0
 8016794:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016796:	4b12      	ldr	r3, [pc, #72]	; (80167e0 <prvTaskExitError+0x54>)
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801679e:	d00a      	beq.n	80167b6 <prvTaskExitError+0x2a>
	__asm volatile
 80167a0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80167a4:	f383 8811 	msr	BASEPRI, r3
 80167a8:	f3bf 8f6f 	isb	sy
 80167ac:	f3bf 8f4f 	dsb	sy
 80167b0:	60fb      	str	r3, [r7, #12]
}
 80167b2:	bf00      	nop
 80167b4:	e7fe      	b.n	80167b4 <prvTaskExitError+0x28>
	__asm volatile
 80167b6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80167ba:	f383 8811 	msr	BASEPRI, r3
 80167be:	f3bf 8f6f 	isb	sy
 80167c2:	f3bf 8f4f 	dsb	sy
 80167c6:	60bb      	str	r3, [r7, #8]
}
 80167c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80167ca:	bf00      	nop
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d0fc      	beq.n	80167cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80167d2:	bf00      	nop
 80167d4:	bf00      	nop
 80167d6:	3714      	adds	r7, #20
 80167d8:	46bd      	mov	sp, r7
 80167da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167de:	4770      	bx	lr
 80167e0:	2000003c 	.word	0x2000003c
	...

080167f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80167f0:	4b07      	ldr	r3, [pc, #28]	; (8016810 <pxCurrentTCBConst2>)
 80167f2:	6819      	ldr	r1, [r3, #0]
 80167f4:	6808      	ldr	r0, [r1, #0]
 80167f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167fa:	f380 8809 	msr	PSP, r0
 80167fe:	f3bf 8f6f 	isb	sy
 8016802:	f04f 0000 	mov.w	r0, #0
 8016806:	f380 8811 	msr	BASEPRI, r0
 801680a:	4770      	bx	lr
 801680c:	f3af 8000 	nop.w

08016810 <pxCurrentTCBConst2>:
 8016810:	200007e4 	.word	0x200007e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016814:	bf00      	nop
 8016816:	bf00      	nop

08016818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016818:	4808      	ldr	r0, [pc, #32]	; (801683c <prvPortStartFirstTask+0x24>)
 801681a:	6800      	ldr	r0, [r0, #0]
 801681c:	6800      	ldr	r0, [r0, #0]
 801681e:	f380 8808 	msr	MSP, r0
 8016822:	f04f 0000 	mov.w	r0, #0
 8016826:	f380 8814 	msr	CONTROL, r0
 801682a:	b662      	cpsie	i
 801682c:	b661      	cpsie	f
 801682e:	f3bf 8f4f 	dsb	sy
 8016832:	f3bf 8f6f 	isb	sy
 8016836:	df00      	svc	0
 8016838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801683a:	bf00      	nop
 801683c:	e000ed08 	.word	0xe000ed08

08016840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016840:	b580      	push	{r7, lr}
 8016842:	b086      	sub	sp, #24
 8016844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016846:	4b46      	ldr	r3, [pc, #280]	; (8016960 <xPortStartScheduler+0x120>)
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	4a46      	ldr	r2, [pc, #280]	; (8016964 <xPortStartScheduler+0x124>)
 801684c:	4293      	cmp	r3, r2
 801684e:	d10a      	bne.n	8016866 <xPortStartScheduler+0x26>
	__asm volatile
 8016850:	f04f 0340 	mov.w	r3, #64	; 0x40
 8016854:	f383 8811 	msr	BASEPRI, r3
 8016858:	f3bf 8f6f 	isb	sy
 801685c:	f3bf 8f4f 	dsb	sy
 8016860:	613b      	str	r3, [r7, #16]
}
 8016862:	bf00      	nop
 8016864:	e7fe      	b.n	8016864 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016866:	4b3e      	ldr	r3, [pc, #248]	; (8016960 <xPortStartScheduler+0x120>)
 8016868:	681b      	ldr	r3, [r3, #0]
 801686a:	4a3f      	ldr	r2, [pc, #252]	; (8016968 <xPortStartScheduler+0x128>)
 801686c:	4293      	cmp	r3, r2
 801686e:	d10a      	bne.n	8016886 <xPortStartScheduler+0x46>
	__asm volatile
 8016870:	f04f 0340 	mov.w	r3, #64	; 0x40
 8016874:	f383 8811 	msr	BASEPRI, r3
 8016878:	f3bf 8f6f 	isb	sy
 801687c:	f3bf 8f4f 	dsb	sy
 8016880:	60fb      	str	r3, [r7, #12]
}
 8016882:	bf00      	nop
 8016884:	e7fe      	b.n	8016884 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016886:	4b39      	ldr	r3, [pc, #228]	; (801696c <xPortStartScheduler+0x12c>)
 8016888:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801688a:	697b      	ldr	r3, [r7, #20]
 801688c:	781b      	ldrb	r3, [r3, #0]
 801688e:	b2db      	uxtb	r3, r3
 8016890:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016892:	697b      	ldr	r3, [r7, #20]
 8016894:	22ff      	movs	r2, #255	; 0xff
 8016896:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016898:	697b      	ldr	r3, [r7, #20]
 801689a:	781b      	ldrb	r3, [r3, #0]
 801689c:	b2db      	uxtb	r3, r3
 801689e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80168a0:	78fb      	ldrb	r3, [r7, #3]
 80168a2:	b2db      	uxtb	r3, r3
 80168a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80168a8:	b2da      	uxtb	r2, r3
 80168aa:	4b31      	ldr	r3, [pc, #196]	; (8016970 <xPortStartScheduler+0x130>)
 80168ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80168ae:	4b31      	ldr	r3, [pc, #196]	; (8016974 <xPortStartScheduler+0x134>)
 80168b0:	2207      	movs	r2, #7
 80168b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80168b4:	e009      	b.n	80168ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80168b6:	4b2f      	ldr	r3, [pc, #188]	; (8016974 <xPortStartScheduler+0x134>)
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	3b01      	subs	r3, #1
 80168bc:	4a2d      	ldr	r2, [pc, #180]	; (8016974 <xPortStartScheduler+0x134>)
 80168be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80168c0:	78fb      	ldrb	r3, [r7, #3]
 80168c2:	b2db      	uxtb	r3, r3
 80168c4:	005b      	lsls	r3, r3, #1
 80168c6:	b2db      	uxtb	r3, r3
 80168c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80168ca:	78fb      	ldrb	r3, [r7, #3]
 80168cc:	b2db      	uxtb	r3, r3
 80168ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80168d2:	2b80      	cmp	r3, #128	; 0x80
 80168d4:	d0ef      	beq.n	80168b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80168d6:	4b27      	ldr	r3, [pc, #156]	; (8016974 <xPortStartScheduler+0x134>)
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	f1c3 0307 	rsb	r3, r3, #7
 80168de:	2b04      	cmp	r3, #4
 80168e0:	d00a      	beq.n	80168f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80168e2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80168e6:	f383 8811 	msr	BASEPRI, r3
 80168ea:	f3bf 8f6f 	isb	sy
 80168ee:	f3bf 8f4f 	dsb	sy
 80168f2:	60bb      	str	r3, [r7, #8]
}
 80168f4:	bf00      	nop
 80168f6:	e7fe      	b.n	80168f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80168f8:	4b1e      	ldr	r3, [pc, #120]	; (8016974 <xPortStartScheduler+0x134>)
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	021b      	lsls	r3, r3, #8
 80168fe:	4a1d      	ldr	r2, [pc, #116]	; (8016974 <xPortStartScheduler+0x134>)
 8016900:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016902:	4b1c      	ldr	r3, [pc, #112]	; (8016974 <xPortStartScheduler+0x134>)
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801690a:	4a1a      	ldr	r2, [pc, #104]	; (8016974 <xPortStartScheduler+0x134>)
 801690c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	b2da      	uxtb	r2, r3
 8016912:	697b      	ldr	r3, [r7, #20]
 8016914:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016916:	4b18      	ldr	r3, [pc, #96]	; (8016978 <xPortStartScheduler+0x138>)
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	4a17      	ldr	r2, [pc, #92]	; (8016978 <xPortStartScheduler+0x138>)
 801691c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016920:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016922:	4b15      	ldr	r3, [pc, #84]	; (8016978 <xPortStartScheduler+0x138>)
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	4a14      	ldr	r2, [pc, #80]	; (8016978 <xPortStartScheduler+0x138>)
 8016928:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801692c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801692e:	f000 f8dd 	bl	8016aec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016932:	4b12      	ldr	r3, [pc, #72]	; (801697c <xPortStartScheduler+0x13c>)
 8016934:	2200      	movs	r2, #0
 8016936:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016938:	f000 f8fc 	bl	8016b34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801693c:	4b10      	ldr	r3, [pc, #64]	; (8016980 <xPortStartScheduler+0x140>)
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	4a0f      	ldr	r2, [pc, #60]	; (8016980 <xPortStartScheduler+0x140>)
 8016942:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016946:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016948:	f7ff ff66 	bl	8016818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801694c:	f7fe ff2c 	bl	80157a8 <vTaskSwitchContext>
	prvTaskExitError();
 8016950:	f7ff ff1c 	bl	801678c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016954:	2300      	movs	r3, #0
}
 8016956:	4618      	mov	r0, r3
 8016958:	3718      	adds	r7, #24
 801695a:	46bd      	mov	sp, r7
 801695c:	bd80      	pop	{r7, pc}
 801695e:	bf00      	nop
 8016960:	e000ed00 	.word	0xe000ed00
 8016964:	410fc271 	.word	0x410fc271
 8016968:	410fc270 	.word	0x410fc270
 801696c:	e000e400 	.word	0xe000e400
 8016970:	20000e10 	.word	0x20000e10
 8016974:	20000e14 	.word	0x20000e14
 8016978:	e000ed20 	.word	0xe000ed20
 801697c:	2000003c 	.word	0x2000003c
 8016980:	e000ef34 	.word	0xe000ef34

08016984 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016984:	b480      	push	{r7}
 8016986:	b083      	sub	sp, #12
 8016988:	af00      	add	r7, sp, #0
	__asm volatile
 801698a:	f04f 0340 	mov.w	r3, #64	; 0x40
 801698e:	f383 8811 	msr	BASEPRI, r3
 8016992:	f3bf 8f6f 	isb	sy
 8016996:	f3bf 8f4f 	dsb	sy
 801699a:	607b      	str	r3, [r7, #4]
}
 801699c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801699e:	4b0f      	ldr	r3, [pc, #60]	; (80169dc <vPortEnterCritical+0x58>)
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	3301      	adds	r3, #1
 80169a4:	4a0d      	ldr	r2, [pc, #52]	; (80169dc <vPortEnterCritical+0x58>)
 80169a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80169a8:	4b0c      	ldr	r3, [pc, #48]	; (80169dc <vPortEnterCritical+0x58>)
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	2b01      	cmp	r3, #1
 80169ae:	d10f      	bne.n	80169d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80169b0:	4b0b      	ldr	r3, [pc, #44]	; (80169e0 <vPortEnterCritical+0x5c>)
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	b2db      	uxtb	r3, r3
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d00a      	beq.n	80169d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80169ba:	f04f 0340 	mov.w	r3, #64	; 0x40
 80169be:	f383 8811 	msr	BASEPRI, r3
 80169c2:	f3bf 8f6f 	isb	sy
 80169c6:	f3bf 8f4f 	dsb	sy
 80169ca:	603b      	str	r3, [r7, #0]
}
 80169cc:	bf00      	nop
 80169ce:	e7fe      	b.n	80169ce <vPortEnterCritical+0x4a>
	}
}
 80169d0:	bf00      	nop
 80169d2:	370c      	adds	r7, #12
 80169d4:	46bd      	mov	sp, r7
 80169d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169da:	4770      	bx	lr
 80169dc:	2000003c 	.word	0x2000003c
 80169e0:	e000ed04 	.word	0xe000ed04

080169e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80169e4:	b480      	push	{r7}
 80169e6:	b083      	sub	sp, #12
 80169e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80169ea:	4b12      	ldr	r3, [pc, #72]	; (8016a34 <vPortExitCritical+0x50>)
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d10a      	bne.n	8016a08 <vPortExitCritical+0x24>
	__asm volatile
 80169f2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80169f6:	f383 8811 	msr	BASEPRI, r3
 80169fa:	f3bf 8f6f 	isb	sy
 80169fe:	f3bf 8f4f 	dsb	sy
 8016a02:	607b      	str	r3, [r7, #4]
}
 8016a04:	bf00      	nop
 8016a06:	e7fe      	b.n	8016a06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016a08:	4b0a      	ldr	r3, [pc, #40]	; (8016a34 <vPortExitCritical+0x50>)
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	3b01      	subs	r3, #1
 8016a0e:	4a09      	ldr	r2, [pc, #36]	; (8016a34 <vPortExitCritical+0x50>)
 8016a10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016a12:	4b08      	ldr	r3, [pc, #32]	; (8016a34 <vPortExitCritical+0x50>)
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d105      	bne.n	8016a26 <vPortExitCritical+0x42>
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016a1e:	683b      	ldr	r3, [r7, #0]
 8016a20:	f383 8811 	msr	BASEPRI, r3
}
 8016a24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016a26:	bf00      	nop
 8016a28:	370c      	adds	r7, #12
 8016a2a:	46bd      	mov	sp, r7
 8016a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a30:	4770      	bx	lr
 8016a32:	bf00      	nop
 8016a34:	2000003c 	.word	0x2000003c
	...

08016a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016a40:	f3ef 8009 	mrs	r0, PSP
 8016a44:	f3bf 8f6f 	isb	sy
 8016a48:	4b15      	ldr	r3, [pc, #84]	; (8016aa0 <pxCurrentTCBConst>)
 8016a4a:	681a      	ldr	r2, [r3, #0]
 8016a4c:	f01e 0f10 	tst.w	lr, #16
 8016a50:	bf08      	it	eq
 8016a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a5a:	6010      	str	r0, [r2, #0]
 8016a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016a60:	f04f 0040 	mov.w	r0, #64	; 0x40
 8016a64:	f380 8811 	msr	BASEPRI, r0
 8016a68:	f3bf 8f4f 	dsb	sy
 8016a6c:	f3bf 8f6f 	isb	sy
 8016a70:	f7fe fe9a 	bl	80157a8 <vTaskSwitchContext>
 8016a74:	f04f 0000 	mov.w	r0, #0
 8016a78:	f380 8811 	msr	BASEPRI, r0
 8016a7c:	bc09      	pop	{r0, r3}
 8016a7e:	6819      	ldr	r1, [r3, #0]
 8016a80:	6808      	ldr	r0, [r1, #0]
 8016a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a86:	f01e 0f10 	tst.w	lr, #16
 8016a8a:	bf08      	it	eq
 8016a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016a90:	f380 8809 	msr	PSP, r0
 8016a94:	f3bf 8f6f 	isb	sy
 8016a98:	4770      	bx	lr
 8016a9a:	bf00      	nop
 8016a9c:	f3af 8000 	nop.w

08016aa0 <pxCurrentTCBConst>:
 8016aa0:	200007e4 	.word	0x200007e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016aa4:	bf00      	nop
 8016aa6:	bf00      	nop

08016aa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016aa8:	b580      	push	{r7, lr}
 8016aaa:	b082      	sub	sp, #8
 8016aac:	af00      	add	r7, sp, #0
	__asm volatile
 8016aae:	f04f 0340 	mov.w	r3, #64	; 0x40
 8016ab2:	f383 8811 	msr	BASEPRI, r3
 8016ab6:	f3bf 8f6f 	isb	sy
 8016aba:	f3bf 8f4f 	dsb	sy
 8016abe:	607b      	str	r3, [r7, #4]
}
 8016ac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016ac2:	f7fe fdb7 	bl	8015634 <xTaskIncrementTick>
 8016ac6:	4603      	mov	r3, r0
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d003      	beq.n	8016ad4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016acc:	4b06      	ldr	r3, [pc, #24]	; (8016ae8 <xPortSysTickHandler+0x40>)
 8016ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ad2:	601a      	str	r2, [r3, #0]
 8016ad4:	2300      	movs	r3, #0
 8016ad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016ad8:	683b      	ldr	r3, [r7, #0]
 8016ada:	f383 8811 	msr	BASEPRI, r3
}
 8016ade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016ae0:	bf00      	nop
 8016ae2:	3708      	adds	r7, #8
 8016ae4:	46bd      	mov	sp, r7
 8016ae6:	bd80      	pop	{r7, pc}
 8016ae8:	e000ed04 	.word	0xe000ed04

08016aec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016aec:	b480      	push	{r7}
 8016aee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016af0:	4b0b      	ldr	r3, [pc, #44]	; (8016b20 <vPortSetupTimerInterrupt+0x34>)
 8016af2:	2200      	movs	r2, #0
 8016af4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016af6:	4b0b      	ldr	r3, [pc, #44]	; (8016b24 <vPortSetupTimerInterrupt+0x38>)
 8016af8:	2200      	movs	r2, #0
 8016afa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016afc:	4b0a      	ldr	r3, [pc, #40]	; (8016b28 <vPortSetupTimerInterrupt+0x3c>)
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	4a0a      	ldr	r2, [pc, #40]	; (8016b2c <vPortSetupTimerInterrupt+0x40>)
 8016b02:	fba2 2303 	umull	r2, r3, r2, r3
 8016b06:	099b      	lsrs	r3, r3, #6
 8016b08:	4a09      	ldr	r2, [pc, #36]	; (8016b30 <vPortSetupTimerInterrupt+0x44>)
 8016b0a:	3b01      	subs	r3, #1
 8016b0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016b0e:	4b04      	ldr	r3, [pc, #16]	; (8016b20 <vPortSetupTimerInterrupt+0x34>)
 8016b10:	2207      	movs	r2, #7
 8016b12:	601a      	str	r2, [r3, #0]
}
 8016b14:	bf00      	nop
 8016b16:	46bd      	mov	sp, r7
 8016b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b1c:	4770      	bx	lr
 8016b1e:	bf00      	nop
 8016b20:	e000e010 	.word	0xe000e010
 8016b24:	e000e018 	.word	0xe000e018
 8016b28:	20000030 	.word	0x20000030
 8016b2c:	10624dd3 	.word	0x10624dd3
 8016b30:	e000e014 	.word	0xe000e014

08016b34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016b34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016b44 <vPortEnableVFP+0x10>
 8016b38:	6801      	ldr	r1, [r0, #0]
 8016b3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8016b3e:	6001      	str	r1, [r0, #0]
 8016b40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016b42:	bf00      	nop
 8016b44:	e000ed88 	.word	0xe000ed88

08016b48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016b48:	b480      	push	{r7}
 8016b4a:	b085      	sub	sp, #20
 8016b4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016b4e:	f3ef 8305 	mrs	r3, IPSR
 8016b52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	2b0f      	cmp	r3, #15
 8016b58:	d914      	bls.n	8016b84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016b5a:	4a17      	ldr	r2, [pc, #92]	; (8016bb8 <vPortValidateInterruptPriority+0x70>)
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	4413      	add	r3, r2
 8016b60:	781b      	ldrb	r3, [r3, #0]
 8016b62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016b64:	4b15      	ldr	r3, [pc, #84]	; (8016bbc <vPortValidateInterruptPriority+0x74>)
 8016b66:	781b      	ldrb	r3, [r3, #0]
 8016b68:	7afa      	ldrb	r2, [r7, #11]
 8016b6a:	429a      	cmp	r2, r3
 8016b6c:	d20a      	bcs.n	8016b84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8016b6e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8016b72:	f383 8811 	msr	BASEPRI, r3
 8016b76:	f3bf 8f6f 	isb	sy
 8016b7a:	f3bf 8f4f 	dsb	sy
 8016b7e:	607b      	str	r3, [r7, #4]
}
 8016b80:	bf00      	nop
 8016b82:	e7fe      	b.n	8016b82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016b84:	4b0e      	ldr	r3, [pc, #56]	; (8016bc0 <vPortValidateInterruptPriority+0x78>)
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8016b8c:	4b0d      	ldr	r3, [pc, #52]	; (8016bc4 <vPortValidateInterruptPriority+0x7c>)
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	429a      	cmp	r2, r3
 8016b92:	d90a      	bls.n	8016baa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016b94:	f04f 0340 	mov.w	r3, #64	; 0x40
 8016b98:	f383 8811 	msr	BASEPRI, r3
 8016b9c:	f3bf 8f6f 	isb	sy
 8016ba0:	f3bf 8f4f 	dsb	sy
 8016ba4:	603b      	str	r3, [r7, #0]
}
 8016ba6:	bf00      	nop
 8016ba8:	e7fe      	b.n	8016ba8 <vPortValidateInterruptPriority+0x60>
	}
 8016baa:	bf00      	nop
 8016bac:	3714      	adds	r7, #20
 8016bae:	46bd      	mov	sp, r7
 8016bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb4:	4770      	bx	lr
 8016bb6:	bf00      	nop
 8016bb8:	e000e3f0 	.word	0xe000e3f0
 8016bbc:	20000e10 	.word	0x20000e10
 8016bc0:	e000ed0c 	.word	0xe000ed0c
 8016bc4:	20000e14 	.word	0x20000e14

08016bc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016bc8:	b580      	push	{r7, lr}
 8016bca:	b08a      	sub	sp, #40	; 0x28
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016bd4:	f7fe fc72 	bl	80154bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016bd8:	4b5d      	ldr	r3, [pc, #372]	; (8016d50 <pvPortMalloc+0x188>)
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d101      	bne.n	8016be4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016be0:	f000 f924 	bl	8016e2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016be4:	4b5b      	ldr	r3, [pc, #364]	; (8016d54 <pvPortMalloc+0x18c>)
 8016be6:	681a      	ldr	r2, [r3, #0]
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	4013      	ands	r3, r2
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	f040 8093 	bne.w	8016d18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d01d      	beq.n	8016c34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8016bf8:	2208      	movs	r2, #8
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	4413      	add	r3, r2
 8016bfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	f003 0307 	and.w	r3, r3, #7
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d014      	beq.n	8016c34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	f023 0307 	bic.w	r3, r3, #7
 8016c10:	3308      	adds	r3, #8
 8016c12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	f003 0307 	and.w	r3, r3, #7
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d00a      	beq.n	8016c34 <pvPortMalloc+0x6c>
	__asm volatile
 8016c1e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8016c22:	f383 8811 	msr	BASEPRI, r3
 8016c26:	f3bf 8f6f 	isb	sy
 8016c2a:	f3bf 8f4f 	dsb	sy
 8016c2e:	617b      	str	r3, [r7, #20]
}
 8016c30:	bf00      	nop
 8016c32:	e7fe      	b.n	8016c32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d06e      	beq.n	8016d18 <pvPortMalloc+0x150>
 8016c3a:	4b47      	ldr	r3, [pc, #284]	; (8016d58 <pvPortMalloc+0x190>)
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	687a      	ldr	r2, [r7, #4]
 8016c40:	429a      	cmp	r2, r3
 8016c42:	d869      	bhi.n	8016d18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016c44:	4b45      	ldr	r3, [pc, #276]	; (8016d5c <pvPortMalloc+0x194>)
 8016c46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016c48:	4b44      	ldr	r3, [pc, #272]	; (8016d5c <pvPortMalloc+0x194>)
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016c4e:	e004      	b.n	8016c5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c5c:	685b      	ldr	r3, [r3, #4]
 8016c5e:	687a      	ldr	r2, [r7, #4]
 8016c60:	429a      	cmp	r2, r3
 8016c62:	d903      	bls.n	8016c6c <pvPortMalloc+0xa4>
 8016c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d1f1      	bne.n	8016c50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016c6c:	4b38      	ldr	r3, [pc, #224]	; (8016d50 <pvPortMalloc+0x188>)
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016c72:	429a      	cmp	r2, r3
 8016c74:	d050      	beq.n	8016d18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016c76:	6a3b      	ldr	r3, [r7, #32]
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	2208      	movs	r2, #8
 8016c7c:	4413      	add	r3, r2
 8016c7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c82:	681a      	ldr	r2, [r3, #0]
 8016c84:	6a3b      	ldr	r3, [r7, #32]
 8016c86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c8a:	685a      	ldr	r2, [r3, #4]
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	1ad2      	subs	r2, r2, r3
 8016c90:	2308      	movs	r3, #8
 8016c92:	005b      	lsls	r3, r3, #1
 8016c94:	429a      	cmp	r2, r3
 8016c96:	d91f      	bls.n	8016cd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	4413      	add	r3, r2
 8016c9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016ca0:	69bb      	ldr	r3, [r7, #24]
 8016ca2:	f003 0307 	and.w	r3, r3, #7
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d00a      	beq.n	8016cc0 <pvPortMalloc+0xf8>
	__asm volatile
 8016caa:	f04f 0340 	mov.w	r3, #64	; 0x40
 8016cae:	f383 8811 	msr	BASEPRI, r3
 8016cb2:	f3bf 8f6f 	isb	sy
 8016cb6:	f3bf 8f4f 	dsb	sy
 8016cba:	613b      	str	r3, [r7, #16]
}
 8016cbc:	bf00      	nop
 8016cbe:	e7fe      	b.n	8016cbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cc2:	685a      	ldr	r2, [r3, #4]
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	1ad2      	subs	r2, r2, r3
 8016cc8:	69bb      	ldr	r3, [r7, #24]
 8016cca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cce:	687a      	ldr	r2, [r7, #4]
 8016cd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016cd2:	69b8      	ldr	r0, [r7, #24]
 8016cd4:	f000 f90c 	bl	8016ef0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016cd8:	4b1f      	ldr	r3, [pc, #124]	; (8016d58 <pvPortMalloc+0x190>)
 8016cda:	681a      	ldr	r2, [r3, #0]
 8016cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cde:	685b      	ldr	r3, [r3, #4]
 8016ce0:	1ad3      	subs	r3, r2, r3
 8016ce2:	4a1d      	ldr	r2, [pc, #116]	; (8016d58 <pvPortMalloc+0x190>)
 8016ce4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016ce6:	4b1c      	ldr	r3, [pc, #112]	; (8016d58 <pvPortMalloc+0x190>)
 8016ce8:	681a      	ldr	r2, [r3, #0]
 8016cea:	4b1d      	ldr	r3, [pc, #116]	; (8016d60 <pvPortMalloc+0x198>)
 8016cec:	681b      	ldr	r3, [r3, #0]
 8016cee:	429a      	cmp	r2, r3
 8016cf0:	d203      	bcs.n	8016cfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016cf2:	4b19      	ldr	r3, [pc, #100]	; (8016d58 <pvPortMalloc+0x190>)
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	4a1a      	ldr	r2, [pc, #104]	; (8016d60 <pvPortMalloc+0x198>)
 8016cf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cfc:	685a      	ldr	r2, [r3, #4]
 8016cfe:	4b15      	ldr	r3, [pc, #84]	; (8016d54 <pvPortMalloc+0x18c>)
 8016d00:	681b      	ldr	r3, [r3, #0]
 8016d02:	431a      	orrs	r2, r3
 8016d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d0a:	2200      	movs	r2, #0
 8016d0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016d0e:	4b15      	ldr	r3, [pc, #84]	; (8016d64 <pvPortMalloc+0x19c>)
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	3301      	adds	r3, #1
 8016d14:	4a13      	ldr	r2, [pc, #76]	; (8016d64 <pvPortMalloc+0x19c>)
 8016d16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016d18:	f7fe fbde 	bl	80154d8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8016d1c:	69fb      	ldr	r3, [r7, #28]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d101      	bne.n	8016d26 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8016d22:	f7f9 fb86 	bl	8010432 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016d26:	69fb      	ldr	r3, [r7, #28]
 8016d28:	f003 0307 	and.w	r3, r3, #7
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d00a      	beq.n	8016d46 <pvPortMalloc+0x17e>
	__asm volatile
 8016d30:	f04f 0340 	mov.w	r3, #64	; 0x40
 8016d34:	f383 8811 	msr	BASEPRI, r3
 8016d38:	f3bf 8f6f 	isb	sy
 8016d3c:	f3bf 8f4f 	dsb	sy
 8016d40:	60fb      	str	r3, [r7, #12]
}
 8016d42:	bf00      	nop
 8016d44:	e7fe      	b.n	8016d44 <pvPortMalloc+0x17c>
	return pvReturn;
 8016d46:	69fb      	ldr	r3, [r7, #28]
}
 8016d48:	4618      	mov	r0, r3
 8016d4a:	3728      	adds	r7, #40	; 0x28
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	bd80      	pop	{r7, pc}
 8016d50:	2000ae20 	.word	0x2000ae20
 8016d54:	2000ae34 	.word	0x2000ae34
 8016d58:	2000ae24 	.word	0x2000ae24
 8016d5c:	2000ae18 	.word	0x2000ae18
 8016d60:	2000ae28 	.word	0x2000ae28
 8016d64:	2000ae2c 	.word	0x2000ae2c

08016d68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016d68:	b580      	push	{r7, lr}
 8016d6a:	b086      	sub	sp, #24
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d04d      	beq.n	8016e16 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016d7a:	2308      	movs	r3, #8
 8016d7c:	425b      	negs	r3, r3
 8016d7e:	697a      	ldr	r2, [r7, #20]
 8016d80:	4413      	add	r3, r2
 8016d82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016d84:	697b      	ldr	r3, [r7, #20]
 8016d86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016d88:	693b      	ldr	r3, [r7, #16]
 8016d8a:	685a      	ldr	r2, [r3, #4]
 8016d8c:	4b24      	ldr	r3, [pc, #144]	; (8016e20 <vPortFree+0xb8>)
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	4013      	ands	r3, r2
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d10a      	bne.n	8016dac <vPortFree+0x44>
	__asm volatile
 8016d96:	f04f 0340 	mov.w	r3, #64	; 0x40
 8016d9a:	f383 8811 	msr	BASEPRI, r3
 8016d9e:	f3bf 8f6f 	isb	sy
 8016da2:	f3bf 8f4f 	dsb	sy
 8016da6:	60fb      	str	r3, [r7, #12]
}
 8016da8:	bf00      	nop
 8016daa:	e7fe      	b.n	8016daa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016dac:	693b      	ldr	r3, [r7, #16]
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d00a      	beq.n	8016dca <vPortFree+0x62>
	__asm volatile
 8016db4:	f04f 0340 	mov.w	r3, #64	; 0x40
 8016db8:	f383 8811 	msr	BASEPRI, r3
 8016dbc:	f3bf 8f6f 	isb	sy
 8016dc0:	f3bf 8f4f 	dsb	sy
 8016dc4:	60bb      	str	r3, [r7, #8]
}
 8016dc6:	bf00      	nop
 8016dc8:	e7fe      	b.n	8016dc8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016dca:	693b      	ldr	r3, [r7, #16]
 8016dcc:	685a      	ldr	r2, [r3, #4]
 8016dce:	4b14      	ldr	r3, [pc, #80]	; (8016e20 <vPortFree+0xb8>)
 8016dd0:	681b      	ldr	r3, [r3, #0]
 8016dd2:	4013      	ands	r3, r2
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d01e      	beq.n	8016e16 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016dd8:	693b      	ldr	r3, [r7, #16]
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d11a      	bne.n	8016e16 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016de0:	693b      	ldr	r3, [r7, #16]
 8016de2:	685a      	ldr	r2, [r3, #4]
 8016de4:	4b0e      	ldr	r3, [pc, #56]	; (8016e20 <vPortFree+0xb8>)
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	43db      	mvns	r3, r3
 8016dea:	401a      	ands	r2, r3
 8016dec:	693b      	ldr	r3, [r7, #16]
 8016dee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016df0:	f7fe fb64 	bl	80154bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016df4:	693b      	ldr	r3, [r7, #16]
 8016df6:	685a      	ldr	r2, [r3, #4]
 8016df8:	4b0a      	ldr	r3, [pc, #40]	; (8016e24 <vPortFree+0xbc>)
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	4413      	add	r3, r2
 8016dfe:	4a09      	ldr	r2, [pc, #36]	; (8016e24 <vPortFree+0xbc>)
 8016e00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016e02:	6938      	ldr	r0, [r7, #16]
 8016e04:	f000 f874 	bl	8016ef0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016e08:	4b07      	ldr	r3, [pc, #28]	; (8016e28 <vPortFree+0xc0>)
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	3301      	adds	r3, #1
 8016e0e:	4a06      	ldr	r2, [pc, #24]	; (8016e28 <vPortFree+0xc0>)
 8016e10:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016e12:	f7fe fb61 	bl	80154d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016e16:	bf00      	nop
 8016e18:	3718      	adds	r7, #24
 8016e1a:	46bd      	mov	sp, r7
 8016e1c:	bd80      	pop	{r7, pc}
 8016e1e:	bf00      	nop
 8016e20:	2000ae34 	.word	0x2000ae34
 8016e24:	2000ae24 	.word	0x2000ae24
 8016e28:	2000ae30 	.word	0x2000ae30

08016e2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016e2c:	b480      	push	{r7}
 8016e2e:	b085      	sub	sp, #20
 8016e30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016e32:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8016e36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016e38:	4b27      	ldr	r3, [pc, #156]	; (8016ed8 <prvHeapInit+0xac>)
 8016e3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	f003 0307 	and.w	r3, r3, #7
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d00c      	beq.n	8016e60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	3307      	adds	r3, #7
 8016e4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016e4c:	68fb      	ldr	r3, [r7, #12]
 8016e4e:	f023 0307 	bic.w	r3, r3, #7
 8016e52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016e54:	68ba      	ldr	r2, [r7, #8]
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	1ad3      	subs	r3, r2, r3
 8016e5a:	4a1f      	ldr	r2, [pc, #124]	; (8016ed8 <prvHeapInit+0xac>)
 8016e5c:	4413      	add	r3, r2
 8016e5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016e64:	4a1d      	ldr	r2, [pc, #116]	; (8016edc <prvHeapInit+0xb0>)
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016e6a:	4b1c      	ldr	r3, [pc, #112]	; (8016edc <prvHeapInit+0xb0>)
 8016e6c:	2200      	movs	r2, #0
 8016e6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	68ba      	ldr	r2, [r7, #8]
 8016e74:	4413      	add	r3, r2
 8016e76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016e78:	2208      	movs	r2, #8
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	1a9b      	subs	r3, r3, r2
 8016e7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	f023 0307 	bic.w	r3, r3, #7
 8016e86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	4a15      	ldr	r2, [pc, #84]	; (8016ee0 <prvHeapInit+0xb4>)
 8016e8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016e8e:	4b14      	ldr	r3, [pc, #80]	; (8016ee0 <prvHeapInit+0xb4>)
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	2200      	movs	r2, #0
 8016e94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016e96:	4b12      	ldr	r3, [pc, #72]	; (8016ee0 <prvHeapInit+0xb4>)
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016ea2:	683b      	ldr	r3, [r7, #0]
 8016ea4:	68fa      	ldr	r2, [r7, #12]
 8016ea6:	1ad2      	subs	r2, r2, r3
 8016ea8:	683b      	ldr	r3, [r7, #0]
 8016eaa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016eac:	4b0c      	ldr	r3, [pc, #48]	; (8016ee0 <prvHeapInit+0xb4>)
 8016eae:	681a      	ldr	r2, [r3, #0]
 8016eb0:	683b      	ldr	r3, [r7, #0]
 8016eb2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016eb4:	683b      	ldr	r3, [r7, #0]
 8016eb6:	685b      	ldr	r3, [r3, #4]
 8016eb8:	4a0a      	ldr	r2, [pc, #40]	; (8016ee4 <prvHeapInit+0xb8>)
 8016eba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016ebc:	683b      	ldr	r3, [r7, #0]
 8016ebe:	685b      	ldr	r3, [r3, #4]
 8016ec0:	4a09      	ldr	r2, [pc, #36]	; (8016ee8 <prvHeapInit+0xbc>)
 8016ec2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016ec4:	4b09      	ldr	r3, [pc, #36]	; (8016eec <prvHeapInit+0xc0>)
 8016ec6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016eca:	601a      	str	r2, [r3, #0]
}
 8016ecc:	bf00      	nop
 8016ece:	3714      	adds	r7, #20
 8016ed0:	46bd      	mov	sp, r7
 8016ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ed6:	4770      	bx	lr
 8016ed8:	20000e18 	.word	0x20000e18
 8016edc:	2000ae18 	.word	0x2000ae18
 8016ee0:	2000ae20 	.word	0x2000ae20
 8016ee4:	2000ae28 	.word	0x2000ae28
 8016ee8:	2000ae24 	.word	0x2000ae24
 8016eec:	2000ae34 	.word	0x2000ae34

08016ef0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016ef0:	b480      	push	{r7}
 8016ef2:	b085      	sub	sp, #20
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016ef8:	4b28      	ldr	r3, [pc, #160]	; (8016f9c <prvInsertBlockIntoFreeList+0xac>)
 8016efa:	60fb      	str	r3, [r7, #12]
 8016efc:	e002      	b.n	8016f04 <prvInsertBlockIntoFreeList+0x14>
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	60fb      	str	r3, [r7, #12]
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	687a      	ldr	r2, [r7, #4]
 8016f0a:	429a      	cmp	r2, r3
 8016f0c:	d8f7      	bhi.n	8016efe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	685b      	ldr	r3, [r3, #4]
 8016f16:	68ba      	ldr	r2, [r7, #8]
 8016f18:	4413      	add	r3, r2
 8016f1a:	687a      	ldr	r2, [r7, #4]
 8016f1c:	429a      	cmp	r2, r3
 8016f1e:	d108      	bne.n	8016f32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	685a      	ldr	r2, [r3, #4]
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	685b      	ldr	r3, [r3, #4]
 8016f28:	441a      	add	r2, r3
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016f2e:	68fb      	ldr	r3, [r7, #12]
 8016f30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	685b      	ldr	r3, [r3, #4]
 8016f3a:	68ba      	ldr	r2, [r7, #8]
 8016f3c:	441a      	add	r2, r3
 8016f3e:	68fb      	ldr	r3, [r7, #12]
 8016f40:	681b      	ldr	r3, [r3, #0]
 8016f42:	429a      	cmp	r2, r3
 8016f44:	d118      	bne.n	8016f78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	681a      	ldr	r2, [r3, #0]
 8016f4a:	4b15      	ldr	r3, [pc, #84]	; (8016fa0 <prvInsertBlockIntoFreeList+0xb0>)
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	429a      	cmp	r2, r3
 8016f50:	d00d      	beq.n	8016f6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	685a      	ldr	r2, [r3, #4]
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	685b      	ldr	r3, [r3, #4]
 8016f5c:	441a      	add	r2, r3
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	681a      	ldr	r2, [r3, #0]
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	601a      	str	r2, [r3, #0]
 8016f6c:	e008      	b.n	8016f80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016f6e:	4b0c      	ldr	r3, [pc, #48]	; (8016fa0 <prvInsertBlockIntoFreeList+0xb0>)
 8016f70:	681a      	ldr	r2, [r3, #0]
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	601a      	str	r2, [r3, #0]
 8016f76:	e003      	b.n	8016f80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	681a      	ldr	r2, [r3, #0]
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016f80:	68fa      	ldr	r2, [r7, #12]
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	429a      	cmp	r2, r3
 8016f86:	d002      	beq.n	8016f8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	687a      	ldr	r2, [r7, #4]
 8016f8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016f8e:	bf00      	nop
 8016f90:	3714      	adds	r7, #20
 8016f92:	46bd      	mov	sp, r7
 8016f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f98:	4770      	bx	lr
 8016f9a:	bf00      	nop
 8016f9c:	2000ae18 	.word	0x2000ae18
 8016fa0:	2000ae20 	.word	0x2000ae20

08016fa4 <rtos_createThread>:
/*----------------------------------------------------------------------*/

void rtos_createThread(TaskHandle_t *task, int priority,
                       size_t stacksize, void (*new_thread) (void *), const char * const pcName,
					   void *arg)
{
 8016fa4:	b580      	push	{r7, lr}
 8016fa6:	b086      	sub	sp, #24
 8016fa8:	af02      	add	r7, sp, #8
 8016faa:	60f8      	str	r0, [r7, #12]
 8016fac:	60b9      	str	r1, [r7, #8]
 8016fae:	607a      	str	r2, [r7, #4]
 8016fb0:	603b      	str	r3, [r7, #0]
    xTaskCreate(*new_thread, pcName, stacksize,
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	b299      	uxth	r1, r3
 8016fb6:	68bb      	ldr	r3, [r7, #8]
 8016fb8:	68fa      	ldr	r2, [r7, #12]
 8016fba:	9201      	str	r2, [sp, #4]
 8016fbc:	9300      	str	r3, [sp, #0]
 8016fbe:	69fb      	ldr	r3, [r7, #28]
 8016fc0:	460a      	mov	r2, r1
 8016fc2:	69b9      	ldr	r1, [r7, #24]
 8016fc4:	6838      	ldr	r0, [r7, #0]
 8016fc6:	f7fd ff4c 	bl	8014e62 <xTaskCreate>
        		arg, priority, task);
}
 8016fca:	bf00      	nop
 8016fcc:	3710      	adds	r7, #16
 8016fce:	46bd      	mov	sp, r7
 8016fd0:	bd80      	pop	{r7, pc}

08016fd2 <rtos_createMailbox>:

/*----------------------------------------------------------------------*/

void rtos_createMailbox(QueueHandle_t *mail, size_t msg_size, uint8_t mb_capacity)
{
 8016fd2:	b580      	push	{r7, lr}
 8016fd4:	b084      	sub	sp, #16
 8016fd6:	af00      	add	r7, sp, #0
 8016fd8:	60f8      	str	r0, [r7, #12]
 8016fda:	60b9      	str	r1, [r7, #8]
 8016fdc:	4613      	mov	r3, r2
 8016fde:	71fb      	strb	r3, [r7, #7]
    *mail = xQueueCreate(mb_capacity, msg_size);
 8016fe0:	79fb      	ldrb	r3, [r7, #7]
 8016fe2:	2200      	movs	r2, #0
 8016fe4:	68b9      	ldr	r1, [r7, #8]
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	f7fd f942 	bl	8014270 <xQueueGenericCreate>
 8016fec:	4602      	mov	r2, r0
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	601a      	str	r2, [r3, #0]
}
 8016ff2:	bf00      	nop
 8016ff4:	3710      	adds	r7, #16
 8016ff6:	46bd      	mov	sp, r7
 8016ff8:	bd80      	pop	{r7, pc}

08016ffa <rtos_createSemaphore>:

/*----------------------------------------------------------------------*/

void rtos_createSemaphore(SemaphoreHandle_t *sem, uint8_t sem_count, uint8_t init_count)
{
 8016ffa:	b580      	push	{r7, lr}
 8016ffc:	b082      	sub	sp, #8
 8016ffe:	af00      	add	r7, sp, #0
 8017000:	6078      	str	r0, [r7, #4]
 8017002:	460b      	mov	r3, r1
 8017004:	70fb      	strb	r3, [r7, #3]
 8017006:	4613      	mov	r3, r2
 8017008:	70bb      	strb	r3, [r7, #2]
    if (sem_count >= 1)
 801700a:	78fb      	ldrb	r3, [r7, #3]
 801700c:	2b00      	cmp	r3, #0
 801700e:	d008      	beq.n	8017022 <rtos_createSemaphore+0x28>
    	*sem = xSemaphoreCreateCounting(sem_count, init_count);
 8017010:	78fb      	ldrb	r3, [r7, #3]
 8017012:	78ba      	ldrb	r2, [r7, #2]
 8017014:	4611      	mov	r1, r2
 8017016:	4618      	mov	r0, r3
 8017018:	f7fd f987 	bl	801432a <xQueueCreateCountingSemaphore>
 801701c:	4602      	mov	r2, r0
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	601a      	str	r2, [r3, #0]
}
 8017022:	bf00      	nop
 8017024:	3708      	adds	r7, #8
 8017026:	46bd      	mov	sp, r7
 8017028:	bd80      	pop	{r7, pc}

0801702a <rtos_cmd_success>:
}

/*----------------------------------------------------------------------*/

void rtos_cmd_success(MBCmdItems *items)
{
 801702a:	b580      	push	{r7, lr}
 801702c:	b082      	sub	sp, #8
 801702e:	af00      	add	r7, sp, #0
 8017030:	6078      	str	r0, [r7, #4]
    items->success = true;
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	2201      	movs	r2, #1
 8017036:	711a      	strb	r2, [r3, #4]
    xSemaphoreGive(*items->sem_cmd);
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	681b      	ldr	r3, [r3, #0]
 801703c:	6818      	ldr	r0, [r3, #0]
 801703e:	2300      	movs	r3, #0
 8017040:	2200      	movs	r2, #0
 8017042:	2100      	movs	r1, #0
 8017044:	f7fd f9a4 	bl	8014390 <xQueueGenericSend>
}
 8017048:	bf00      	nop
 801704a:	3708      	adds	r7, #8
 801704c:	46bd      	mov	sp, r7
 801704e:	bd80      	pop	{r7, pc}

08017050 <rtos_Sleep_mS>:

/*----------------------------------------------------------------------*/

void rtos_Sleep_mS(uint32_t time_ms)
{
 8017050:	b580      	push	{r7, lr}
 8017052:	b082      	sub	sp, #8
 8017054:	af00      	add	r7, sp, #0
 8017056:	6078      	str	r0, [r7, #4]
	vTaskDelay(time_ms);
 8017058:	6878      	ldr	r0, [r7, #4]
 801705a:	f7fe f8b9 	bl	80151d0 <vTaskDelay>
}
 801705e:	bf00      	nop
 8017060:	3708      	adds	r7, #8
 8017062:	46bd      	mov	sp, r7
 8017064:	bd80      	pop	{r7, pc}
	...

08017068 <audioClipThread>:
/*! \brief Main AUDIO CLIP THREAD, initialized in audioClipInit()
 	 	 This handles playback of audio clips pointed to by audioClipPlay().

    \param *context NULL
*/
static void audioClipThread(void *context) {
 8017068:	b580      	push	{r7, lr}
 801706a:	b088      	sub	sp, #32
 801706c:	af00      	add	r7, sp, #0
 801706e:	6078      	str	r0, [r7, #4]
  struct acmail mbox_data;
  static uint32_t q_timeout = AUDP_IDLE_INTERVAL;
  struct acmail mbox_backup;

  while (1) {
    if (xQueueReceive(ac_mail, &mbox_data, q_timeout)) {
 8017070:	4b1c      	ldr	r3, [pc, #112]	; (80170e4 <audioClipThread+0x7c>)
 8017072:	681b      	ldr	r3, [r3, #0]
 8017074:	4a1c      	ldr	r2, [pc, #112]	; (80170e8 <audioClipThread+0x80>)
 8017076:	6812      	ldr	r2, [r2, #0]
 8017078:	f107 0114 	add.w	r1, r7, #20
 801707c:	4618      	mov	r0, r3
 801707e:	f7fd fb21 	bl	80146c4 <xQueueReceive>
 8017082:	4603      	mov	r3, r0
 8017084:	2b00      	cmp	r3, #0
 8017086:	d021      	beq.n	80170cc <audioClipThread+0x64>

    	switch (mbox_data.type) {
 8017088:	7d3b      	ldrb	r3, [r7, #20]
 801708a:	2b00      	cmp	r3, #0
 801708c:	d120      	bne.n	80170d0 <audioClipThread+0x68>
		  case ACMAIL_DECODER_STATE:
			decoder_ts = mbox_data.pl[0];
 801708e:	7d7a      	ldrb	r2, [r7, #21]
 8017090:	4b16      	ldr	r3, [pc, #88]	; (80170ec <audioClipThread+0x84>)
 8017092:	701a      	strb	r2, [r3, #0]
			if(decoder_ts == DEC_TS_BUFFERING)
 8017094:	4b15      	ldr	r3, [pc, #84]	; (80170ec <audioClipThread+0x84>)
 8017096:	781b      	ldrb	r3, [r3, #0]
 8017098:	2b01      	cmp	r3, #1
 801709a:	d109      	bne.n	80170b0 <audioClipThread+0x48>
			{
				q_timeout = 0;
 801709c:	4b12      	ldr	r3, [pc, #72]	; (80170e8 <audioClipThread+0x80>)
 801709e:	2200      	movs	r2, #0
 80170a0:	601a      	str	r2, [r3, #0]
				mbox_backup = mbox_data;
 80170a2:	f107 0308 	add.w	r3, r7, #8
 80170a6:	f107 0214 	add.w	r2, r7, #20
 80170aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80170ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			}
			if(decoder_ts == DEC_TS_IDLE)
 80170b0:	4b0e      	ldr	r3, [pc, #56]	; (80170ec <audioClipThread+0x84>)
 80170b2:	781b      	ldrb	r3, [r3, #0]
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d10d      	bne.n	80170d4 <audioClipThread+0x6c>
			{
				q_timeout = AUDP_IDLE_INTERVAL;
 80170b8:	4b0b      	ldr	r3, [pc, #44]	; (80170e8 <audioClipThread+0x80>)
 80170ba:	22fa      	movs	r2, #250	; 0xfa
 80170bc:	601a      	str	r2, [r3, #0]
				rtos_cmd_success(&mbox_backup.items);
 80170be:	f107 0308 	add.w	r3, r7, #8
 80170c2:	3304      	adds	r3, #4
 80170c4:	4618      	mov	r0, r3
 80170c6:	f7ff ffb0 	bl	801702a <rtos_cmd_success>
			}

			break;
 80170ca:	e003      	b.n	80170d4 <audioClipThread+0x6c>

		  default:
			break;

		}
    }
 80170cc:	bf00      	nop
 80170ce:	e002      	b.n	80170d6 <audioClipThread+0x6e>
			break;
 80170d0:	bf00      	nop
 80170d2:	e000      	b.n	80170d6 <audioClipThread+0x6e>
			break;
 80170d4:	bf00      	nop
    decoder_thread(decoder_ts);
 80170d6:	4b05      	ldr	r3, [pc, #20]	; (80170ec <audioClipThread+0x84>)
 80170d8:	781b      	ldrb	r3, [r3, #0]
 80170da:	4618      	mov	r0, r3
 80170dc:	f000 fcaa 	bl	8017a34 <decoder_thread>
    if (xQueueReceive(ac_mail, &mbox_data, q_timeout)) {
 80170e0:	e7c6      	b.n	8017070 <audioClipThread+0x8>
 80170e2:	bf00      	nop
 80170e4:	2000afa8 	.word	0x2000afa8
 80170e8:	20000040 	.word	0x20000040
 80170ec:	2000ae40 	.word	0x2000ae40

080170f0 <internal_decoder_callback>:

/*! \brief Decoder callback called during playback

    \param *context Contains decoder event
*/
static void internal_decoder_callback(void *context) {
 80170f0:	b580      	push	{r7, lr}
 80170f2:	b086      	sub	sp, #24
 80170f4:	af00      	add	r7, sp, #0
 80170f6:	6078      	str	r0, [r7, #4]

  enum decoder_event *evt = (enum decoder_event *)context;
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	617b      	str	r3, [r7, #20]
  struct acmail acmail;

  switch (*evt) {
 80170fc:	697b      	ldr	r3, [r7, #20]
 80170fe:	781b      	ldrb	r3, [r3, #0]
 8017100:	2b03      	cmp	r3, #3
 8017102:	d833      	bhi.n	801716c <internal_decoder_callback+0x7c>
 8017104:	a201      	add	r2, pc, #4	; (adr r2, 801710c <internal_decoder_callback+0x1c>)
 8017106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801710a:	bf00      	nop
 801710c:	0801711d 	.word	0x0801711d
 8017110:	08017167 	.word	0x08017167
 8017114:	08017137 	.word	0x08017137
 8017118:	08017167 	.word	0x08017167

  // buffer reached threshold
  // start streaming
  case DEC_EVT_BUFFERING_REACH_THRSHLD:
    acmail.type = ACMAIL_DECODER_STATE;
 801711c:	2300      	movs	r3, #0
 801711e:	723b      	strb	r3, [r7, #8]
    acmail.pl[0] = DEC_TS_STREAMING;
 8017120:	2302      	movs	r3, #2
 8017122:	727b      	strb	r3, [r7, #9]
    xQueueSend(ac_mail, &acmail, 0);
 8017124:	4b13      	ldr	r3, [pc, #76]	; (8017174 <internal_decoder_callback+0x84>)
 8017126:	6818      	ldr	r0, [r3, #0]
 8017128:	f107 0108 	add.w	r1, r7, #8
 801712c:	2300      	movs	r3, #0
 801712e:	2200      	movs	r2, #0
 8017130:	f7fd f92e 	bl	8014390 <xQueueGenericSend>
    break;
 8017134:	e01a      	b.n	801716c <internal_decoder_callback+0x7c>
    // nothing to do..
    break;

  // end of clip streaming
  case DEC_EVT_STREAMING_END:
    acmail.type = ACMAIL_DECODER_STATE;
 8017136:	2300      	movs	r3, #0
 8017138:	723b      	strb	r3, [r7, #8]
    acmail.pl[0] = DEC_TS_IDLE;
 801713a:	2300      	movs	r3, #0
 801713c:	727b      	strb	r3, [r7, #9]
    xQueueSend(ac_mail, &acmail, 0);
 801713e:	4b0d      	ldr	r3, [pc, #52]	; (8017174 <internal_decoder_callback+0x84>)
 8017140:	6818      	ldr	r0, [r3, #0]
 8017142:	f107 0108 	add.w	r1, r7, #8
 8017146:	2300      	movs	r3, #0
 8017148:	2200      	movs	r2, #0
 801714a:	f7fd f921 	bl	8014390 <xQueueGenericSend>
    busy = false;
 801714e:	4b0a      	ldr	r3, [pc, #40]	; (8017178 <internal_decoder_callback+0x88>)
 8017150:	2200      	movs	r2, #0
 8017152:	701a      	strb	r2, [r3, #0]

    // call user callback
    if (p_callback != NULL)
 8017154:	4b09      	ldr	r3, [pc, #36]	; (801717c <internal_decoder_callback+0x8c>)
 8017156:	681b      	ldr	r3, [r3, #0]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d006      	beq.n	801716a <internal_decoder_callback+0x7a>
      p_callback(NULL);
 801715c:	4b07      	ldr	r3, [pc, #28]	; (801717c <internal_decoder_callback+0x8c>)
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	2000      	movs	r0, #0
 8017162:	4798      	blx	r3
    break;
 8017164:	e001      	b.n	801716a <internal_decoder_callback+0x7a>
    break;
 8017166:	bf00      	nop
 8017168:	e000      	b.n	801716c <internal_decoder_callback+0x7c>
    break;
 801716a:	bf00      	nop

  case DEC_EVT_ERROR:
    break;
  }

  return;
 801716c:	bf00      	nop
}
 801716e:	3718      	adds	r7, #24
 8017170:	46bd      	mov	sp, r7
 8017172:	bd80      	pop	{r7, pc}
 8017174:	2000afa8 	.word	0x2000afa8
 8017178:	2000ae38 	.word	0x2000ae38
 801717c:	2000ae3c 	.word	0x2000ae3c

08017180 <audioClipEOStreamAssignCB>:

/*----------------------------------------------------------------------*/

int audioClipEOStreamAssignCB(void (*cb)(void *context)) {
 8017180:	b480      	push	{r7}
 8017182:	b083      	sub	sp, #12
 8017184:	af00      	add	r7, sp, #0
 8017186:	6078      	str	r0, [r7, #4]
  if (cb == NULL)
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	2b00      	cmp	r3, #0
 801718c:	d102      	bne.n	8017194 <audioClipEOStreamAssignCB+0x14>
    p_callback = cb;
 801718e:	4a05      	ldr	r2, [pc, #20]	; (80171a4 <audioClipEOStreamAssignCB+0x24>)
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	6013      	str	r3, [r2, #0]
  return 0;
 8017194:	2300      	movs	r3, #0
}
 8017196:	4618      	mov	r0, r3
 8017198:	370c      	adds	r7, #12
 801719a:	46bd      	mov	sp, r7
 801719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a0:	4770      	bx	lr
 80171a2:	bf00      	nop
 80171a4:	2000ae3c 	.word	0x2000ae3c

080171a8 <audioClipInit>:

/*----------------------------------------------------------------------*/

int audioClipInit(I2sObject *i2s, void (*eos_cb)(void *context)) {
 80171a8:	b580      	push	{r7, lr}
 80171aa:	b084      	sub	sp, #16
 80171ac:	af02      	add	r7, sp, #8
 80171ae:	6078      	str	r0, [r7, #4]
 80171b0:	6039      	str	r1, [r7, #0]

	i2sDrv = i2s;
 80171b2:	4a15      	ldr	r2, [pc, #84]	; (8017208 <audioClipInit+0x60>)
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	6013      	str	r3, [r2, #0]

  // pass the peripheral instances to the wrapper layer
  wrp_i2s_init(i2sDrv, dac_handler_dma_txcmplt_buffer_feed_cb, dac_handler_dma_txhalfcmplt_buffer_feed_cb); // rework I2SObject
 80171b8:	4b13      	ldr	r3, [pc, #76]	; (8017208 <audioClipInit+0x60>)
 80171ba:	681b      	ldr	r3, [r3, #0]
 80171bc:	4a13      	ldr	r2, [pc, #76]	; (801720c <audioClipInit+0x64>)
 80171be:	4914      	ldr	r1, [pc, #80]	; (8017210 <audioClipInit+0x68>)
 80171c0:	4618      	mov	r0, r3
 80171c2:	f002 fe85 	bl	8019ed0 <wrp_i2s_init>

  // assign decoder events callback
  decoder_events_assign_callback(internal_decoder_callback);
 80171c6:	4813      	ldr	r0, [pc, #76]	; (8017214 <audioClipInit+0x6c>)
 80171c8:	f000 fcd0 	bl	8017b6c <decoder_events_assign_callback>
  // assign user callback
  audioClipEOStreamAssignCB(eos_cb);
 80171cc:	6838      	ldr	r0, [r7, #0]
 80171ce:	f7ff ffd7 	bl	8017180 <audioClipEOStreamAssignCB>

  // create mbox
  rtos_createMailbox(&ac_mail, sizeof(struct acmail), AC_MBOX_SIZE);
 80171d2:	2210      	movs	r2, #16
 80171d4:	210c      	movs	r1, #12
 80171d6:	4810      	ldr	r0, [pc, #64]	; (8017218 <audioClipInit+0x70>)
 80171d8:	f7ff fefb 	bl	8016fd2 <rtos_createMailbox>
  // create Semaphore
  rtos_createSemaphore(&sem, 1, 0);
 80171dc:	2200      	movs	r2, #0
 80171de:	2101      	movs	r1, #1
 80171e0:	480e      	ldr	r0, [pc, #56]	; (801721c <audioClipInit+0x74>)
 80171e2:	f7ff ff0a 	bl	8016ffa <rtos_createSemaphore>
  // create thread
  rtos_createThread(&ac_task, AC_RTOS_PRIORITY, AC_STACKSIZE,
 80171e6:	2106      	movs	r1, #6
 80171e8:	2300      	movs	r3, #0
 80171ea:	9301      	str	r3, [sp, #4]
 80171ec:	4b0c      	ldr	r3, [pc, #48]	; (8017220 <audioClipInit+0x78>)
 80171ee:	9300      	str	r3, [sp, #0]
 80171f0:	4b0c      	ldr	r3, [pc, #48]	; (8017224 <audioClipInit+0x7c>)
 80171f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80171f6:	480c      	ldr	r0, [pc, #48]	; (8017228 <audioClipInit+0x80>)
 80171f8:	f7ff fed4 	bl	8016fa4 <rtos_createThread>
                    audioClipThread, "Audio Clips Thread", NULL);

  return 0;
 80171fc:	2300      	movs	r3, #0
}
 80171fe:	4618      	mov	r0, r3
 8017200:	3708      	adds	r7, #8
 8017202:	46bd      	mov	sp, r7
 8017204:	bd80      	pop	{r7, pc}
 8017206:	bf00      	nop
 8017208:	2000afac 	.word	0x2000afac
 801720c:	08017549 	.word	0x08017549
 8017210:	08017495 	.word	0x08017495
 8017214:	080170f1 	.word	0x080170f1
 8017218:	2000afa8 	.word	0x2000afa8
 801721c:	2000afa0 	.word	0x2000afa0
 8017220:	0801b0b4 	.word	0x0801b0b4
 8017224:	08017069 	.word	0x08017069
 8017228:	2000afa4 	.word	0x2000afa4

0801722c <audioClipPlay>:

/*----------------------------------------------------------------------*/

int audioClipPlay(uint8_t clip) {
 801722c:	b580      	push	{r7, lr}
 801722e:	b086      	sub	sp, #24
 8017230:	af00      	add	r7, sp, #0
 8017232:	4603      	mov	r3, r0
 8017234:	71fb      	strb	r3, [r7, #7]
	bool bt_pause = false;
 8017236:	2300      	movs	r3, #0
 8017238:	75fb      	strb	r3, [r7, #23]
	uint8_t bt_vol0 = 0, bt_vol1 = 0;
 801723a:	2300      	movs	r3, #0
 801723c:	75bb      	strb	r3, [r7, #22]
 801723e:	2300      	movs	r3, #0
 8017240:	757b      	strb	r3, [r7, #21]

	i2s_InitAudClip(i2sDrv);
 8017242:	4b18      	ldr	r3, [pc, #96]	; (80172a4 <audioClipPlay+0x78>)
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	4618      	mov	r0, r3
 8017248:	f000 fcfa 	bl	8017c40 <i2s_InitAudClip>

	// trigger buffering and playback
	decoder_play_clip(clip);
 801724c:	79fb      	ldrb	r3, [r7, #7]
 801724e:	4618      	mov	r0, r3
 8017250:	f000 fc18 	bl	8017a84 <decoder_play_clip>

	// mbox to self starts buffering
	struct acmail acmail;
	acmail.type = ACMAIL_DECODER_STATE;
 8017254:	2300      	movs	r3, #0
 8017256:	723b      	strb	r3, [r7, #8]
	acmail.pl[0] = DEC_TS_BUFFERING;
 8017258:	2301      	movs	r3, #1
 801725a:	727b      	strb	r3, [r7, #9]
	acmail.items.sem_cmd = &sem;
 801725c:	4b12      	ldr	r3, [pc, #72]	; (80172a8 <audioClipPlay+0x7c>)
 801725e:	60fb      	str	r3, [r7, #12]
	acmail.items.success = false;
 8017260:	2300      	movs	r3, #0
 8017262:	743b      	strb	r3, [r7, #16]
	xQueueSend(ac_mail, &acmail, 0);
 8017264:	4b11      	ldr	r3, [pc, #68]	; (80172ac <audioClipPlay+0x80>)
 8017266:	6818      	ldr	r0, [r3, #0]
 8017268:	f107 0108 	add.w	r1, r7, #8
 801726c:	2300      	movs	r3, #0
 801726e:	2200      	movs	r2, #0
 8017270:	f7fd f88e 	bl	8014390 <xQueueGenericSend>

	bool result = xSemaphoreTake(sem, CLIP_TIMEOUT);
 8017274:	4b0c      	ldr	r3, [pc, #48]	; (80172a8 <audioClipPlay+0x7c>)
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	f643 2198 	movw	r1, #15000	; 0x3a98
 801727c:	4618      	mov	r0, r3
 801727e:	f7fd fb01 	bl	8014884 <xQueueSemaphoreTake>
 8017282:	4603      	mov	r3, r0
 8017284:	2b00      	cmp	r3, #0
 8017286:	bf14      	ite	ne
 8017288:	2301      	movne	r3, #1
 801728a:	2300      	moveq	r3, #0
 801728c:	753b      	strb	r3, [r7, #20]

	i2s_EndAudClip(i2sDrv);
 801728e:	4b05      	ldr	r3, [pc, #20]	; (80172a4 <audioClipPlay+0x78>)
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	4618      	mov	r0, r3
 8017294:	f000 fcee 	bl	8017c74 <i2s_EndAudClip>

	return 0;
 8017298:	2300      	movs	r3, #0
}
 801729a:	4618      	mov	r0, r3
 801729c:	3718      	adds	r7, #24
 801729e:	46bd      	mov	sp, r7
 80172a0:	bd80      	pop	{r7, pc}
 80172a2:	bf00      	nop
 80172a4:	2000afac 	.word	0x2000afac
 80172a8:	2000afa0 	.word	0x2000afa0
 80172ac:	2000afa8 	.word	0x2000afa8

080172b0 <audioClipListInit>:

/*----------------------------------------------------------------------*/

void audioClipListInit(clip_node *clips, uint16_t numclips)
{
 80172b0:	b480      	push	{r7}
 80172b2:	b083      	sub	sp, #12
 80172b4:	af00      	add	r7, sp, #0
 80172b6:	6078      	str	r0, [r7, #4]
 80172b8:	460b      	mov	r3, r1
 80172ba:	807b      	strh	r3, [r7, #2]
	audio_clips = clips;
 80172bc:	4a05      	ldr	r2, [pc, #20]	; (80172d4 <audioClipListInit+0x24>)
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	6013      	str	r3, [r2, #0]
	num_clips = numclips;
 80172c2:	4a05      	ldr	r2, [pc, #20]	; (80172d8 <audioClipListInit+0x28>)
 80172c4:	887b      	ldrh	r3, [r7, #2]
 80172c6:	8013      	strh	r3, [r2, #0]
}
 80172c8:	bf00      	nop
 80172ca:	370c      	adds	r7, #12
 80172cc:	46bd      	mov	sp, r7
 80172ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172d2:	4770      	bx	lr
 80172d4:	200103b0 	.word	0x200103b0
 80172d8:	200103b4 	.word	0x200103b4

080172dc <clip_handler_chunk_read>:

clip_node *audio_clips;
uint16_t num_clips;

// function definitions
int32_t clip_handler_chunk_read(uint8_t *chk, uint32_t size) {
 80172dc:	b580      	push	{r7, lr}
 80172de:	b084      	sub	sp, #16
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	6078      	str	r0, [r7, #4]
 80172e4:	6039      	str	r1, [r7, #0]

  int32_t nbytes = 0;
 80172e6:	2300      	movs	r3, #0
 80172e8:	60fb      	str	r3, [r7, #12]
  if (clip_h.offset == clip_h.clip->size)
 80172ea:	4b17      	ldr	r3, [pc, #92]	; (8017348 <clip_handler_chunk_read+0x6c>)
 80172ec:	689a      	ldr	r2, [r3, #8]
 80172ee:	4b16      	ldr	r3, [pc, #88]	; (8017348 <clip_handler_chunk_read+0x6c>)
 80172f0:	685b      	ldr	r3, [r3, #4]
 80172f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172f4:	429a      	cmp	r2, r3
 80172f6:	d101      	bne.n	80172fc <clip_handler_chunk_read+0x20>
    return nbytes;
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	e020      	b.n	801733e <clip_handler_chunk_read+0x62>

  if ((clip_h.offset + size) > clip_h.clip->size) {
 80172fc:	4b12      	ldr	r3, [pc, #72]	; (8017348 <clip_handler_chunk_read+0x6c>)
 80172fe:	689a      	ldr	r2, [r3, #8]
 8017300:	683b      	ldr	r3, [r7, #0]
 8017302:	441a      	add	r2, r3
 8017304:	4b10      	ldr	r3, [pc, #64]	; (8017348 <clip_handler_chunk_read+0x6c>)
 8017306:	685b      	ldr	r3, [r3, #4]
 8017308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801730a:	429a      	cmp	r2, r3
 801730c:	d907      	bls.n	801731e <clip_handler_chunk_read+0x42>
    // end of buffering
    nbytes = clip_h.clip->size - clip_h.offset;
 801730e:	4b0e      	ldr	r3, [pc, #56]	; (8017348 <clip_handler_chunk_read+0x6c>)
 8017310:	685b      	ldr	r3, [r3, #4]
 8017312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017314:	4b0c      	ldr	r3, [pc, #48]	; (8017348 <clip_handler_chunk_read+0x6c>)
 8017316:	689b      	ldr	r3, [r3, #8]
 8017318:	1ad3      	subs	r3, r2, r3
 801731a:	60fb      	str	r3, [r7, #12]
 801731c:	e001      	b.n	8017322 <clip_handler_chunk_read+0x46>
  } else
    nbytes = size;
 801731e:	683b      	ldr	r3, [r7, #0]
 8017320:	60fb      	str	r3, [r7, #12]

  clip_h.mem_read(chk, clip_h.offset, nbytes);
 8017322:	4b09      	ldr	r3, [pc, #36]	; (8017348 <clip_handler_chunk_read+0x6c>)
 8017324:	68db      	ldr	r3, [r3, #12]
 8017326:	4a08      	ldr	r2, [pc, #32]	; (8017348 <clip_handler_chunk_read+0x6c>)
 8017328:	6891      	ldr	r1, [r2, #8]
 801732a:	68fa      	ldr	r2, [r7, #12]
 801732c:	6878      	ldr	r0, [r7, #4]
 801732e:	4798      	blx	r3
  clip_h.offset += nbytes;
 8017330:	4b05      	ldr	r3, [pc, #20]	; (8017348 <clip_handler_chunk_read+0x6c>)
 8017332:	689a      	ldr	r2, [r3, #8]
 8017334:	68fb      	ldr	r3, [r7, #12]
 8017336:	4413      	add	r3, r2
 8017338:	4a03      	ldr	r2, [pc, #12]	; (8017348 <clip_handler_chunk_read+0x6c>)
 801733a:	6093      	str	r3, [r2, #8]

  return nbytes;
 801733c:	68fb      	ldr	r3, [r7, #12]
}
 801733e:	4618      	mov	r0, r3
 8017340:	3710      	adds	r7, #16
 8017342:	46bd      	mov	sp, r7
 8017344:	bd80      	pop	{r7, pc}
 8017346:	bf00      	nop
 8017348:	20000044 	.word	0x20000044

0801734c <clip_handler_init_clip>:

// this function is essential since it does not only check the id
// but also fills the size and address of the clips
// initially this code was thaugt to hold these parameters in the stack
int32_t clip_handler_init_clip(uint8_t clip_idx) {
 801734c:	b580      	push	{r7, lr}
 801734e:	b082      	sub	sp, #8
 8017350:	af00      	add	r7, sp, #0
 8017352:	4603      	mov	r3, r0
 8017354:	71fb      	strb	r3, [r7, #7]
  if (clip_idx >= num_clips)
 8017356:	79fb      	ldrb	r3, [r7, #7]
 8017358:	b29a      	uxth	r2, r3
 801735a:	4b19      	ldr	r3, [pc, #100]	; (80173c0 <clip_handler_init_clip+0x74>)
 801735c:	881b      	ldrh	r3, [r3, #0]
 801735e:	429a      	cmp	r2, r3
 8017360:	d302      	bcc.n	8017368 <clip_handler_init_clip+0x1c>
    return -1;
 8017362:	f04f 33ff 	mov.w	r3, #4294967295
 8017366:	e026      	b.n	80173b6 <clip_handler_init_clip+0x6a>

  clip_h.offset = 0;
 8017368:	4b16      	ldr	r3, [pc, #88]	; (80173c4 <clip_handler_init_clip+0x78>)
 801736a:	2200      	movs	r2, #0
 801736c:	609a      	str	r2, [r3, #8]

  clip_h.clip = &audio_clips[clip_idx];
 801736e:	4b16      	ldr	r3, [pc, #88]	; (80173c8 <clip_handler_init_clip+0x7c>)
 8017370:	6819      	ldr	r1, [r3, #0]
 8017372:	79fa      	ldrb	r2, [r7, #7]
 8017374:	4613      	mov	r3, r2
 8017376:	005b      	lsls	r3, r3, #1
 8017378:	4413      	add	r3, r2
 801737a:	011b      	lsls	r3, r3, #4
 801737c:	440b      	add	r3, r1
 801737e:	4a11      	ldr	r2, [pc, #68]	; (80173c4 <clip_handler_init_clip+0x78>)
 8017380:	6053      	str	r3, [r2, #4]

  // this is somewhat more than checking the id
  // wrpper stuff..
  if (clip_h.set_element(clip_idx))
 8017382:	4b10      	ldr	r3, [pc, #64]	; (80173c4 <clip_handler_init_clip+0x78>)
 8017384:	699b      	ldr	r3, [r3, #24]
 8017386:	79fa      	ldrb	r2, [r7, #7]
 8017388:	4610      	mov	r0, r2
 801738a:	4798      	blx	r3
 801738c:	4603      	mov	r3, r0
 801738e:	2b00      	cmp	r3, #0
 8017390:	d002      	beq.n	8017398 <clip_handler_init_clip+0x4c>
    return -2;
 8017392:	f06f 0301 	mvn.w	r3, #1
 8017396:	e00e      	b.n	80173b6 <clip_handler_init_clip+0x6a>

  clip_h.clip->size = clip_h.get_size();
 8017398:	4b0a      	ldr	r3, [pc, #40]	; (80173c4 <clip_handler_init_clip+0x78>)
 801739a:	691b      	ldr	r3, [r3, #16]
 801739c:	4798      	blx	r3
 801739e:	4602      	mov	r2, r0
 80173a0:	4b08      	ldr	r3, [pc, #32]	; (80173c4 <clip_handler_init_clip+0x78>)
 80173a2:	685b      	ldr	r3, [r3, #4]
 80173a4:	62da      	str	r2, [r3, #44]	; 0x2c
  clip_h.clip->address = clip_h.get_addr();
 80173a6:	4b07      	ldr	r3, [pc, #28]	; (80173c4 <clip_handler_init_clip+0x78>)
 80173a8:	695b      	ldr	r3, [r3, #20]
 80173aa:	4798      	blx	r3
 80173ac:	4602      	mov	r2, r0
 80173ae:	4b05      	ldr	r3, [pc, #20]	; (80173c4 <clip_handler_init_clip+0x78>)
 80173b0:	685b      	ldr	r3, [r3, #4]
 80173b2:	629a      	str	r2, [r3, #40]	; 0x28

  return 0;
 80173b4:	2300      	movs	r3, #0
}
 80173b6:	4618      	mov	r0, r3
 80173b8:	3708      	adds	r7, #8
 80173ba:	46bd      	mov	sp, r7
 80173bc:	bd80      	pop	{r7, pc}
 80173be:	bf00      	nop
 80173c0:	200103b4 	.word	0x200103b4
 80173c4:	20000044 	.word	0x20000044
 80173c8:	200103b0 	.word	0x200103b0

080173cc <clip_handler_get_sample_rate>:

uint32_t clip_handler_get_sample_rate(void) {
 80173cc:	b480      	push	{r7}
 80173ce:	af00      	add	r7, sp, #0
  if (clip_h.clip == NULL)
 80173d0:	4b07      	ldr	r3, [pc, #28]	; (80173f0 <clip_handler_get_sample_rate+0x24>)
 80173d2:	685b      	ldr	r3, [r3, #4]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d102      	bne.n	80173de <clip_handler_get_sample_rate+0x12>
    return -1;
 80173d8:	f04f 33ff 	mov.w	r3, #4294967295
 80173dc:	e002      	b.n	80173e4 <clip_handler_get_sample_rate+0x18>
  return clip_h.clip->sampling_rate;
 80173de:	4b04      	ldr	r3, [pc, #16]	; (80173f0 <clip_handler_get_sample_rate+0x24>)
 80173e0:	685b      	ldr	r3, [r3, #4]
 80173e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80173e4:	4618      	mov	r0, r3
 80173e6:	46bd      	mov	sp, r7
 80173e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ec:	4770      	bx	lr
 80173ee:	bf00      	nop
 80173f0:	20000044 	.word	0x20000044

080173f4 <clip_handler_is_stereo>:

bool clip_handler_is_stereo(void) { return clip_h.clip->is_stereo; }
 80173f4:	b480      	push	{r7}
 80173f6:	af00      	add	r7, sp, #0
 80173f8:	4b06      	ldr	r3, [pc, #24]	; (8017414 <clip_handler_is_stereo+0x20>)
 80173fa:	685b      	ldr	r3, [r3, #4]
 80173fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017400:	2b00      	cmp	r3, #0
 8017402:	bf14      	ite	ne
 8017404:	2301      	movne	r3, #1
 8017406:	2300      	moveq	r3, #0
 8017408:	b2db      	uxtb	r3, r3
 801740a:	4618      	mov	r0, r3
 801740c:	46bd      	mov	sp, r7
 801740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017412:	4770      	bx	lr
 8017414:	20000044 	.word	0x20000044

08017418 <dac_handler_init>:
    .is_empty = true,
    .is_full = false,
};


int32_t dac_handler_init(struct dac *o) {
 8017418:	b580      	push	{r7, lr}
 801741a:	b082      	sub	sp, #8
 801741c:	af00      	add	r7, sp, #0
 801741e:	6078      	str	r0, [r7, #4]
  dac_p = o; // workaround for dma_buffer_feed cb
 8017420:	4a09      	ldr	r2, [pc, #36]	; (8017448 <dac_handler_init+0x30>)
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	6013      	str	r3, [r2, #0]
  o->buf = wrp_i2s_get_dma_buf(&o->size);
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	330c      	adds	r3, #12
 801742a:	4618      	mov	r0, r3
 801742c:	f002 fd80 	bl	8019f30 <wrp_i2s_get_dma_buf>
 8017430:	4602      	mov	r2, r0
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	609a      	str	r2, [r3, #8]
  ring16_flush(&ring);
 8017436:	4805      	ldr	r0, [pc, #20]	; (801744c <dac_handler_init+0x34>)
 8017438:	f000 f9e1 	bl	80177fe <ring16_flush>
  return 0;
 801743c:	2300      	movs	r3, #0
}
 801743e:	4618      	mov	r0, r3
 8017440:	3708      	adds	r7, #8
 8017442:	46bd      	mov	sp, r7
 8017444:	bd80      	pop	{r7, pc}
 8017446:	bf00      	nop
 8017448:	200103b8 	.word	0x200103b8
 801744c:	20000060 	.word	0x20000060

08017450 <dac_handler_start_stream>:

int32_t dac_handler_start_stream(struct dac *o) {
 8017450:	b580      	push	{r7, lr}
 8017452:	b082      	sub	sp, #8
 8017454:	af00      	add	r7, sp, #0
 8017456:	6078      	str	r0, [r7, #4]
  // status
  o->is_streaming = true;
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	2201      	movs	r2, #1
 801745c:	701a      	strb	r2, [r3, #0]
  // i2s stuff
  wrp_i2s_tx();
 801745e:	f002 fd85 	bl	8019f6c <wrp_i2s_tx>
  return 0;
 8017462:	2300      	movs	r3, #0
}
 8017464:	4618      	mov	r0, r3
 8017466:	3708      	adds	r7, #8
 8017468:	46bd      	mov	sp, r7
 801746a:	bd80      	pop	{r7, pc}

0801746c <dac_handler_stop_stream>:

int32_t dac_handler_stop_stream(struct dac *o) {
 801746c:	b580      	push	{r7, lr}
 801746e:	b082      	sub	sp, #8
 8017470:	af00      	add	r7, sp, #0
 8017472:	6078      	str	r0, [r7, #4]
  // status
  o->is_streaming = false;
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	2200      	movs	r2, #0
 8017478:	701a      	strb	r2, [r3, #0]
  wrp_i2s_stop();
 801747a:	f002 fd95 	bl	8019fa8 <wrp_i2s_stop>
  ring16_flush(&ring);
 801747e:	4804      	ldr	r0, [pc, #16]	; (8017490 <dac_handler_stop_stream+0x24>)
 8017480:	f000 f9bd 	bl	80177fe <ring16_flush>
  return 0;
 8017484:	2300      	movs	r3, #0
}
 8017486:	4618      	mov	r0, r3
 8017488:	3708      	adds	r7, #8
 801748a:	46bd      	mov	sp, r7
 801748c:	bd80      	pop	{r7, pc}
 801748e:	bf00      	nop
 8017490:	20000060 	.word	0x20000060

08017494 <dac_handler_dma_txcmplt_buffer_feed_cb>:
  }

  return 0;
}

void dac_handler_dma_txcmplt_buffer_feed_cb(void) {
 8017494:	b580      	push	{r7, lr}
 8017496:	b082      	sub	sp, #8
 8017498:	af00      	add	r7, sp, #0
  uint32_t offset = dac_p->size >> 1;
 801749a:	4b29      	ldr	r3, [pc, #164]	; (8017540 <dac_handler_dma_txcmplt_buffer_feed_cb+0xac>)
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	68db      	ldr	r3, [r3, #12]
 80174a0:	085b      	lsrs	r3, r3, #1
 80174a2:	603b      	str	r3, [r7, #0]
  dac_p->tx_complete = true;
 80174a4:	4b26      	ldr	r3, [pc, #152]	; (8017540 <dac_handler_dma_txcmplt_buffer_feed_cb+0xac>)
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	2201      	movs	r2, #1
 80174aa:	745a      	strb	r2, [r3, #17]

  // filling the dma buffer is quite different for stereo vs mono
  if (dac_p->is_stereo) {
 80174ac:	4b24      	ldr	r3, [pc, #144]	; (8017540 <dac_handler_dma_txcmplt_buffer_feed_cb+0xac>)
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	785b      	ldrb	r3, [r3, #1]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d00f      	beq.n	80174d6 <dac_handler_dma_txcmplt_buffer_feed_cb+0x42>
    // straight from the decoder
    ring16_memrd(&ring, &dac_p->buf[offset], dac_p->size >> 1);
 80174b6:	4b22      	ldr	r3, [pc, #136]	; (8017540 <dac_handler_dma_txcmplt_buffer_feed_cb+0xac>)
 80174b8:	681b      	ldr	r3, [r3, #0]
 80174ba:	689a      	ldr	r2, [r3, #8]
 80174bc:	683b      	ldr	r3, [r7, #0]
 80174be:	005b      	lsls	r3, r3, #1
 80174c0:	18d1      	adds	r1, r2, r3
 80174c2:	4b1f      	ldr	r3, [pc, #124]	; (8017540 <dac_handler_dma_txcmplt_buffer_feed_cb+0xac>)
 80174c4:	681b      	ldr	r3, [r3, #0]
 80174c6:	68db      	ldr	r3, [r3, #12]
 80174c8:	085b      	lsrs	r3, r3, #1
 80174ca:	b29b      	uxth	r3, r3
 80174cc:	461a      	mov	r2, r3
 80174ce:	481d      	ldr	r0, [pc, #116]	; (8017544 <dac_handler_dma_txcmplt_buffer_feed_cb+0xb0>)
 80174d0:	f000 f971 	bl	80177b6 <ring16_memrd>
      }
      dac_p->buf[offset + s + 1] = dac_p->buf[offset + s];
    }
  }

  return;
 80174d4:	e031      	b.n	801753a <dac_handler_dma_txcmplt_buffer_feed_cb+0xa6>
    for (uint32_t s = 0; s < (dac_p->size >> 1); s += 2) {
 80174d6:	2300      	movs	r3, #0
 80174d8:	607b      	str	r3, [r7, #4]
 80174da:	e025      	b.n	8017528 <dac_handler_dma_txcmplt_buffer_feed_cb+0x94>
      if (ring16_pop(&ring, &dac_p->buf[offset + s])) {
 80174dc:	4b18      	ldr	r3, [pc, #96]	; (8017540 <dac_handler_dma_txcmplt_buffer_feed_cb+0xac>)
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	689a      	ldr	r2, [r3, #8]
 80174e2:	6839      	ldr	r1, [r7, #0]
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	440b      	add	r3, r1
 80174e8:	005b      	lsls	r3, r3, #1
 80174ea:	4413      	add	r3, r2
 80174ec:	4619      	mov	r1, r3
 80174ee:	4815      	ldr	r0, [pc, #84]	; (8017544 <dac_handler_dma_txcmplt_buffer_feed_cb+0xb0>)
 80174f0:	f000 f917 	bl	8017722 <ring16_pop>
 80174f4:	4603      	mov	r3, r0
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d11e      	bne.n	8017538 <dac_handler_dma_txcmplt_buffer_feed_cb+0xa4>
      dac_p->buf[offset + s + 1] = dac_p->buf[offset + s];
 80174fa:	4b11      	ldr	r3, [pc, #68]	; (8017540 <dac_handler_dma_txcmplt_buffer_feed_cb+0xac>)
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	689a      	ldr	r2, [r3, #8]
 8017500:	6839      	ldr	r1, [r7, #0]
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	440b      	add	r3, r1
 8017506:	005b      	lsls	r3, r3, #1
 8017508:	441a      	add	r2, r3
 801750a:	4b0d      	ldr	r3, [pc, #52]	; (8017540 <dac_handler_dma_txcmplt_buffer_feed_cb+0xac>)
 801750c:	681b      	ldr	r3, [r3, #0]
 801750e:	6899      	ldr	r1, [r3, #8]
 8017510:	6838      	ldr	r0, [r7, #0]
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	4403      	add	r3, r0
 8017516:	3301      	adds	r3, #1
 8017518:	005b      	lsls	r3, r3, #1
 801751a:	440b      	add	r3, r1
 801751c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8017520:	801a      	strh	r2, [r3, #0]
    for (uint32_t s = 0; s < (dac_p->size >> 1); s += 2) {
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	3302      	adds	r3, #2
 8017526:	607b      	str	r3, [r7, #4]
 8017528:	4b05      	ldr	r3, [pc, #20]	; (8017540 <dac_handler_dma_txcmplt_buffer_feed_cb+0xac>)
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	68db      	ldr	r3, [r3, #12]
 801752e:	085b      	lsrs	r3, r3, #1
 8017530:	687a      	ldr	r2, [r7, #4]
 8017532:	429a      	cmp	r2, r3
 8017534:	d3d2      	bcc.n	80174dc <dac_handler_dma_txcmplt_buffer_feed_cb+0x48>
  return;
 8017536:	e000      	b.n	801753a <dac_handler_dma_txcmplt_buffer_feed_cb+0xa6>
    	  return;
 8017538:	bf00      	nop
}
 801753a:	3708      	adds	r7, #8
 801753c:	46bd      	mov	sp, r7
 801753e:	bd80      	pop	{r7, pc}
 8017540:	200103b8 	.word	0x200103b8
 8017544:	20000060 	.word	0x20000060

08017548 <dac_handler_dma_txhalfcmplt_buffer_feed_cb>:

void dac_handler_dma_txhalfcmplt_buffer_feed_cb(void) {
 8017548:	b580      	push	{r7, lr}
 801754a:	b082      	sub	sp, #8
 801754c:	af00      	add	r7, sp, #0
  uint32_t offset = 0;
 801754e:	2300      	movs	r3, #0
 8017550:	603b      	str	r3, [r7, #0]
  dac_p->tx_halfcomplete = true;
 8017552:	4b27      	ldr	r3, [pc, #156]	; (80175f0 <dac_handler_dma_txhalfcmplt_buffer_feed_cb+0xa8>)
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	2201      	movs	r2, #1
 8017558:	741a      	strb	r2, [r3, #16]

  // filling the dma buffer is quite different for stereo vs mono
  if (dac_p->is_stereo) {
 801755a:	4b25      	ldr	r3, [pc, #148]	; (80175f0 <dac_handler_dma_txhalfcmplt_buffer_feed_cb+0xa8>)
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	785b      	ldrb	r3, [r3, #1]
 8017560:	2b00      	cmp	r3, #0
 8017562:	d00f      	beq.n	8017584 <dac_handler_dma_txhalfcmplt_buffer_feed_cb+0x3c>
    // straight from the decoder
    ring16_memrd(&ring, &dac_p->buf[offset], dac_p->size >> 1);
 8017564:	4b22      	ldr	r3, [pc, #136]	; (80175f0 <dac_handler_dma_txhalfcmplt_buffer_feed_cb+0xa8>)
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	689a      	ldr	r2, [r3, #8]
 801756a:	683b      	ldr	r3, [r7, #0]
 801756c:	005b      	lsls	r3, r3, #1
 801756e:	18d1      	adds	r1, r2, r3
 8017570:	4b1f      	ldr	r3, [pc, #124]	; (80175f0 <dac_handler_dma_txhalfcmplt_buffer_feed_cb+0xa8>)
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	68db      	ldr	r3, [r3, #12]
 8017576:	085b      	lsrs	r3, r3, #1
 8017578:	b29b      	uxth	r3, r3
 801757a:	461a      	mov	r2, r3
 801757c:	481d      	ldr	r0, [pc, #116]	; (80175f4 <dac_handler_dma_txhalfcmplt_buffer_feed_cb+0xac>)
 801757e:	f000 f91a 	bl	80177b6 <ring16_memrd>
      }
      dac_p->buf[offset + s + 1] = dac_p->buf[offset + s];
    }
  }

  return;
 8017582:	e031      	b.n	80175e8 <dac_handler_dma_txhalfcmplt_buffer_feed_cb+0xa0>
    for (uint32_t s = 0; s < (dac_p->size >> 1); s += 2) {
 8017584:	2300      	movs	r3, #0
 8017586:	607b      	str	r3, [r7, #4]
 8017588:	e025      	b.n	80175d6 <dac_handler_dma_txhalfcmplt_buffer_feed_cb+0x8e>
      if (ring16_pop(&ring, &dac_p->buf[offset + s])) {
 801758a:	4b19      	ldr	r3, [pc, #100]	; (80175f0 <dac_handler_dma_txhalfcmplt_buffer_feed_cb+0xa8>)
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	689a      	ldr	r2, [r3, #8]
 8017590:	6839      	ldr	r1, [r7, #0]
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	440b      	add	r3, r1
 8017596:	005b      	lsls	r3, r3, #1
 8017598:	4413      	add	r3, r2
 801759a:	4619      	mov	r1, r3
 801759c:	4815      	ldr	r0, [pc, #84]	; (80175f4 <dac_handler_dma_txhalfcmplt_buffer_feed_cb+0xac>)
 801759e:	f000 f8c0 	bl	8017722 <ring16_pop>
 80175a2:	4603      	mov	r3, r0
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d11e      	bne.n	80175e6 <dac_handler_dma_txhalfcmplt_buffer_feed_cb+0x9e>
      dac_p->buf[offset + s + 1] = dac_p->buf[offset + s];
 80175a8:	4b11      	ldr	r3, [pc, #68]	; (80175f0 <dac_handler_dma_txhalfcmplt_buffer_feed_cb+0xa8>)
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	689a      	ldr	r2, [r3, #8]
 80175ae:	6839      	ldr	r1, [r7, #0]
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	440b      	add	r3, r1
 80175b4:	005b      	lsls	r3, r3, #1
 80175b6:	441a      	add	r2, r3
 80175b8:	4b0d      	ldr	r3, [pc, #52]	; (80175f0 <dac_handler_dma_txhalfcmplt_buffer_feed_cb+0xa8>)
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	6899      	ldr	r1, [r3, #8]
 80175be:	6838      	ldr	r0, [r7, #0]
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	4403      	add	r3, r0
 80175c4:	3301      	adds	r3, #1
 80175c6:	005b      	lsls	r3, r3, #1
 80175c8:	440b      	add	r3, r1
 80175ca:	f9b2 2000 	ldrsh.w	r2, [r2]
 80175ce:	801a      	strh	r2, [r3, #0]
    for (uint32_t s = 0; s < (dac_p->size >> 1); s += 2) {
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	3302      	adds	r3, #2
 80175d4:	607b      	str	r3, [r7, #4]
 80175d6:	4b06      	ldr	r3, [pc, #24]	; (80175f0 <dac_handler_dma_txhalfcmplt_buffer_feed_cb+0xa8>)
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	68db      	ldr	r3, [r3, #12]
 80175dc:	085b      	lsrs	r3, r3, #1
 80175de:	687a      	ldr	r2, [r7, #4]
 80175e0:	429a      	cmp	r2, r3
 80175e2:	d3d2      	bcc.n	801758a <dac_handler_dma_txhalfcmplt_buffer_feed_cb+0x42>
  return;
 80175e4:	e000      	b.n	80175e8 <dac_handler_dma_txhalfcmplt_buffer_feed_cb+0xa0>
    	  return;
 80175e6:	bf00      	nop
}
 80175e8:	3708      	adds	r7, #8
 80175ea:	46bd      	mov	sp, r7
 80175ec:	bd80      	pop	{r7, pc}
 80175ee:	bf00      	nop
 80175f0:	200103b8 	.word	0x200103b8
 80175f4:	20000060 	.word	0x20000060

080175f8 <dac_handler_ring_buffer_push_sample>:

int32_t dac_handler_ring_buffer_push_sample(int16_t s) {
 80175f8:	b580      	push	{r7, lr}
 80175fa:	b082      	sub	sp, #8
 80175fc:	af00      	add	r7, sp, #0
 80175fe:	4603      	mov	r3, r0
 8017600:	80fb      	strh	r3, [r7, #6]
  return ring16_push(&ring, s);
 8017602:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017606:	4619      	mov	r1, r3
 8017608:	4803      	ldr	r0, [pc, #12]	; (8017618 <dac_handler_ring_buffer_push_sample+0x20>)
 801760a:	f000 f841 	bl	8017690 <ring16_push>
 801760e:	4603      	mov	r3, r0
}
 8017610:	4618      	mov	r0, r3
 8017612:	3708      	adds	r7, #8
 8017614:	46bd      	mov	sp, r7
 8017616:	bd80      	pop	{r7, pc}
 8017618:	20000060 	.word	0x20000060

0801761c <dac_handler_ring_is_above_threshold>:

bool dac_handler_ring_is_above_threshold(void) {
 801761c:	b480      	push	{r7}
 801761e:	af00      	add	r7, sp, #0
  return ring.entries > RING_THRSH;
 8017620:	4b06      	ldr	r3, [pc, #24]	; (801763c <dac_handler_ring_is_above_threshold+0x20>)
 8017622:	895b      	ldrh	r3, [r3, #10]
 8017624:	f641 62b8 	movw	r2, #7864	; 0x1eb8
 8017628:	4293      	cmp	r3, r2
 801762a:	bf8c      	ite	hi
 801762c:	2301      	movhi	r3, #1
 801762e:	2300      	movls	r3, #0
 8017630:	b2db      	uxtb	r3, r3
}
 8017632:	4618      	mov	r0, r3
 8017634:	46bd      	mov	sp, r7
 8017636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801763a:	4770      	bx	lr
 801763c:	20000060 	.word	0x20000060

08017640 <dac_handler_ring_is_empty>:

bool dac_handler_ring_is_above_push_threshold(void) {
  return ring.entries > RING_PUSH_THRSH;
}

bool dac_handler_ring_is_empty(void) { return ring.is_empty; }
 8017640:	b480      	push	{r7}
 8017642:	af00      	add	r7, sp, #0
 8017644:	4b04      	ldr	r3, [pc, #16]	; (8017658 <dac_handler_ring_is_empty+0x18>)
 8017646:	7b1b      	ldrb	r3, [r3, #12]
 8017648:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801764c:	b2db      	uxtb	r3, r3
 801764e:	4618      	mov	r0, r3
 8017650:	46bd      	mov	sp, r7
 8017652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017656:	4770      	bx	lr
 8017658:	20000060 	.word	0x20000060

0801765c <r16_inc_wrap>:
#include "ring16.h"

static inline uint16_t r16_inc_wrap(uint16_t index, uint16_t buf_size) {
 801765c:	b480      	push	{r7}
 801765e:	b083      	sub	sp, #12
 8017660:	af00      	add	r7, sp, #0
 8017662:	4603      	mov	r3, r0
 8017664:	460a      	mov	r2, r1
 8017666:	80fb      	strh	r3, [r7, #6]
 8017668:	4613      	mov	r3, r2
 801766a:	80bb      	strh	r3, [r7, #4]
  return ++index & (buf_size - 1);
 801766c:	88fb      	ldrh	r3, [r7, #6]
 801766e:	3301      	adds	r3, #1
 8017670:	80fb      	strh	r3, [r7, #6]
 8017672:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8017676:	88bb      	ldrh	r3, [r7, #4]
 8017678:	3b01      	subs	r3, #1
 801767a:	b29b      	uxth	r3, r3
 801767c:	b21b      	sxth	r3, r3
 801767e:	4013      	ands	r3, r2
 8017680:	b21b      	sxth	r3, r3
 8017682:	b29b      	uxth	r3, r3
}
 8017684:	4618      	mov	r0, r3
 8017686:	370c      	adds	r7, #12
 8017688:	46bd      	mov	sp, r7
 801768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801768e:	4770      	bx	lr

08017690 <ring16_push>:

int32_t ring16_push(struct ring16 *rb, int16_t v) {
 8017690:	b580      	push	{r7, lr}
 8017692:	b082      	sub	sp, #8
 8017694:	af00      	add	r7, sp, #0
 8017696:	6078      	str	r0, [r7, #4]
 8017698:	460b      	mov	r3, r1
 801769a:	807b      	strh	r3, [r7, #2]
  if (rb->buf == NULL)
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	685b      	ldr	r3, [r3, #4]
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d102      	bne.n	80176aa <ring16_push+0x1a>
    return -1;
 80176a4:	f04f 33ff 	mov.w	r3, #4294967295
 80176a8:	e037      	b.n	801771a <ring16_push+0x8a>
  if (rb->is_full)
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	7b1b      	ldrb	r3, [r3, #12]
 80176ae:	f003 0302 	and.w	r3, r3, #2
 80176b2:	b2db      	uxtb	r3, r3
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d002      	beq.n	80176be <ring16_push+0x2e>
    return -2;
 80176b8:	f06f 0301 	mvn.w	r3, #1
 80176bc:	e02d      	b.n	801771a <ring16_push+0x8a>

  rb->buf[rb->head] = v;
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	685a      	ldr	r2, [r3, #4]
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	881b      	ldrh	r3, [r3, #0]
 80176c6:	005b      	lsls	r3, r3, #1
 80176c8:	4413      	add	r3, r2
 80176ca:	887a      	ldrh	r2, [r7, #2]
 80176cc:	801a      	strh	r2, [r3, #0]
  rb->head = r16_inc_wrap(rb->head, rb->size);
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	881a      	ldrh	r2, [r3, #0]
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	891b      	ldrh	r3, [r3, #8]
 80176d6:	4619      	mov	r1, r3
 80176d8:	4610      	mov	r0, r2
 80176da:	f7ff ffbf 	bl	801765c <r16_inc_wrap>
 80176de:	4603      	mov	r3, r0
 80176e0:	461a      	mov	r2, r3
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	801a      	strh	r2, [r3, #0]
  rb->is_empty = false;
 80176e6:	687a      	ldr	r2, [r7, #4]
 80176e8:	7b13      	ldrb	r3, [r2, #12]
 80176ea:	f36f 0300 	bfc	r3, #0, #1
 80176ee:	7313      	strb	r3, [r2, #12]
  rb->is_full = rb->head == rb->tail;
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	881a      	ldrh	r2, [r3, #0]
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	885b      	ldrh	r3, [r3, #2]
 80176f8:	429a      	cmp	r2, r3
 80176fa:	bf0c      	ite	eq
 80176fc:	2301      	moveq	r3, #1
 80176fe:	2300      	movne	r3, #0
 8017700:	b2d9      	uxtb	r1, r3
 8017702:	687a      	ldr	r2, [r7, #4]
 8017704:	7b13      	ldrb	r3, [r2, #12]
 8017706:	f361 0341 	bfi	r3, r1, #1, #1
 801770a:	7313      	strb	r3, [r2, #12]
  rb->entries++;
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	895b      	ldrh	r3, [r3, #10]
 8017710:	3301      	adds	r3, #1
 8017712:	b29a      	uxth	r2, r3
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	815a      	strh	r2, [r3, #10]

  return 0;
 8017718:	2300      	movs	r3, #0
}
 801771a:	4618      	mov	r0, r3
 801771c:	3708      	adds	r7, #8
 801771e:	46bd      	mov	sp, r7
 8017720:	bd80      	pop	{r7, pc}

08017722 <ring16_pop>:

int32_t ring16_pop(struct ring16 *rb, volatile int16_t *v) {
 8017722:	b580      	push	{r7, lr}
 8017724:	b082      	sub	sp, #8
 8017726:	af00      	add	r7, sp, #0
 8017728:	6078      	str	r0, [r7, #4]
 801772a:	6039      	str	r1, [r7, #0]
  if (rb->buf == NULL)
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	685b      	ldr	r3, [r3, #4]
 8017730:	2b00      	cmp	r3, #0
 8017732:	d102      	bne.n	801773a <ring16_pop+0x18>
    return -1;
 8017734:	f04f 33ff 	mov.w	r3, #4294967295
 8017738:	e039      	b.n	80177ae <ring16_pop+0x8c>
  if (rb->is_empty)
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	7b1b      	ldrb	r3, [r3, #12]
 801773e:	f003 0301 	and.w	r3, r3, #1
 8017742:	b2db      	uxtb	r3, r3
 8017744:	2b00      	cmp	r3, #0
 8017746:	d002      	beq.n	801774e <ring16_pop+0x2c>
    return -2;
 8017748:	f06f 0301 	mvn.w	r3, #1
 801774c:	e02f      	b.n	80177ae <ring16_pop+0x8c>

  *v = rb->buf[rb->tail];
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	685a      	ldr	r2, [r3, #4]
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	885b      	ldrh	r3, [r3, #2]
 8017756:	005b      	lsls	r3, r3, #1
 8017758:	4413      	add	r3, r2
 801775a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801775e:	683b      	ldr	r3, [r7, #0]
 8017760:	801a      	strh	r2, [r3, #0]
  rb->tail = r16_inc_wrap(rb->tail, rb->size);
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	885a      	ldrh	r2, [r3, #2]
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	891b      	ldrh	r3, [r3, #8]
 801776a:	4619      	mov	r1, r3
 801776c:	4610      	mov	r0, r2
 801776e:	f7ff ff75 	bl	801765c <r16_inc_wrap>
 8017772:	4603      	mov	r3, r0
 8017774:	461a      	mov	r2, r3
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	805a      	strh	r2, [r3, #2]
  rb->is_full = false;
 801777a:	687a      	ldr	r2, [r7, #4]
 801777c:	7b13      	ldrb	r3, [r2, #12]
 801777e:	f36f 0341 	bfc	r3, #1, #1
 8017782:	7313      	strb	r3, [r2, #12]
  rb->is_empty = rb->tail == rb->head;
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	885a      	ldrh	r2, [r3, #2]
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	881b      	ldrh	r3, [r3, #0]
 801778c:	429a      	cmp	r2, r3
 801778e:	bf0c      	ite	eq
 8017790:	2301      	moveq	r3, #1
 8017792:	2300      	movne	r3, #0
 8017794:	b2d9      	uxtb	r1, r3
 8017796:	687a      	ldr	r2, [r7, #4]
 8017798:	7b13      	ldrb	r3, [r2, #12]
 801779a:	f361 0300 	bfi	r3, r1, #0, #1
 801779e:	7313      	strb	r3, [r2, #12]
  rb->entries--;
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	895b      	ldrh	r3, [r3, #10]
 80177a4:	3b01      	subs	r3, #1
 80177a6:	b29a      	uxth	r2, r3
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	815a      	strh	r2, [r3, #10]

  return 0;
 80177ac:	2300      	movs	r3, #0
}
 80177ae:	4618      	mov	r0, r3
 80177b0:	3708      	adds	r7, #8
 80177b2:	46bd      	mov	sp, r7
 80177b4:	bd80      	pop	{r7, pc}

080177b6 <ring16_memrd>:

int32_t ring16_memrd(struct ring16 *rb, volatile int16_t *o, uint16_t s) {
 80177b6:	b580      	push	{r7, lr}
 80177b8:	b086      	sub	sp, #24
 80177ba:	af00      	add	r7, sp, #0
 80177bc:	60f8      	str	r0, [r7, #12]
 80177be:	60b9      	str	r1, [r7, #8]
 80177c0:	4613      	mov	r3, r2
 80177c2:	80fb      	strh	r3, [r7, #6]
  for (uint16_t n = 0; n < s; n++) {
 80177c4:	2300      	movs	r3, #0
 80177c6:	82fb      	strh	r3, [r7, #22]
 80177c8:	e010      	b.n	80177ec <ring16_memrd+0x36>
    int e = ring16_pop(rb, &o[n]);
 80177ca:	8afb      	ldrh	r3, [r7, #22]
 80177cc:	005b      	lsls	r3, r3, #1
 80177ce:	68ba      	ldr	r2, [r7, #8]
 80177d0:	4413      	add	r3, r2
 80177d2:	4619      	mov	r1, r3
 80177d4:	68f8      	ldr	r0, [r7, #12]
 80177d6:	f7ff ffa4 	bl	8017722 <ring16_pop>
 80177da:	6138      	str	r0, [r7, #16]
    if (e) {
 80177dc:	693b      	ldr	r3, [r7, #16]
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d001      	beq.n	80177e6 <ring16_memrd+0x30>
      return e;
 80177e2:	693b      	ldr	r3, [r7, #16]
 80177e4:	e007      	b.n	80177f6 <ring16_memrd+0x40>
  for (uint16_t n = 0; n < s; n++) {
 80177e6:	8afb      	ldrh	r3, [r7, #22]
 80177e8:	3301      	adds	r3, #1
 80177ea:	82fb      	strh	r3, [r7, #22]
 80177ec:	8afa      	ldrh	r2, [r7, #22]
 80177ee:	88fb      	ldrh	r3, [r7, #6]
 80177f0:	429a      	cmp	r2, r3
 80177f2:	d3ea      	bcc.n	80177ca <ring16_memrd+0x14>
    }
  }
  return 0;
 80177f4:	2300      	movs	r3, #0
}
 80177f6:	4618      	mov	r0, r3
 80177f8:	3718      	adds	r7, #24
 80177fa:	46bd      	mov	sp, r7
 80177fc:	bd80      	pop	{r7, pc}

080177fe <ring16_flush>:

int32_t ring16_flush(struct ring16 *rb) {
 80177fe:	b480      	push	{r7}
 8017800:	b083      	sub	sp, #12
 8017802:	af00      	add	r7, sp, #0
 8017804:	6078      	str	r0, [r7, #4]
  rb->tail = 0;
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	2200      	movs	r2, #0
 801780a:	805a      	strh	r2, [r3, #2]
  rb->head = 0;
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	2200      	movs	r2, #0
 8017810:	801a      	strh	r2, [r3, #0]
  rb->is_empty = true;
 8017812:	687a      	ldr	r2, [r7, #4]
 8017814:	7b13      	ldrb	r3, [r2, #12]
 8017816:	f043 0301 	orr.w	r3, r3, #1
 801781a:	7313      	strb	r3, [r2, #12]
  rb->is_full = false;
 801781c:	687a      	ldr	r2, [r7, #4]
 801781e:	7b13      	ldrb	r3, [r2, #12]
 8017820:	f36f 0341 	bfc	r3, #1, #1
 8017824:	7313      	strb	r3, [r2, #12]
  rb->entries = 0;
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	2200      	movs	r2, #0
 801782a:	815a      	strh	r2, [r3, #10]
  return 0;
 801782c:	2300      	movs	r3, #0
}
 801782e:	4618      	mov	r0, r3
 8017830:	370c      	adds	r7, #12
 8017832:	46bd      	mov	sp, r7
 8017834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017838:	4770      	bx	lr
	...

0801783c <decoder_get_task_state>:
// event callback pointer
void (*event_cb)(void *context);

// task state
enum decoder_task_state *task_state_ptr;
static enum decoder_task_state decoder_get_task_state(void) {
 801783c:	b480      	push	{r7}
 801783e:	af00      	add	r7, sp, #0
  return *task_state_ptr;
 8017840:	4b03      	ldr	r3, [pc, #12]	; (8017850 <decoder_get_task_state+0x14>)
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	781b      	ldrb	r3, [r3, #0]
}
 8017846:	4618      	mov	r0, r3
 8017848:	46bd      	mov	sp, r7
 801784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801784e:	4770      	bx	lr
 8017850:	200103c0 	.word	0x200103c0

08017854 <streaming>:

// streaming task
static int32_t streaming(struct dac *o, struct decoder *d) {
 8017854:	b580      	push	{r7, lr}
 8017856:	b084      	sub	sp, #16
 8017858:	af00      	add	r7, sp, #0
 801785a:	6078      	str	r0, [r7, #4]
 801785c:	6039      	str	r1, [r7, #0]

  enum decoder_event evt;

  // start stream
  if (!o->is_streaming) {
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	781b      	ldrb	r3, [r3, #0]
 8017862:	f083 0301 	eor.w	r3, r3, #1
 8017866:	b2db      	uxtb	r3, r3
 8017868:	2b00      	cmp	r3, #0
 801786a:	d002      	beq.n	8017872 <streaming+0x1e>
    dac_handler_start_stream(o);
 801786c:	6878      	ldr	r0, [r7, #4]
 801786e:	f7ff fdef 	bl	8017450 <dac_handler_start_stream>
  }

  // end stream
  if (dac_handler_ring_is_empty() && d->eoc &&
 8017872:	f7ff fee5 	bl	8017640 <dac_handler_ring_is_empty>
 8017876:	4603      	mov	r3, r0
 8017878:	2b00      	cmp	r3, #0
 801787a:	d01a      	beq.n	80178b2 <streaming+0x5e>
 801787c:	683b      	ldr	r3, [r7, #0]
 801787e:	7e1b      	ldrb	r3, [r3, #24]
 8017880:	2b00      	cmp	r3, #0
 8017882:	d016      	beq.n	80178b2 <streaming+0x5e>
      (o->tx_complete || o->tx_halfcomplete)) {
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	7c5b      	ldrb	r3, [r3, #17]
 8017888:	b2db      	uxtb	r3, r3
  if (dac_handler_ring_is_empty() && d->eoc &&
 801788a:	2b00      	cmp	r3, #0
 801788c:	d104      	bne.n	8017898 <streaming+0x44>
      (o->tx_complete || o->tx_halfcomplete)) {
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	7c1b      	ldrb	r3, [r3, #16]
 8017892:	b2db      	uxtb	r3, r3
 8017894:	2b00      	cmp	r3, #0
 8017896:	d00c      	beq.n	80178b2 <streaming+0x5e>
    // stop dac
    dac_handler_stop_stream(o);
 8017898:	6878      	ldr	r0, [r7, #4]
 801789a:	f7ff fde7 	bl	801746c <dac_handler_stop_stream>
    // callback end of stream
    evt = DEC_EVT_STREAMING_END;
 801789e:	2302      	movs	r3, #2
 80178a0:	73fb      	strb	r3, [r7, #15]
    // evts are handler by caller and state machine
    // will use mbox and thread to go on
    event_cb((void *)&evt);
 80178a2:	4b0e      	ldr	r3, [pc, #56]	; (80178dc <streaming+0x88>)
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	f107 020f 	add.w	r2, r7, #15
 80178aa:	4610      	mov	r0, r2
 80178ac:	4798      	blx	r3
    return 0;
 80178ae:	2300      	movs	r3, #0
 80178b0:	e010      	b.n	80178d4 <streaming+0x80>
  }

  // dac dma complete
  if (o->tx_complete || o->tx_halfcomplete) {
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	7c5b      	ldrb	r3, [r3, #17]
 80178b6:	b2db      	uxtb	r3, r3
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d104      	bne.n	80178c6 <streaming+0x72>
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	7c1b      	ldrb	r3, [r3, #16]
 80178c0:	b2db      	uxtb	r3, r3
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d005      	beq.n	80178d2 <streaming+0x7e>
    // dac_handler_dma_buffer_feed(o); // @NOTE: doesn't work in main thread
	  o->tx_complete = false;
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	2200      	movs	r2, #0
 80178ca:	745a      	strb	r2, [r3, #17]
	  o->tx_halfcomplete = false;
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	2200      	movs	r2, #0
 80178d0:	741a      	strb	r2, [r3, #16]
  }

  return 0;
 80178d2:	2300      	movs	r3, #0
}
 80178d4:	4618      	mov	r0, r3
 80178d6:	3710      	adds	r7, #16
 80178d8:	46bd      	mov	sp, r7
 80178da:	bd80      	pop	{r7, pc}
 80178dc:	200103bc 	.word	0x200103bc

080178e0 <buffering>:

// buffering task
static int32_t buffering(struct decoder *d) {
 80178e0:	b590      	push	{r4, r7, lr}
 80178e2:	b08b      	sub	sp, #44	; 0x2c
 80178e4:	af02      	add	r7, sp, #8
 80178e6:	6078      	str	r0, [r7, #4]
  enum decoder_event evt;
  // clip reach its end, we are now waiting for playback to finish
  if (d->eoc)
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	7e1b      	ldrb	r3, [r3, #24]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d001      	beq.n	80178f4 <buffering+0x14>
    return 0;
 80178f0:	2300      	movs	r3, #0
 80178f2:	e090      	b.n	8017a16 <buffering+0x136>

  // read a chunk of the clip
  uint32_t to_read = RAW_BUF_SIZE - d->cursor;
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	695b      	ldr	r3, [r3, #20]
 80178f8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80178fc:	61bb      	str	r3, [r7, #24]
  if (to_read > 0) {
 80178fe:	69bb      	ldr	r3, [r7, #24]
 8017900:	2b00      	cmp	r3, #0
 8017902:	d025      	beq.n	8017950 <buffering+0x70>
    uint32_t nbytes = clip_handler_chunk_read((uint8_t *)(d->raw + d->cursor), to_read);
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	68da      	ldr	r2, [r3, #12]
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	695b      	ldr	r3, [r3, #20]
 801790c:	4413      	add	r3, r2
 801790e:	69b9      	ldr	r1, [r7, #24]
 8017910:	4618      	mov	r0, r3
 8017912:	f7ff fce3 	bl	80172dc <clip_handler_chunk_read>
 8017916:	4603      	mov	r3, r0
 8017918:	617b      	str	r3, [r7, #20]
    if (!nbytes) {
 801791a:	697b      	ldr	r3, [r7, #20]
 801791c:	2b00      	cmp	r3, #0
 801791e:	d111      	bne.n	8017944 <buffering+0x64>
      // end of clip
      free(d->flac_mem);
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	4618      	mov	r0, r3
 8017926:	f7ff fa1f 	bl	8016d68 <vPortFree>
      d->eoc = true;
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	2201      	movs	r2, #1
 801792e:	761a      	strb	r2, [r3, #24]
      evt = DEC_EVT_BUFFERING_END;
 8017930:	2301      	movs	r3, #1
 8017932:	74fb      	strb	r3, [r7, #19]
      event_cb((void *)&evt);
 8017934:	4b3a      	ldr	r3, [pc, #232]	; (8017a20 <buffering+0x140>)
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	f107 0213 	add.w	r2, r7, #19
 801793c:	4610      	mov	r0, r2
 801793e:	4798      	blx	r3
      return 0;
 8017940:	2300      	movs	r3, #0
 8017942:	e068      	b.n	8017a16 <buffering+0x136>
    }
    d->cursor += nbytes;
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	695a      	ldr	r2, [r3, #20]
 8017948:	697b      	ldr	r3, [r7, #20]
 801794a:	441a      	add	r2, r3
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	615a      	str	r2, [r3, #20]
  }

  // flac decoder in action
  uint32_t raw_size = d->cursor;
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	695b      	ldr	r3, [r3, #20]
 8017954:	60fb      	str	r3, [r7, #12]
  uint32_t decoded_size = DECODED_BUF_SIZE;
 8017956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801795a:	60bb      	str	r3, [r7, #8]
  switch (
      fx_flac_process(d->flac, d->raw, &raw_size, d->decoded, &decoded_size)) {
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	6858      	ldr	r0, [r3, #4]
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	68d9      	ldr	r1, [r3, #12]
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	691c      	ldr	r4, [r3, #16]
 8017968:	f107 020c 	add.w	r2, r7, #12
 801796c:	f107 0308 	add.w	r3, r7, #8
 8017970:	9300      	str	r3, [sp, #0]
 8017972:	4623      	mov	r3, r4
 8017974:	f002 f9a2 	bl	8019cbc <fx_flac_process>
 8017978:	4603      	mov	r3, r0
  switch (
 801797a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801797e:	d004      	beq.n	801798a <buffering+0xaa>
 8017980:	2b02      	cmp	r3, #2

  case FLAC_ERR:
    return -1;

  default:
    break;
 8017982:	bf00      	nop
  }

  // push each sample to the ring
  for (uint32_t sample = 0; sample < decoded_size; sample++) {
 8017984:	2300      	movs	r3, #0
 8017986:	61fb      	str	r3, [r7, #28]
 8017988:	e01b      	b.n	80179c2 <buffering+0xe2>
    return -1;
 801798a:	f04f 33ff 	mov.w	r3, #4294967295
 801798e:	e042      	b.n	8017a16 <buffering+0x136>
    if (dac_handler_ring_buffer_push_sample(
            (int16_t)(d->decoded[sample] >> 16))) {
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	691a      	ldr	r2, [r3, #16]
 8017994:	69fb      	ldr	r3, [r7, #28]
 8017996:	009b      	lsls	r3, r3, #2
 8017998:	4413      	add	r3, r2
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	141b      	asrs	r3, r3, #16
    if (dac_handler_ring_buffer_push_sample(
 801799e:	b21b      	sxth	r3, r3
 80179a0:	4618      	mov	r0, r3
 80179a2:	f7ff fe29 	bl	80175f8 <dac_handler_ring_buffer_push_sample>
 80179a6:	4603      	mov	r3, r0
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d007      	beq.n	80179bc <buffering+0xdc>
      evt = DEC_EVT_ERROR;
 80179ac:	2303      	movs	r3, #3
 80179ae:	74fb      	strb	r3, [r7, #19]
      event_cb((void *)&evt);
 80179b0:	4b1b      	ldr	r3, [pc, #108]	; (8017a20 <buffering+0x140>)
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	f107 0213 	add.w	r2, r7, #19
 80179b8:	4610      	mov	r0, r2
 80179ba:	4798      	blx	r3
  for (uint32_t sample = 0; sample < decoded_size; sample++) {
 80179bc:	69fb      	ldr	r3, [r7, #28]
 80179be:	3301      	adds	r3, #1
 80179c0:	61fb      	str	r3, [r7, #28]
 80179c2:	68bb      	ldr	r3, [r7, #8]
 80179c4:	69fa      	ldr	r2, [r7, #28]
 80179c6:	429a      	cmp	r2, r3
 80179c8:	d3e2      	bcc.n	8017990 <buffering+0xb0>
    }
  }

  // relocate raw buffer
  memcpy(d->raw, &d->raw[raw_size], (d->cursor - raw_size));
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	68d8      	ldr	r0, [r3, #12]
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	68da      	ldr	r2, [r3, #12]
 80179d2:	68fb      	ldr	r3, [r7, #12]
 80179d4:	18d1      	adds	r1, r2, r3
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	695a      	ldr	r2, [r3, #20]
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	1ad3      	subs	r3, r2, r3
 80179de:	461a      	mov	r2, r3
 80179e0:	f002 fb9e 	bl	801a120 <memcpy>
  // poor
//  for (uint32_t rlct = 0; rlct < (d->cursor - raw_size); rlct++) {
//    d->raw[rlct] = d->raw[rlct + raw_size];
//  }
  // update cursor for next clip chunk read
  d->cursor -= raw_size;
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	695a      	ldr	r2, [r3, #20]
 80179e8:	68fb      	ldr	r3, [r7, #12]
 80179ea:	1ad2      	subs	r2, r2, r3
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	615a      	str	r2, [r3, #20]

  if (dac_handler_ring_is_above_threshold() &&
 80179f0:	f7ff fe14 	bl	801761c <dac_handler_ring_is_above_threshold>
 80179f4:	4603      	mov	r3, r0
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d00c      	beq.n	8017a14 <buffering+0x134>
		  decoder_get_task_state() == DEC_TS_BUFFERING) {
 80179fa:	f7ff ff1f 	bl	801783c <decoder_get_task_state>
 80179fe:	4603      	mov	r3, r0
  if (dac_handler_ring_is_above_threshold() &&
 8017a00:	2b01      	cmp	r3, #1
 8017a02:	d107      	bne.n	8017a14 <buffering+0x134>

      // callback buffering reached threshold
      evt = DEC_EVT_BUFFERING_REACH_THRSHLD;
 8017a04:	2300      	movs	r3, #0
 8017a06:	74fb      	strb	r3, [r7, #19]
      // evts are handler by caller and state machine
      // will use mbox and thread to go on
      event_cb((void *)&evt);
 8017a08:	4b05      	ldr	r3, [pc, #20]	; (8017a20 <buffering+0x140>)
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	f107 0213 	add.w	r2, r7, #19
 8017a10:	4610      	mov	r0, r2
 8017a12:	4798      	blx	r3
  }

  return 0;
 8017a14:	2300      	movs	r3, #0
}
 8017a16:	4618      	mov	r0, r3
 8017a18:	3724      	adds	r7, #36	; 0x24
 8017a1a:	46bd      	mov	sp, r7
 8017a1c:	bd90      	pop	{r4, r7, pc}
 8017a1e:	bf00      	nop
 8017a20:	200103bc 	.word	0x200103bc

08017a24 <idle>:

// idle task
static int32_t idle(void) { return 0; }
 8017a24:	b480      	push	{r7}
 8017a26:	af00      	add	r7, sp, #0
 8017a28:	2300      	movs	r3, #0
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	46bd      	mov	sp, r7
 8017a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a32:	4770      	bx	lr

08017a34 <decoder_thread>:

// one thread to rule them all
int32_t decoder_thread(enum decoder_task_state task_state) {
 8017a34:	b580      	push	{r7, lr}
 8017a36:	b082      	sub	sp, #8
 8017a38:	af00      	add	r7, sp, #0
 8017a3a:	4603      	mov	r3, r0
 8017a3c:	71fb      	strb	r3, [r7, #7]

  task_state_ptr = &task_state;
 8017a3e:	4a0e      	ldr	r2, [pc, #56]	; (8017a78 <decoder_thread+0x44>)
 8017a40:	1dfb      	adds	r3, r7, #7
 8017a42:	6013      	str	r3, [r2, #0]
  switch (task_state) {
 8017a44:	79fb      	ldrb	r3, [r7, #7]
 8017a46:	2b02      	cmp	r3, #2
 8017a48:	d006      	beq.n	8017a58 <decoder_thread+0x24>
 8017a4a:	2b02      	cmp	r3, #2
 8017a4c:	dc0e      	bgt.n	8017a6c <decoder_thread+0x38>
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d00a      	beq.n	8017a68 <decoder_thread+0x34>
 8017a52:	2b01      	cmp	r3, #1
 8017a54:	d004      	beq.n	8017a60 <decoder_thread+0x2c>

  // doin nothin
  case DEC_TS_IDLE:
    idle();
  default:
    break;
 8017a56:	e009      	b.n	8017a6c <decoder_thread+0x38>
    streaming(&dac, &decoder);
 8017a58:	4908      	ldr	r1, [pc, #32]	; (8017a7c <decoder_thread+0x48>)
 8017a5a:	4809      	ldr	r0, [pc, #36]	; (8017a80 <decoder_thread+0x4c>)
 8017a5c:	f7ff fefa 	bl	8017854 <streaming>
    buffering(&decoder);
 8017a60:	4806      	ldr	r0, [pc, #24]	; (8017a7c <decoder_thread+0x48>)
 8017a62:	f7ff ff3d 	bl	80178e0 <buffering>
    break;
 8017a66:	e002      	b.n	8017a6e <decoder_thread+0x3a>
    idle();
 8017a68:	f7ff ffdc 	bl	8017a24 <idle>
    break;
 8017a6c:	bf00      	nop
  }

  return 0;
 8017a6e:	2300      	movs	r3, #0
}
 8017a70:	4618      	mov	r0, r3
 8017a72:	3708      	adds	r7, #8
 8017a74:	46bd      	mov	sp, r7
 8017a76:	bd80      	pop	{r7, pc}
 8017a78:	200103c0 	.word	0x200103c0
 8017a7c:	20000070 	.word	0x20000070
 8017a80:	2000008c 	.word	0x2000008c

08017a84 <decoder_play_clip>:

// API
int32_t decoder_play_clip(uint8_t clip_idx) {
 8017a84:	b580      	push	{r7, lr}
 8017a86:	b084      	sub	sp, #16
 8017a88:	af00      	add	r7, sp, #0
 8017a8a:	4603      	mov	r3, r0
 8017a8c:	71fb      	strb	r3, [r7, #7]
  // this is mandatory
  if (event_cb == NULL)
 8017a8e:	4b33      	ldr	r3, [pc, #204]	; (8017b5c <decoder_play_clip+0xd8>)
 8017a90:	681b      	ldr	r3, [r3, #0]
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d102      	bne.n	8017a9c <decoder_play_clip+0x18>
    return -1;
 8017a96:	f04f 33ff 	mov.w	r3, #4294967295
 8017a9a:	e05b      	b.n	8017b54 <decoder_play_clip+0xd0>

  // halt previous stream
  if (decoder_get_task_state() == DEC_TS_STREAMING) {
 8017a9c:	f7ff fece 	bl	801783c <decoder_get_task_state>
 8017aa0:	4603      	mov	r3, r0
 8017aa2:	2b02      	cmp	r3, #2
 8017aa4:	d107      	bne.n	8017ab6 <decoder_play_clip+0x32>
    // stop previous stream
    dac_handler_stop_stream(&dac);
 8017aa6:	482e      	ldr	r0, [pc, #184]	; (8017b60 <decoder_play_clip+0xdc>)
 8017aa8:	f7ff fce0 	bl	801746c <dac_handler_stop_stream>
    free(decoder.flac);
 8017aac:	4b2d      	ldr	r3, [pc, #180]	; (8017b64 <decoder_play_clip+0xe0>)
 8017aae:	685b      	ldr	r3, [r3, #4]
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	f7ff f959 	bl	8016d68 <vPortFree>
  }

  // handle clip
  if (clip_handler_init_clip(clip_idx))
 8017ab6:	79fb      	ldrb	r3, [r7, #7]
 8017ab8:	4618      	mov	r0, r3
 8017aba:	f7ff fc47 	bl	801734c <clip_handler_init_clip>
 8017abe:	4603      	mov	r3, r0
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d002      	beq.n	8017aca <decoder_play_clip+0x46>
    return -2;
 8017ac4:	f06f 0301 	mvn.w	r3, #1
 8017ac8:	e044      	b.n	8017b54 <decoder_play_clip+0xd0>

  // set decoder handle stuff
  decoder.raw = mem_buffer;
 8017aca:	4b26      	ldr	r3, [pc, #152]	; (8017b64 <decoder_play_clip+0xe0>)
 8017acc:	4a26      	ldr	r2, [pc, #152]	; (8017b68 <decoder_play_clip+0xe4>)
 8017ace:	60da      	str	r2, [r3, #12]
  memset(decoder.raw, 0, RAW_BUF_SIZE);
 8017ad0:	4b24      	ldr	r3, [pc, #144]	; (8017b64 <decoder_play_clip+0xe0>)
 8017ad2:	68db      	ldr	r3, [r3, #12]
 8017ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017ad8:	2100      	movs	r1, #0
 8017ada:	4618      	mov	r0, r3
 8017adc:	f002 fb2e 	bl	801a13c <memset>
  memset(decoder.decoded, 0, DECODED_BUF_SIZE);
 8017ae0:	4b20      	ldr	r3, [pc, #128]	; (8017b64 <decoder_play_clip+0xe0>)
 8017ae2:	691b      	ldr	r3, [r3, #16]
 8017ae4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017ae8:	2100      	movs	r1, #0
 8017aea:	4618      	mov	r0, r3
 8017aec:	f002 fb26 	bl	801a13c <memset>
  decoder.cursor = 0;
 8017af0:	4b1c      	ldr	r3, [pc, #112]	; (8017b64 <decoder_play_clip+0xe0>)
 8017af2:	2200      	movs	r2, #0
 8017af4:	615a      	str	r2, [r3, #20]
  decoder.eoc = false;
 8017af6:	4b1b      	ldr	r3, [pc, #108]	; (8017b64 <decoder_play_clip+0xe0>)
 8017af8:	2200      	movs	r2, #0
 8017afa:	761a      	strb	r2, [r3, #24]

  // alloc flac instance
  uint32_t flacsize = fx_flac_size(FLAC_SUBSET_MAX_BLOCK_SIZE_48KHZ, 1U);
 8017afc:	2101      	movs	r1, #1
 8017afe:	f44f 5090 	mov.w	r0, #4608	; 0x1200
 8017b02:	f001 ff8b 	bl	8019a1c <fx_flac_size>
 8017b06:	60f8      	str	r0, [r7, #12]
  if (flacsize == 0)
 8017b08:	68fb      	ldr	r3, [r7, #12]
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d102      	bne.n	8017b14 <decoder_play_clip+0x90>
	  return -3;
 8017b0e:	f06f 0302 	mvn.w	r3, #2
 8017b12:	e01f      	b.n	8017b54 <decoder_play_clip+0xd0>

  decoder.flac_mem = malloc(flacsize);
 8017b14:	68f8      	ldr	r0, [r7, #12]
 8017b16:	f7ff f857 	bl	8016bc8 <pvPortMalloc>
 8017b1a:	4603      	mov	r3, r0
 8017b1c:	4a11      	ldr	r2, [pc, #68]	; (8017b64 <decoder_play_clip+0xe0>)
 8017b1e:	6013      	str	r3, [r2, #0]
  decoder.flac = fx_flac_init(decoder.flac_mem, FLAC_SUBSET_MAX_BLOCK_SIZE_48KHZ, 1U);
 8017b20:	4b10      	ldr	r3, [pc, #64]	; (8017b64 <decoder_play_clip+0xe0>)
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	2201      	movs	r2, #1
 8017b26:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8017b2a:	4618      	mov	r0, r3
 8017b2c:	f001 fff6 	bl	8019b1c <fx_flac_init>
 8017b30:	4603      	mov	r3, r0
 8017b32:	4a0c      	ldr	r2, [pc, #48]	; (8017b64 <decoder_play_clip+0xe0>)
 8017b34:	6053      	str	r3, [r2, #4]

  // handle dac
  dac.sample_rate = clip_handler_get_sample_rate();
 8017b36:	f7ff fc49 	bl	80173cc <clip_handler_get_sample_rate>
 8017b3a:	4603      	mov	r3, r0
 8017b3c:	4a08      	ldr	r2, [pc, #32]	; (8017b60 <decoder_play_clip+0xdc>)
 8017b3e:	6053      	str	r3, [r2, #4]
  dac.is_stereo = clip_handler_is_stereo();
 8017b40:	f7ff fc58 	bl	80173f4 <clip_handler_is_stereo>
 8017b44:	4603      	mov	r3, r0
 8017b46:	461a      	mov	r2, r3
 8017b48:	4b05      	ldr	r3, [pc, #20]	; (8017b60 <decoder_play_clip+0xdc>)
 8017b4a:	705a      	strb	r2, [r3, #1]
  dac_handler_init(&dac);
 8017b4c:	4804      	ldr	r0, [pc, #16]	; (8017b60 <decoder_play_clip+0xdc>)
 8017b4e:	f7ff fc63 	bl	8017418 <dac_handler_init>

  return 0;
 8017b52:	2300      	movs	r3, #0
}
 8017b54:	4618      	mov	r0, r3
 8017b56:	3710      	adds	r7, #16
 8017b58:	46bd      	mov	sp, r7
 8017b5a:	bd80      	pop	{r7, pc}
 8017b5c:	200103bc 	.word	0x200103bc
 8017b60:	2000008c 	.word	0x2000008c
 8017b64:	20000070 	.word	0x20000070
 8017b68:	2000ffb0 	.word	0x2000ffb0

08017b6c <decoder_events_assign_callback>:

int32_t decoder_events_assign_callback(void (*cb)(void *context)) {
 8017b6c:	b480      	push	{r7}
 8017b6e:	b083      	sub	sp, #12
 8017b70:	af00      	add	r7, sp, #0
 8017b72:	6078      	str	r0, [r7, #4]
  if (cb != NULL)
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d002      	beq.n	8017b80 <decoder_events_assign_callback+0x14>
    event_cb = cb;
 8017b7a:	4a05      	ldr	r2, [pc, #20]	; (8017b90 <decoder_events_assign_callback+0x24>)
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	6013      	str	r3, [r2, #0]
  return 0;
 8017b80:	2300      	movs	r3, #0
}
 8017b82:	4618      	mov	r0, r3
 8017b84:	370c      	adds	r7, #12
 8017b86:	46bd      	mov	sp, r7
 8017b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b8c:	4770      	bx	lr
 8017b8e:	bf00      	nop
 8017b90:	200103bc 	.word	0x200103bc

08017b94 <i2sInit>:
/*----------------------------------------------------------------------*/
/* PUBLIC --------------------------------------------------------------*/
/*----------------------------------------------------------------------*/
//Initialisation
void i2sInit(I2sObject *i2s, I2S_HandleTypeDef *handle, uint8_t periph_index)
{
 8017b94:	b480      	push	{r7}
 8017b96:	b085      	sub	sp, #20
 8017b98:	af00      	add	r7, sp, #0
 8017b9a:	60f8      	str	r0, [r7, #12]
 8017b9c:	60b9      	str	r1, [r7, #8]
 8017b9e:	4613      	mov	r3, r2
 8017ba0:	71fb      	strb	r3, [r7, #7]
	i2s->handle = handle;
 8017ba2:	68fb      	ldr	r3, [r7, #12]
 8017ba4:	68ba      	ldr	r2, [r7, #8]
 8017ba6:	601a      	str	r2, [r3, #0]
	i2s->periph_index = periph_index;
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	79fa      	ldrb	r2, [r7, #7]
 8017bac:	711a      	strb	r2, [r3, #4]
  
  hal_i2s_tx_cmplt_callback = NULL;
 8017bae:	4b0e      	ldr	r3, [pc, #56]	; (8017be8 <i2sInit+0x54>)
 8017bb0:	2200      	movs	r2, #0
 8017bb2:	601a      	str	r2, [r3, #0]
  hal_i2s_tx_halfcmplt_callback = NULL;
 8017bb4:	4b0d      	ldr	r3, [pc, #52]	; (8017bec <i2sInit+0x58>)
 8017bb6:	2200      	movs	r2, #0
 8017bb8:	601a      	str	r2, [r3, #0]

	if (i2s->periph_index >= I2S_MAX_PERIPH)
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	791b      	ldrb	r3, [r3, #4]
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d10b      	bne.n	8017bda <i2sInit+0x46>
		return;

	i2s_instance[periph_index] = i2s;
 8017bc2:	79fb      	ldrb	r3, [r7, #7]
 8017bc4:	490a      	ldr	r1, [pc, #40]	; (8017bf0 <i2sInit+0x5c>)
 8017bc6:	68fa      	ldr	r2, [r7, #12]
 8017bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	i2s->audclp_playing = false;
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	2200      	movs	r2, #0
 8017bd0:	715a      	strb	r2, [r3, #5]
	i2s->a2dp_playing = false;
 8017bd2:	68fb      	ldr	r3, [r7, #12]
 8017bd4:	2200      	movs	r2, #0
 8017bd6:	741a      	strb	r2, [r3, #16]
 8017bd8:	e000      	b.n	8017bdc <i2sInit+0x48>
		return;
 8017bda:	bf00      	nop
}
 8017bdc:	3714      	adds	r7, #20
 8017bde:	46bd      	mov	sp, r7
 8017be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017be4:	4770      	bx	lr
 8017be6:	bf00      	nop
 8017be8:	200103c8 	.word	0x200103c8
 8017bec:	200103cc 	.word	0x200103cc
 8017bf0:	200103c4 	.word	0x200103c4

08017bf4 <i2s_matchObject>:
}

/*----------------------------------------------------------------------*/

I2sObject *i2s_matchObject(I2S_HandleTypeDef *hi2s)
{
 8017bf4:	b480      	push	{r7}
 8017bf6:	b085      	sub	sp, #20
 8017bf8:	af00      	add	r7, sp, #0
 8017bfa:	6078      	str	r0, [r7, #4]
	I2sObject *i2s = NULL;
 8017bfc:	2300      	movs	r3, #0
 8017bfe:	60fb      	str	r3, [r7, #12]

	for (uint8_t periph_index = 0; periph_index < I2S_MAX_PERIPH; periph_index++)
 8017c00:	2300      	movs	r3, #0
 8017c02:	72fb      	strb	r3, [r7, #11]
 8017c04:	e010      	b.n	8017c28 <i2s_matchObject+0x34>
	{
		if (i2s_instance[periph_index]->handle == hi2s)
 8017c06:	7afb      	ldrb	r3, [r7, #11]
 8017c08:	4a0c      	ldr	r2, [pc, #48]	; (8017c3c <i2s_matchObject+0x48>)
 8017c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	687a      	ldr	r2, [r7, #4]
 8017c12:	429a      	cmp	r2, r3
 8017c14:	d105      	bne.n	8017c22 <i2s_matchObject+0x2e>
		{
			i2s = i2s_instance[periph_index];
 8017c16:	7afb      	ldrb	r3, [r7, #11]
 8017c18:	4a08      	ldr	r2, [pc, #32]	; (8017c3c <i2s_matchObject+0x48>)
 8017c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017c1e:	60fb      	str	r3, [r7, #12]
			break;
 8017c20:	e005      	b.n	8017c2e <i2s_matchObject+0x3a>
	for (uint8_t periph_index = 0; periph_index < I2S_MAX_PERIPH; periph_index++)
 8017c22:	7afb      	ldrb	r3, [r7, #11]
 8017c24:	3301      	adds	r3, #1
 8017c26:	72fb      	strb	r3, [r7, #11]
 8017c28:	7afb      	ldrb	r3, [r7, #11]
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d0eb      	beq.n	8017c06 <i2s_matchObject+0x12>
		}
	}

	return i2s;
 8017c2e:	68fb      	ldr	r3, [r7, #12]
}
 8017c30:	4618      	mov	r0, r3
 8017c32:	3714      	adds	r7, #20
 8017c34:	46bd      	mov	sp, r7
 8017c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c3a:	4770      	bx	lr
 8017c3c:	200103c4 	.word	0x200103c4

08017c40 <i2s_InitAudClip>:
}

/*----------------------------------------------------------------------*/

void i2s_InitAudClip(I2sObject *i2s)
{
 8017c40:	b580      	push	{r7, lr}
 8017c42:	b082      	sub	sp, #8
 8017c44:	af00      	add	r7, sp, #0
 8017c46:	6078      	str	r0, [r7, #4]
	i2s->audclp_playing = true;
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	2201      	movs	r2, #1
 8017c4c:	715a      	strb	r2, [r3, #5]

	//Setup I2S Peripheral
	HAL_I2S_DeInit(i2s->handle);
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	681b      	ldr	r3, [r3, #0]
 8017c52:	4618      	mov	r0, r3
 8017c54:	f7fa f8ca 	bl	8011dec <HAL_I2S_DeInit>

	i2s->handle->Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8017c60:	615a      	str	r2, [r3, #20]
	HAL_I2S_Init(i2s->handle);
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	681b      	ldr	r3, [r3, #0]
 8017c66:	4618      	mov	r0, r3
 8017c68:	f7f9 ff80 	bl	8011b6c <HAL_I2S_Init>
}
 8017c6c:	bf00      	nop
 8017c6e:	3708      	adds	r7, #8
 8017c70:	46bd      	mov	sp, r7
 8017c72:	bd80      	pop	{r7, pc}

08017c74 <i2s_EndAudClip>:

/*----------------------------------------------------------------------*/

void i2s_EndAudClip(I2sObject *i2s)
{
 8017c74:	b480      	push	{r7}
 8017c76:	b083      	sub	sp, #12
 8017c78:	af00      	add	r7, sp, #0
 8017c7a:	6078      	str	r0, [r7, #4]
	i2s->audclp_playing = false;
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	2200      	movs	r2, #0
 8017c80:	715a      	strb	r2, [r3, #5]

}
 8017c82:	bf00      	nop
 8017c84:	370c      	adds	r7, #12
 8017c86:	46bd      	mov	sp, r7
 8017c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c8c:	4770      	bx	lr
	...

08017c90 <HAL_I2S_Assign_TxCpltCallback>:
/*----------------------------------------------------------------------*/
/*----------------------------------------------------------------------*/
/* CALLBACKS -----------------------------------------------------------*/
/*----------------------------------------------------------------------*/

void HAL_I2S_Assign_TxCpltCallback(void (*cb)(I2S_HandleTypeDef *hi2s)) {
 8017c90:	b480      	push	{r7}
 8017c92:	b083      	sub	sp, #12
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	6078      	str	r0, [r7, #4]
  hal_i2s_tx_cmplt_callback = cb;
 8017c98:	4a04      	ldr	r2, [pc, #16]	; (8017cac <HAL_I2S_Assign_TxCpltCallback+0x1c>)
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	6013      	str	r3, [r2, #0]
}
 8017c9e:	bf00      	nop
 8017ca0:	370c      	adds	r7, #12
 8017ca2:	46bd      	mov	sp, r7
 8017ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca8:	4770      	bx	lr
 8017caa:	bf00      	nop
 8017cac:	200103c8 	.word	0x200103c8

08017cb0 <HAL_I2S_Assign_TxHalfCpltCallback>:

void HAL_I2S_Assign_TxHalfCpltCallback(void (*cb)(I2S_HandleTypeDef *hi2s)) {
 8017cb0:	b480      	push	{r7}
 8017cb2:	b083      	sub	sp, #12
 8017cb4:	af00      	add	r7, sp, #0
 8017cb6:	6078      	str	r0, [r7, #4]
  hal_i2s_tx_halfcmplt_callback = cb;
 8017cb8:	4a04      	ldr	r2, [pc, #16]	; (8017ccc <HAL_I2S_Assign_TxHalfCpltCallback+0x1c>)
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	6013      	str	r3, [r2, #0]
}
 8017cbe:	bf00      	nop
 8017cc0:	370c      	adds	r7, #12
 8017cc2:	46bd      	mov	sp, r7
 8017cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc8:	4770      	bx	lr
 8017cca:	bf00      	nop
 8017ccc:	200103cc 	.word	0x200103cc

08017cd0 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8017cd0:	b580      	push	{r7, lr}
 8017cd2:	b084      	sub	sp, #16
 8017cd4:	af00      	add	r7, sp, #0
 8017cd6:	6078      	str	r0, [r7, #4]
	I2sObject *i2s = i2s_matchObject(hi2s);
 8017cd8:	6878      	ldr	r0, [r7, #4]
 8017cda:	f7ff ff8b 	bl	8017bf4 <i2s_matchObject>
 8017cde:	60f8      	str	r0, [r7, #12]
	if (i2s == NULL)
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d015      	beq.n	8017d12 <HAL_I2S_TxCpltCallback+0x42>
			return;

	if (i2s->audclp_playing)
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	795b      	ldrb	r3, [r3, #5]
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	d008      	beq.n	8017d00 <HAL_I2S_TxCpltCallback+0x30>
	{
		if (hal_i2s_tx_cmplt_callback != NULL)
 8017cee:	4b0b      	ldr	r3, [pc, #44]	; (8017d1c <HAL_I2S_TxCpltCallback+0x4c>)
 8017cf0:	681b      	ldr	r3, [r3, #0]
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	d00e      	beq.n	8017d14 <HAL_I2S_TxCpltCallback+0x44>
			hal_i2s_tx_cmplt_callback(hi2s);
 8017cf6:	4b09      	ldr	r3, [pc, #36]	; (8017d1c <HAL_I2S_TxCpltCallback+0x4c>)
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	6878      	ldr	r0, [r7, #4]
 8017cfc:	4798      	blx	r3
 8017cfe:	e009      	b.n	8017d14 <HAL_I2S_TxCpltCallback+0x44>
	}
	else if (i2s->a2dp_playing)
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	7c1b      	ldrb	r3, [r3, #16]
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d005      	beq.n	8017d14 <HAL_I2S_TxCpltCallback+0x44>
	{
		(*i2s->played_handler)(1);
 8017d08:	68fb      	ldr	r3, [r7, #12]
 8017d0a:	695b      	ldr	r3, [r3, #20]
 8017d0c:	2001      	movs	r0, #1
 8017d0e:	4798      	blx	r3
 8017d10:	e000      	b.n	8017d14 <HAL_I2S_TxCpltCallback+0x44>
			return;
 8017d12:	bf00      	nop
	}
}
 8017d14:	3710      	adds	r7, #16
 8017d16:	46bd      	mov	sp, r7
 8017d18:	bd80      	pop	{r7, pc}
 8017d1a:	bf00      	nop
 8017d1c:	200103c8 	.word	0x200103c8

08017d20 <HAL_I2S_TxHalfCpltCallback>:

/*----------------------------------------------------------------------*/

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8017d20:	b580      	push	{r7, lr}
 8017d22:	b084      	sub	sp, #16
 8017d24:	af00      	add	r7, sp, #0
 8017d26:	6078      	str	r0, [r7, #4]
	I2sObject *i2s = i2s_matchObject(hi2s);
 8017d28:	6878      	ldr	r0, [r7, #4]
 8017d2a:	f7ff ff63 	bl	8017bf4 <i2s_matchObject>
 8017d2e:	60f8      	str	r0, [r7, #12]

	if (i2s == NULL)
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d015      	beq.n	8017d62 <HAL_I2S_TxHalfCpltCallback+0x42>
		return;

	if (i2s->audclp_playing)
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	795b      	ldrb	r3, [r3, #5]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d008      	beq.n	8017d50 <HAL_I2S_TxHalfCpltCallback+0x30>
	{
		if (hal_i2s_tx_halfcmplt_callback != NULL)
 8017d3e:	4b0b      	ldr	r3, [pc, #44]	; (8017d6c <HAL_I2S_TxHalfCpltCallback+0x4c>)
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d00e      	beq.n	8017d64 <HAL_I2S_TxHalfCpltCallback+0x44>
		    hal_i2s_tx_halfcmplt_callback(hi2s);
 8017d46:	4b09      	ldr	r3, [pc, #36]	; (8017d6c <HAL_I2S_TxHalfCpltCallback+0x4c>)
 8017d48:	681b      	ldr	r3, [r3, #0]
 8017d4a:	6878      	ldr	r0, [r7, #4]
 8017d4c:	4798      	blx	r3
 8017d4e:	e009      	b.n	8017d64 <HAL_I2S_TxHalfCpltCallback+0x44>
	}
	else if (i2s->a2dp_playing)
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	7c1b      	ldrb	r3, [r3, #16]
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d005      	beq.n	8017d64 <HAL_I2S_TxHalfCpltCallback+0x44>
	{
		(*i2s->played_handler)(0);
 8017d58:	68fb      	ldr	r3, [r7, #12]
 8017d5a:	695b      	ldr	r3, [r3, #20]
 8017d5c:	2000      	movs	r0, #0
 8017d5e:	4798      	blx	r3
 8017d60:	e000      	b.n	8017d64 <HAL_I2S_TxHalfCpltCallback+0x44>
		return;
 8017d62:	bf00      	nop
	}
}
 8017d64:	3710      	adds	r7, #16
 8017d66:	46bd      	mov	sp, r7
 8017d68:	bd80      	pop	{r7, pc}
 8017d6a:	bf00      	nop
 8017d6c:	200103cc 	.word	0x200103cc

08017d70 <fx_bitstream_init>:
 * data.
 *
 * @param reader is the bitstream reader instance that should be
 * initialized.
 */
static inline void fx_bitstream_init(fx_bitstream_t *reader) {
 8017d70:	b480      	push	{r7}
 8017d72:	b083      	sub	sp, #12
 8017d74:	af00      	add	r7, sp, #0
 8017d76:	6078      	str	r0, [r7, #4]
	reader->buf = 0U;
 8017d78:	6879      	ldr	r1, [r7, #4]
 8017d7a:	f04f 0200 	mov.w	r2, #0
 8017d7e:	f04f 0300 	mov.w	r3, #0
 8017d82:	e9c1 2300 	strd	r2, r3, [r1]
	reader->pos = sizeof(reader->buf) * 8U;
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	2240      	movs	r2, #64	; 0x40
 8017d8a:	741a      	strb	r2, [r3, #16]
	reader->src = NULL;
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	2200      	movs	r2, #0
 8017d90:	609a      	str	r2, [r3, #8]
	reader->src_end = NULL;
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	2200      	movs	r2, #0
 8017d96:	60da      	str	r2, [r3, #12]
}
 8017d98:	bf00      	nop
 8017d9a:	370c      	adds	r7, #12
 8017d9c:	46bd      	mov	sp, r7
 8017d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017da2:	4770      	bx	lr

08017da4 <fx_bitstream_can_read>:
 * @param n_bits is the number of bits that should be read from the bitstream
 * reader. Must be in 1 <= n_bits <= 57.
 * @return true if the number of available bits is smaller or equal to n_bits.
 */
static inline bool fx_bitstream_can_read(fx_bitstream_t *reader,
                                         uint8_t n_bits) {
 8017da4:	b480      	push	{r7}
 8017da6:	b083      	sub	sp, #12
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	6078      	str	r0, [r7, #4]
 8017dac:	460b      	mov	r3, r1
 8017dae:	70fb      	strb	r3, [r7, #3]
	return (sizeof(reader->buf) * 8U) >= (n_bits + reader->pos);
 8017db0:	78fb      	ldrb	r3, [r7, #3]
 8017db2:	687a      	ldr	r2, [r7, #4]
 8017db4:	7c12      	ldrb	r2, [r2, #16]
 8017db6:	4413      	add	r3, r2
 8017db8:	2b40      	cmp	r3, #64	; 0x40
 8017dba:	bf94      	ite	ls
 8017dbc:	2301      	movls	r3, #1
 8017dbe:	2300      	movhi	r3, #0
 8017dc0:	b2db      	uxtb	r3, r3
}
 8017dc2:	4618      	mov	r0, r3
 8017dc4:	370c      	adds	r7, #12
 8017dc6:	46bd      	mov	sp, r7
 8017dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dcc:	4770      	bx	lr

08017dce <fx_bitstream_try_read_msb>:
 * @return -1 if the desired number of bits is not available in the bitstream.
 * Otherwise the integer corresponding to the specified number of bits is
 * returned.
 */
static inline int64_t fx_bitstream_try_read_msb(fx_bitstream_t *reader,
                                                uint8_t n_bits) {
 8017dce:	b580      	push	{r7, lr}
 8017dd0:	b082      	sub	sp, #8
 8017dd2:	af00      	add	r7, sp, #0
 8017dd4:	6078      	str	r0, [r7, #4]
 8017dd6:	460b      	mov	r3, r1
 8017dd8:	70fb      	strb	r3, [r7, #3]
	return fx_bitstream_can_read(reader, n_bits)
 8017dda:	78fb      	ldrb	r3, [r7, #3]
 8017ddc:	4619      	mov	r1, r3
 8017dde:	6878      	ldr	r0, [r7, #4]
 8017de0:	f7ff ffe0 	bl	8017da4 <fx_bitstream_can_read>
 8017de4:	4603      	mov	r3, r0
	           ? (int64_t)fx_bitstream_read_msb(reader, n_bits)
	           : -1;
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d007      	beq.n	8017dfa <fx_bitstream_try_read_msb+0x2c>
	           ? (int64_t)fx_bitstream_read_msb(reader, n_bits)
 8017dea:	78fb      	ldrb	r3, [r7, #3]
 8017dec:	4619      	mov	r1, r3
 8017dee:	6878      	ldr	r0, [r7, #4]
 8017df0:	f000 f919 	bl	8018026 <fx_bitstream_read_msb>
 8017df4:	4602      	mov	r2, r0
 8017df6:	460b      	mov	r3, r1
	           : -1;
 8017df8:	e003      	b.n	8017e02 <fx_bitstream_try_read_msb+0x34>
 8017dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8017dfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017e02:	4610      	mov	r0, r2
 8017e04:	4619      	mov	r1, r3
 8017e06:	3708      	adds	r7, #8
 8017e08:	46bd      	mov	sp, r7
 8017e0a:	bd80      	pop	{r7, pc}

08017e0c <fx_bitstream_try_peek_msb>:
 * @return -1 if the desired number of bits is not available in the bitstream.
 * Otherwise the integer corresponding to the specified number of bits is
 * returned.
 */
static inline int64_t fx_bitstream_try_peek_msb(fx_bitstream_t *reader,
                                                uint8_t n_bits) {
 8017e0c:	b580      	push	{r7, lr}
 8017e0e:	b082      	sub	sp, #8
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	6078      	str	r0, [r7, #4]
 8017e14:	460b      	mov	r3, r1
 8017e16:	70fb      	strb	r3, [r7, #3]
	return fx_bitstream_can_read(reader, n_bits)
 8017e18:	78fb      	ldrb	r3, [r7, #3]
 8017e1a:	4619      	mov	r1, r3
 8017e1c:	6878      	ldr	r0, [r7, #4]
 8017e1e:	f7ff ffc1 	bl	8017da4 <fx_bitstream_can_read>
 8017e22:	4603      	mov	r3, r0
	           ? (int64_t)fx_bitstream_peek_msb(reader, n_bits)
	           : -1;
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d007      	beq.n	8017e38 <fx_bitstream_try_peek_msb+0x2c>
	           ? (int64_t)fx_bitstream_peek_msb(reader, n_bits)
 8017e28:	78fb      	ldrb	r3, [r7, #3]
 8017e2a:	4619      	mov	r1, r3
 8017e2c:	6878      	ldr	r0, [r7, #4]
 8017e2e:	f000 f90d 	bl	801804c <fx_bitstream_peek_msb>
 8017e32:	4602      	mov	r2, r0
 8017e34:	460b      	mov	r3, r1
	           : -1;
 8017e36:	e003      	b.n	8017e40 <fx_bitstream_try_peek_msb+0x34>
 8017e38:	f04f 32ff 	mov.w	r2, #4294967295
 8017e3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017e40:	4610      	mov	r0, r2
 8017e42:	4619      	mov	r1, r3
 8017e44:	3708      	adds	r7, #8
 8017e46:	46bd      	mov	sp, r7
 8017e48:	bd80      	pop	{r7, pc}

08017e4a <_fx_bitstream_fill_buf>:
 * Private functions                                                          *
 ******************************************************************************/

#define BUFSIZE (sizeof(((fx_bitstream_t *)NULL)->buf) * 8U)

static inline void _fx_bitstream_fill_buf(fx_bitstream_t *reader) {
 8017e4a:	b4f0      	push	{r4, r5, r6, r7}
 8017e4c:	b082      	sub	sp, #8
 8017e4e:	af00      	add	r7, sp, #0
 8017e50:	6078      	str	r0, [r7, #4]
	while (reader->pos >= 8U && reader->src != reader->src_end) {
 8017e52:	e020      	b.n	8017e96 <_fx_bitstream_fill_buf+0x4c>
		reader->buf = (reader->buf << 8U) | *(reader->src++);
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017e5a:	f04f 0200 	mov.w	r2, #0
 8017e5e:	f04f 0300 	mov.w	r3, #0
 8017e62:	020b      	lsls	r3, r1, #8
 8017e64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8017e68:	0202      	lsls	r2, r0, #8
 8017e6a:	6879      	ldr	r1, [r7, #4]
 8017e6c:	6889      	ldr	r1, [r1, #8]
 8017e6e:	1c4e      	adds	r6, r1, #1
 8017e70:	6878      	ldr	r0, [r7, #4]
 8017e72:	6086      	str	r6, [r0, #8]
 8017e74:	7809      	ldrb	r1, [r1, #0]
 8017e76:	b2c8      	uxtb	r0, r1
 8017e78:	f04f 0100 	mov.w	r1, #0
 8017e7c:	ea42 0400 	orr.w	r4, r2, r0
 8017e80:	ea43 0501 	orr.w	r5, r3, r1
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	e9c3 4500 	strd	r4, r5, [r3]
		reader->pos -= 8U;
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	7c1b      	ldrb	r3, [r3, #16]
 8017e8e:	3b08      	subs	r3, #8
 8017e90:	b2da      	uxtb	r2, r3
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	741a      	strb	r2, [r3, #16]
	while (reader->pos >= 8U && reader->src != reader->src_end) {
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	7c1b      	ldrb	r3, [r3, #16]
 8017e9a:	2b07      	cmp	r3, #7
 8017e9c:	d905      	bls.n	8017eaa <_fx_bitstream_fill_buf+0x60>
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	689a      	ldr	r2, [r3, #8]
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	68db      	ldr	r3, [r3, #12]
 8017ea6:	429a      	cmp	r2, r3
 8017ea8:	d1d4      	bne.n	8017e54 <_fx_bitstream_fill_buf+0xa>
	}
}
 8017eaa:	bf00      	nop
 8017eac:	3708      	adds	r7, #8
 8017eae:	46bd      	mov	sp, r7
 8017eb0:	bcf0      	pop	{r4, r5, r6, r7}
 8017eb2:	4770      	bx	lr

08017eb4 <_fx_bitstream_read_msb>:

static inline uint64_t _fx_bitstream_read_msb(
    fx_bitstream_t *reader, uint8_t n_bits,
    fx_bitstream_byte_callback_t callback, void *callback_data) {
 8017eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eb8:	b08d      	sub	sp, #52	; 0x34
 8017eba:	af00      	add	r7, sp, #0
 8017ebc:	60f8      	str	r0, [r7, #12]
 8017ebe:	607a      	str	r2, [r7, #4]
 8017ec0:	603b      	str	r3, [r7, #0]
 8017ec2:	460b      	mov	r3, r1
 8017ec4:	72fb      	strb	r3, [r7, #11]
	assert((n_bits >= 1U) && (n_bits <= (BUFSIZE - 7U)));
 8017ec6:	7afb      	ldrb	r3, [r7, #11]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d002      	beq.n	8017ed2 <_fx_bitstream_read_msb+0x1e>
 8017ecc:	7afb      	ldrb	r3, [r7, #11]
 8017ece:	2b39      	cmp	r3, #57	; 0x39
 8017ed0:	d906      	bls.n	8017ee0 <_fx_bitstream_read_msb+0x2c>
 8017ed2:	4b47      	ldr	r3, [pc, #284]	; (8017ff0 <_fx_bitstream_read_msb+0x13c>)
 8017ed4:	4a47      	ldr	r2, [pc, #284]	; (8017ff4 <_fx_bitstream_read_msb+0x140>)
 8017ed6:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8017eda:	4847      	ldr	r0, [pc, #284]	; (8017ff8 <_fx_bitstream_read_msb+0x144>)
 8017edc:	f002 f8c6 	bl	801a06c <__assert_func>

	/* Copy the current buffer content, skip already read bits */
	uint64_t bits = reader->buf << reader->pos;
 8017ee0:	68fb      	ldr	r3, [r7, #12]
 8017ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ee6:	68f9      	ldr	r1, [r7, #12]
 8017ee8:	7c09      	ldrb	r1, [r1, #16]
 8017eea:	f1a1 0620 	sub.w	r6, r1, #32
 8017eee:	f1c1 0020 	rsb	r0, r1, #32
 8017ef2:	fa03 f901 	lsl.w	r9, r3, r1
 8017ef6:	fa02 f606 	lsl.w	r6, r2, r6
 8017efa:	ea49 0906 	orr.w	r9, r9, r6
 8017efe:	fa22 f000 	lsr.w	r0, r2, r0
 8017f02:	ea49 0900 	orr.w	r9, r9, r0
 8017f06:	fa02 f801 	lsl.w	r8, r2, r1
 8017f0a:	e9c7 8906 	strd	r8, r9, [r7, #24]

	/* If the callback is specified, issue bytes that were read entirely */
	const uint8_t pos_new = reader->pos + n_bits;
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	7c1a      	ldrb	r2, [r3, #16]
 8017f12:	7afb      	ldrb	r3, [r7, #11]
 8017f14:	4413      	add	r3, r2
 8017f16:	75fb      	strb	r3, [r7, #23]
	if (callback) {
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d044      	beq.n	8017fa8 <_fx_bitstream_read_msb+0xf4>
		const uint8_t i0 = reader->pos / 8U, i1 = pos_new / 8U;
 8017f1e:	68fb      	ldr	r3, [r7, #12]
 8017f20:	7c1b      	ldrb	r3, [r3, #16]
 8017f22:	08db      	lsrs	r3, r3, #3
 8017f24:	75bb      	strb	r3, [r7, #22]
 8017f26:	7dfb      	ldrb	r3, [r7, #23]
 8017f28:	08db      	lsrs	r3, r3, #3
 8017f2a:	757b      	strb	r3, [r7, #21]
		uint64_t buf = reader->buf << (i0 * 8U);
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f32:	7db9      	ldrb	r1, [r7, #22]
 8017f34:	00c9      	lsls	r1, r1, #3
 8017f36:	f1a1 0620 	sub.w	r6, r1, #32
 8017f3a:	f1c1 0020 	rsb	r0, r1, #32
 8017f3e:	fa03 f501 	lsl.w	r5, r3, r1
 8017f42:	fa02 f606 	lsl.w	r6, r2, r6
 8017f46:	4335      	orrs	r5, r6
 8017f48:	fa22 f000 	lsr.w	r0, r2, r0
 8017f4c:	4305      	orrs	r5, r0
 8017f4e:	fa02 f401 	lsl.w	r4, r2, r1
 8017f52:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		for (uint8_t i = i0; i < i1; i++) {
 8017f56:	7dbb      	ldrb	r3, [r7, #22]
 8017f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017f5c:	e01f      	b.n	8017f9e <_fx_bitstream_read_msb+0xea>
			uint8_t byte = buf >> (BUFSIZE - 8U);
 8017f5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8017f62:	f04f 0200 	mov.w	r2, #0
 8017f66:	f04f 0300 	mov.w	r3, #0
 8017f6a:	0e0a      	lsrs	r2, r1, #24
 8017f6c:	2300      	movs	r3, #0
 8017f6e:	4613      	mov	r3, r2
 8017f70:	753b      	strb	r3, [r7, #20]
			callback(byte, callback_data);
 8017f72:	7d3a      	ldrb	r2, [r7, #20]
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	6839      	ldr	r1, [r7, #0]
 8017f78:	4610      	mov	r0, r2
 8017f7a:	4798      	blx	r3
			buf = buf << 8U;
 8017f7c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8017f80:	f04f 0200 	mov.w	r2, #0
 8017f84:	f04f 0300 	mov.w	r3, #0
 8017f88:	020b      	lsls	r3, r1, #8
 8017f8a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8017f8e:	0202      	lsls	r2, r0, #8
 8017f90:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		for (uint8_t i = i0; i < i1; i++) {
 8017f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017f98:	3301      	adds	r3, #1
 8017f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017f9e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017fa2:	7d7b      	ldrb	r3, [r7, #21]
 8017fa4:	429a      	cmp	r2, r3
 8017fa6:	d3da      	bcc.n	8017f5e <_fx_bitstream_read_msb+0xaa>
		}
	}

	/* Advance the position */
	reader->pos = pos_new;
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	7dfa      	ldrb	r2, [r7, #23]
 8017fac:	741a      	strb	r2, [r3, #16]

	/* Read new bytes from the byte stream */
	_fx_bitstream_fill_buf(reader);
 8017fae:	68f8      	ldr	r0, [r7, #12]
 8017fb0:	f7ff ff4b 	bl	8017e4a <_fx_bitstream_fill_buf>

	/* Mask out the "low" bits */
	return bits >> (BUFSIZE - n_bits);
 8017fb4:	7afb      	ldrb	r3, [r7, #11]
 8017fb6:	f1c3 0140 	rsb	r1, r3, #64	; 0x40
 8017fba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8017fbe:	f1c1 0420 	rsb	r4, r1, #32
 8017fc2:	f1a1 0020 	sub.w	r0, r1, #32
 8017fc6:	fa22 fa01 	lsr.w	sl, r2, r1
 8017fca:	fa03 f404 	lsl.w	r4, r3, r4
 8017fce:	ea4a 0a04 	orr.w	sl, sl, r4
 8017fd2:	fa23 f000 	lsr.w	r0, r3, r0
 8017fd6:	ea4a 0a00 	orr.w	sl, sl, r0
 8017fda:	fa23 fb01 	lsr.w	fp, r3, r1
 8017fde:	4652      	mov	r2, sl
 8017fe0:	465b      	mov	r3, fp
}
 8017fe2:	4610      	mov	r0, r2
 8017fe4:	4619      	mov	r1, r3
 8017fe6:	3734      	adds	r7, #52	; 0x34
 8017fe8:	46bd      	mov	sp, r7
 8017fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fee:	bf00      	nop
 8017ff0:	0801b0c8 	.word	0x0801b0c8
 8017ff4:	0801b298 	.word	0x0801b298
 8017ff8:	0801b0f8 	.word	0x0801b0f8

08017ffc <fx_bitstream_set_source>:
 * Public API                                                                 *
 ******************************************************************************/

static inline void fx_bitstream_set_source(fx_bitstream_t *reader,
                                           const uint8_t *src,
                                           uint32_t src_len) {
 8017ffc:	b580      	push	{r7, lr}
 8017ffe:	b084      	sub	sp, #16
 8018000:	af00      	add	r7, sp, #0
 8018002:	60f8      	str	r0, [r7, #12]
 8018004:	60b9      	str	r1, [r7, #8]
 8018006:	607a      	str	r2, [r7, #4]
	reader->src = src;
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	68ba      	ldr	r2, [r7, #8]
 801800c:	609a      	str	r2, [r3, #8]
	reader->src_end = src + src_len;
 801800e:	68ba      	ldr	r2, [r7, #8]
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	441a      	add	r2, r3
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	60da      	str	r2, [r3, #12]
	_fx_bitstream_fill_buf(reader);
 8018018:	68f8      	ldr	r0, [r7, #12]
 801801a:	f7ff ff16 	bl	8017e4a <_fx_bitstream_fill_buf>
}
 801801e:	bf00      	nop
 8018020:	3710      	adds	r7, #16
 8018022:	46bd      	mov	sp, r7
 8018024:	bd80      	pop	{r7, pc}

08018026 <fx_bitstream_read_msb>:

static inline uint64_t fx_bitstream_read_msb(fx_bitstream_t *reader,
                                             uint8_t n_bits) {
 8018026:	b580      	push	{r7, lr}
 8018028:	b082      	sub	sp, #8
 801802a:	af00      	add	r7, sp, #0
 801802c:	6078      	str	r0, [r7, #4]
 801802e:	460b      	mov	r3, r1
 8018030:	70fb      	strb	r3, [r7, #3]
	return _fx_bitstream_read_msb(reader, n_bits, NULL, NULL);
 8018032:	78f9      	ldrb	r1, [r7, #3]
 8018034:	2300      	movs	r3, #0
 8018036:	2200      	movs	r2, #0
 8018038:	6878      	ldr	r0, [r7, #4]
 801803a:	f7ff ff3b 	bl	8017eb4 <_fx_bitstream_read_msb>
 801803e:	4602      	mov	r2, r0
 8018040:	460b      	mov	r3, r1
}
 8018042:	4610      	mov	r0, r2
 8018044:	4619      	mov	r1, r3
 8018046:	3708      	adds	r7, #8
 8018048:	46bd      	mov	sp, r7
 801804a:	bd80      	pop	{r7, pc}

0801804c <fx_bitstream_peek_msb>:
    fx_bitstream_byte_callback_t callback, void *callback_data) {
	return _fx_bitstream_read_msb(reader, n_bits, callback, callback_data);
}

static inline uint64_t fx_bitstream_peek_msb(fx_bitstream_t *reader,
                                             uint8_t n_bits) {
 801804c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801804e:	b083      	sub	sp, #12
 8018050:	af00      	add	r7, sp, #0
 8018052:	6078      	str	r0, [r7, #4]
 8018054:	70f9      	strb	r1, [r7, #3]
	assert((n_bits >= 1U) && (n_bits <= (BUFSIZE - 7U)));
 8018056:	78f9      	ldrb	r1, [r7, #3]
 8018058:	2900      	cmp	r1, #0
 801805a:	d002      	beq.n	8018062 <fx_bitstream_peek_msb+0x16>
 801805c:	78f9      	ldrb	r1, [r7, #3]
 801805e:	2939      	cmp	r1, #57	; 0x39
 8018060:	d906      	bls.n	8018070 <fx_bitstream_peek_msb+0x24>
 8018062:	4b1a      	ldr	r3, [pc, #104]	; (80180cc <fx_bitstream_peek_msb+0x80>)
 8018064:	4a1a      	ldr	r2, [pc, #104]	; (80180d0 <fx_bitstream_peek_msb+0x84>)
 8018066:	f44f 71a1 	mov.w	r1, #322	; 0x142
 801806a:	481a      	ldr	r0, [pc, #104]	; (80180d4 <fx_bitstream_peek_msb+0x88>)
 801806c:	f001 fffe 	bl	801a06c <__assert_func>
	return (reader->buf << reader->pos) >> (BUFSIZE - n_bits);
 8018070:	6879      	ldr	r1, [r7, #4]
 8018072:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018076:	687e      	ldr	r6, [r7, #4]
 8018078:	7c36      	ldrb	r6, [r6, #16]
 801807a:	f1a6 0e20 	sub.w	lr, r6, #32
 801807e:	f1c6 0c20 	rsb	ip, r6, #32
 8018082:	fa01 f306 	lsl.w	r3, r1, r6
 8018086:	fa00 fe0e 	lsl.w	lr, r0, lr
 801808a:	ea43 030e 	orr.w	r3, r3, lr
 801808e:	fa20 fc0c 	lsr.w	ip, r0, ip
 8018092:	ea43 030c 	orr.w	r3, r3, ip
 8018096:	fa00 f206 	lsl.w	r2, r0, r6
 801809a:	78f9      	ldrb	r1, [r7, #3]
 801809c:	f1c1 0140 	rsb	r1, r1, #64	; 0x40
 80180a0:	f1c1 0620 	rsb	r6, r1, #32
 80180a4:	f1a1 0020 	sub.w	r0, r1, #32
 80180a8:	fa22 f401 	lsr.w	r4, r2, r1
 80180ac:	fa03 f606 	lsl.w	r6, r3, r6
 80180b0:	4334      	orrs	r4, r6
 80180b2:	fa23 f000 	lsr.w	r0, r3, r0
 80180b6:	4304      	orrs	r4, r0
 80180b8:	fa23 f501 	lsr.w	r5, r3, r1
 80180bc:	4622      	mov	r2, r4
 80180be:	462b      	mov	r3, r5
}
 80180c0:	4610      	mov	r0, r2
 80180c2:	4619      	mov	r1, r3
 80180c4:	370c      	adds	r7, #12
 80180c6:	46bd      	mov	sp, r7
 80180c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180ca:	bf00      	nop
 80180cc:	0801b0c8 	.word	0x0801b0c8
 80180d0:	0801b2b0 	.word	0x0801b2b0
 80180d4:	0801b0f8 	.word	0x0801b0f8

080180d8 <fx_mem_init_size>:
 * @param size is a pointer at a variable that holds the size of the object
 * that we're describing. This function initializes this value to FX_ALIGN - 1.
 * @return Always returns true to facilitate chaining with other fx_mem_*_size()
 * functions.
 */
static inline bool fx_mem_init_size(uint32_t *size) {
 80180d8:	b480      	push	{r7}
 80180da:	b083      	sub	sp, #12
 80180dc:	af00      	add	r7, sp, #0
 80180de:	6078      	str	r0, [r7, #4]
	*size = FX_ALIGN;
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	2210      	movs	r2, #16
 80180e4:	601a      	str	r2, [r3, #0]
	return true;
 80180e6:	2301      	movs	r3, #1
}
 80180e8:	4618      	mov	r0, r3
 80180ea:	370c      	adds	r7, #12
 80180ec:	46bd      	mov	sp, r7
 80180ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180f2:	4770      	bx	lr

080180f4 <fx_mem_update_size_ex>:
 * datastructure. This must always be a multiple of FX_ALIGN.
 * @param n_bytes size of the sub-structure that should be added.
 * @return zero if there was an overflow, one otherwise.
 */
static inline bool fx_mem_update_size_ex(uint32_t *size, uint32_t n_bytes,
                                         uint32_t align) {
 80180f4:	b480      	push	{r7}
 80180f6:	b087      	sub	sp, #28
 80180f8:	af00      	add	r7, sp, #0
 80180fa:	60f8      	str	r0, [r7, #12]
 80180fc:	60b9      	str	r1, [r7, #8]
 80180fe:	607a      	str	r2, [r7, #4]
	const uint32_t new_size = ((*size + n_bytes + align - 1) & (~(align - 1)));
 8018100:	68fb      	ldr	r3, [r7, #12]
 8018102:	681a      	ldr	r2, [r3, #0]
 8018104:	68bb      	ldr	r3, [r7, #8]
 8018106:	441a      	add	r2, r3
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	4413      	add	r3, r2
 801810c:	1e5a      	subs	r2, r3, #1
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	425b      	negs	r3, r3
 8018112:	4013      	ands	r3, r2
 8018114:	617b      	str	r3, [r7, #20]
	if (new_size < *size) {
 8018116:	68fb      	ldr	r3, [r7, #12]
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	697a      	ldr	r2, [r7, #20]
 801811c:	429a      	cmp	r2, r3
 801811e:	d201      	bcs.n	8018124 <fx_mem_update_size_ex+0x30>
		return false; /* error, there has been an overflow */
 8018120:	2300      	movs	r3, #0
 8018122:	e003      	b.n	801812c <fx_mem_update_size_ex+0x38>
	}
	*size = new_size;
 8018124:	68fb      	ldr	r3, [r7, #12]
 8018126:	697a      	ldr	r2, [r7, #20]
 8018128:	601a      	str	r2, [r3, #0]
	return true; /* success */
 801812a:	2301      	movs	r3, #1
}
 801812c:	4618      	mov	r0, r3
 801812e:	371c      	adds	r7, #28
 8018130:	46bd      	mov	sp, r7
 8018132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018136:	4770      	bx	lr

08018138 <fx_mem_update_size>:
 * @param size is a pointer at the variable holding the size of the
 * datastructure. This must always be a multiple of FX_ALIGN.
 * @param n_bytes size of the sub-structure that should be added.
 * @return zero if there was an overflow, one otherwise.
 */
static inline bool fx_mem_update_size(uint32_t *size, uint32_t n_bytes) {
 8018138:	b580      	push	{r7, lr}
 801813a:	b082      	sub	sp, #8
 801813c:	af00      	add	r7, sp, #0
 801813e:	6078      	str	r0, [r7, #4]
 8018140:	6039      	str	r1, [r7, #0]
	return fx_mem_update_size_ex(size, n_bytes, FX_ALIGN);
 8018142:	2210      	movs	r2, #16
 8018144:	6839      	ldr	r1, [r7, #0]
 8018146:	6878      	ldr	r0, [r7, #4]
 8018148:	f7ff ffd4 	bl	80180f4 <fx_mem_update_size_ex>
 801814c:	4603      	mov	r3, r0
}
 801814e:	4618      	mov	r0, r3
 8018150:	3708      	adds	r7, #8
 8018152:	46bd      	mov	sp, r7
 8018154:	bd80      	pop	{r7, pc}

08018156 <fx_mem_align_ex>:
 * @param size is the size of the substructure for which the pointer should be
 * returned.
 * @param align is the memory alignment to use.
 * @return an aligned pointer pointing at the beginning of the substructure.
 */
static inline void *fx_mem_align_ex(void **mem, uint32_t size, uint32_t align) {
 8018156:	b480      	push	{r7}
 8018158:	b087      	sub	sp, #28
 801815a:	af00      	add	r7, sp, #0
 801815c:	60f8      	str	r0, [r7, #12]
 801815e:	60b9      	str	r1, [r7, #8]
 8018160:	607a      	str	r2, [r7, #4]
	void *res = FX_ALIGN_ADDR_EX(*mem, align);
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	461a      	mov	r2, r3
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	4413      	add	r3, r2
 801816c:	1e5a      	subs	r2, r3, #1
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	425b      	negs	r3, r3
 8018172:	4013      	ands	r3, r2
 8018174:	617b      	str	r3, [r7, #20]
	*mem = (void *)((uintptr_t)res + size);
 8018176:	697a      	ldr	r2, [r7, #20]
 8018178:	68bb      	ldr	r3, [r7, #8]
 801817a:	4413      	add	r3, r2
 801817c:	461a      	mov	r2, r3
 801817e:	68fb      	ldr	r3, [r7, #12]
 8018180:	601a      	str	r2, [r3, #0]
	return res;
 8018182:	697b      	ldr	r3, [r7, #20]
}
 8018184:	4618      	mov	r0, r3
 8018186:	371c      	adds	r7, #28
 8018188:	46bd      	mov	sp, r7
 801818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801818e:	4770      	bx	lr

08018190 <fx_mem_align>:
 * computed.
 * @param size is the size of the substructure for which the pointer should be
 * returned.
 * @return an aligned pointer pointing at the beginning of the substructure.
 */
static inline void *fx_mem_align(void **mem, uint32_t size) {
 8018190:	b580      	push	{r7, lr}
 8018192:	b082      	sub	sp, #8
 8018194:	af00      	add	r7, sp, #0
 8018196:	6078      	str	r0, [r7, #4]
 8018198:	6039      	str	r1, [r7, #0]
	return fx_mem_align_ex(mem, size, FX_ALIGN);
 801819a:	2210      	movs	r2, #16
 801819c:	6839      	ldr	r1, [r7, #0]
 801819e:	6878      	ldr	r0, [r7, #4]
 80181a0:	f7ff ffd9 	bl	8018156 <fx_mem_align_ex>
 80181a4:	4603      	mov	r3, r0
}
 80181a6:	4618      	mov	r0, r3
 80181a8:	3708      	adds	r7, #8
 80181aa:	46bd      	mov	sp, r7
 80181ac:	bd80      	pop	{r7, pc}
	...

080181b0 <fx_mem_zero_aligned>:
 * @param mem is a pointer at the memory region that should be zeroed out. This
 * pointer is assumed to be aligned.
 * @param size is the size of the memory region that should be zeroed in bytes.
 * This value is effectively rounded up to a multiple of FX_ALIGN
 */
static inline void fx_mem_zero_aligned(void *mem, uint32_t size) {
 80181b0:	b580      	push	{r7, lr}
 80181b2:	b084      	sub	sp, #16
 80181b4:	af00      	add	r7, sp, #0
 80181b6:	6078      	str	r0, [r7, #4]
 80181b8:	6039      	str	r1, [r7, #0]
	assert((((uintptr_t)mem) & (FX_ALIGN - 1)) == 0); /* mem must be aligned */
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	f003 030f 	and.w	r3, r3, #15
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d005      	beq.n	80181d0 <fx_mem_zero_aligned+0x20>
 80181c4:	4b15      	ldr	r3, [pc, #84]	; (801821c <fx_mem_zero_aligned+0x6c>)
 80181c6:	4a16      	ldr	r2, [pc, #88]	; (8018220 <fx_mem_zero_aligned+0x70>)
 80181c8:	21ab      	movs	r1, #171	; 0xab
 80181ca:	4816      	ldr	r0, [pc, #88]	; (8018224 <fx_mem_zero_aligned+0x74>)
 80181cc:	f001 ff4e 	bl	801a06c <__assert_func>
	mem = FX_ASSUME_ALIGNED(mem);
	for (uint32_t i = 0; i < (size + FX_ALIGN - 1) / FX_ALIGN; i++) {
 80181d0:	2300      	movs	r3, #0
 80181d2:	60fb      	str	r3, [r7, #12]
 80181d4:	e017      	b.n	8018206 <fx_mem_zero_aligned+0x56>
		((uint64_t *)mem)[2 * i + 0] = 0; /* If we're lucky, this loop is */
 80181d6:	68fb      	ldr	r3, [r7, #12]
 80181d8:	011b      	lsls	r3, r3, #4
 80181da:	687a      	ldr	r2, [r7, #4]
 80181dc:	18d1      	adds	r1, r2, r3
 80181de:	f04f 0200 	mov.w	r2, #0
 80181e2:	f04f 0300 	mov.w	r3, #0
 80181e6:	e9c1 2300 	strd	r2, r3, [r1]
		((uint64_t *)mem)[2 * i + 1] = 0; /* unrolled and vectorised. */
 80181ea:	68fb      	ldr	r3, [r7, #12]
 80181ec:	011b      	lsls	r3, r3, #4
 80181ee:	3308      	adds	r3, #8
 80181f0:	687a      	ldr	r2, [r7, #4]
 80181f2:	18d1      	adds	r1, r2, r3
 80181f4:	f04f 0200 	mov.w	r2, #0
 80181f8:	f04f 0300 	mov.w	r3, #0
 80181fc:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint32_t i = 0; i < (size + FX_ALIGN - 1) / FX_ALIGN; i++) {
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	3301      	adds	r3, #1
 8018204:	60fb      	str	r3, [r7, #12]
 8018206:	683b      	ldr	r3, [r7, #0]
 8018208:	330f      	adds	r3, #15
 801820a:	091b      	lsrs	r3, r3, #4
 801820c:	68fa      	ldr	r2, [r7, #12]
 801820e:	429a      	cmp	r2, r3
 8018210:	d3e1      	bcc.n	80181d6 <fx_mem_zero_aligned+0x26>
	}
}
 8018212:	bf00      	nop
 8018214:	bf00      	nop
 8018216:	3710      	adds	r7, #16
 8018218:	46bd      	mov	sp, r7
 801821a:	bd80      	pop	{r7, pc}
 801821c:	0801b128 	.word	0x0801b128
 8018220:	0801b2c8 	.word	0x0801b2c8
 8018224:	0801b154 	.word	0x0801b154

08018228 <_fx_flac_check_params>:
/******************************************************************************
 * Initialization code utils                                                  *
 ******************************************************************************/

static bool _fx_flac_check_params(uint16_t max_block_size, uint8_t max_channels)
{
 8018228:	b480      	push	{r7}
 801822a:	b083      	sub	sp, #12
 801822c:	af00      	add	r7, sp, #0
 801822e:	4603      	mov	r3, r0
 8018230:	460a      	mov	r2, r1
 8018232:	80fb      	strh	r3, [r7, #6]
 8018234:	4613      	mov	r3, r2
 8018236:	717b      	strb	r3, [r7, #5]
	return (max_block_size > 0U) && (max_channels > 0U) &&
 8018238:	88fb      	ldrh	r3, [r7, #6]
 801823a:	2b00      	cmp	r3, #0
 801823c:	d007      	beq.n	801824e <_fx_flac_check_params+0x26>
 801823e:	797b      	ldrb	r3, [r7, #5]
 8018240:	2b00      	cmp	r3, #0
 8018242:	d004      	beq.n	801824e <_fx_flac_check_params+0x26>
 8018244:	797b      	ldrb	r3, [r7, #5]
 8018246:	2b08      	cmp	r3, #8
 8018248:	d801      	bhi.n	801824e <_fx_flac_check_params+0x26>
 801824a:	2301      	movs	r3, #1
 801824c:	e000      	b.n	8018250 <_fx_flac_check_params+0x28>
 801824e:	2300      	movs	r3, #0
 8018250:	f003 0301 	and.w	r3, r3, #1
 8018254:	b2db      	uxtb	r3, r3
	       (max_channels <= FLAC_MAX_CHANNEL_COUNT);
}
 8018256:	4618      	mov	r0, r3
 8018258:	370c      	adds	r7, #12
 801825a:	46bd      	mov	sp, r7
 801825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018260:	4770      	bx	lr
	...

08018264 <_fx_flac_decode_block_size>:
 * FLAC enum decoders                                                         *
 ******************************************************************************/

static bool _fx_flac_decode_block_size(fx_flac_block_size_t block_size_enum,
                                       uint32_t *block_size)
{
 8018264:	b480      	push	{r7}
 8018266:	b085      	sub	sp, #20
 8018268:	af00      	add	r7, sp, #0
 801826a:	4603      	mov	r3, r0
 801826c:	6039      	str	r1, [r7, #0]
 801826e:	71fb      	strb	r3, [r7, #7]
	const int32_t bs = fx_flac_block_sizes_[(int)block_size_enum];
 8018270:	79fb      	ldrb	r3, [r7, #7]
 8018272:	4a0b      	ldr	r2, [pc, #44]	; (80182a0 <_fx_flac_decode_block_size+0x3c>)
 8018274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018278:	60fb      	str	r3, [r7, #12]
	if (bs < 0) {
 801827a:	68fb      	ldr	r3, [r7, #12]
 801827c:	2b00      	cmp	r3, #0
 801827e:	da01      	bge.n	8018284 <_fx_flac_decode_block_size+0x20>
		return false; /* Invalid */
 8018280:	2300      	movs	r3, #0
 8018282:	e006      	b.n	8018292 <_fx_flac_decode_block_size+0x2e>
	}
	else if (bs > 0) {
 8018284:	68fb      	ldr	r3, [r7, #12]
 8018286:	2b00      	cmp	r3, #0
 8018288:	dd02      	ble.n	8018290 <_fx_flac_decode_block_size+0x2c>
		*block_size = bs;
 801828a:	68fa      	ldr	r2, [r7, #12]
 801828c:	683b      	ldr	r3, [r7, #0]
 801828e:	601a      	str	r2, [r3, #0]
	}
	return true;
 8018290:	2301      	movs	r3, #1
}
 8018292:	4618      	mov	r0, r3
 8018294:	3714      	adds	r7, #20
 8018296:	46bd      	mov	sp, r7
 8018298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801829c:	4770      	bx	lr
 801829e:	bf00      	nop
 80182a0:	0801b1c0 	.word	0x0801b1c0

080182a4 <_fx_flac_decode_sample_rate>:

static bool _fx_flac_decode_sample_rate(fx_flac_sample_rate_t sample_rate_enum,
                                        uint32_t *sample_rate)
{
 80182a4:	b480      	push	{r7}
 80182a6:	b085      	sub	sp, #20
 80182a8:	af00      	add	r7, sp, #0
 80182aa:	4603      	mov	r3, r0
 80182ac:	6039      	str	r1, [r7, #0]
 80182ae:	71fb      	strb	r3, [r7, #7]
	const int32_t fs = fx_flac_sample_rates_[(int)sample_rate_enum];
 80182b0:	79fb      	ldrb	r3, [r7, #7]
 80182b2:	4a0b      	ldr	r2, [pc, #44]	; (80182e0 <_fx_flac_decode_sample_rate+0x3c>)
 80182b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80182b8:	60fb      	str	r3, [r7, #12]
	if (fs < 0) {
 80182ba:	68fb      	ldr	r3, [r7, #12]
 80182bc:	2b00      	cmp	r3, #0
 80182be:	da01      	bge.n	80182c4 <_fx_flac_decode_sample_rate+0x20>
		return false; /* Invalid */
 80182c0:	2300      	movs	r3, #0
 80182c2:	e006      	b.n	80182d2 <_fx_flac_decode_sample_rate+0x2e>
	}
	else if (fs > 0) {
 80182c4:	68fb      	ldr	r3, [r7, #12]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	dd02      	ble.n	80182d0 <_fx_flac_decode_sample_rate+0x2c>
		*sample_rate = fs;
 80182ca:	68fa      	ldr	r2, [r7, #12]
 80182cc:	683b      	ldr	r3, [r7, #0]
 80182ce:	601a      	str	r2, [r3, #0]
	}
	return true;
 80182d0:	2301      	movs	r3, #1
}
 80182d2:	4618      	mov	r0, r3
 80182d4:	3714      	adds	r7, #20
 80182d6:	46bd      	mov	sp, r7
 80182d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182dc:	4770      	bx	lr
 80182de:	bf00      	nop
 80182e0:	0801b200 	.word	0x0801b200

080182e4 <_fx_flac_decode_sample_size>:

static bool _fx_flac_decode_sample_size(fx_flac_sample_size_t sample_size_enum,
                                        uint8_t *sample_size)
{
 80182e4:	b480      	push	{r7}
 80182e6:	b085      	sub	sp, #20
 80182e8:	af00      	add	r7, sp, #0
 80182ea:	4603      	mov	r3, r0
 80182ec:	6039      	str	r1, [r7, #0]
 80182ee:	71fb      	strb	r3, [r7, #7]
	const int8_t ss = fx_flac_sample_sizes_[(int)sample_size_enum];
 80182f0:	79fb      	ldrb	r3, [r7, #7]
 80182f2:	4a0b      	ldr	r2, [pc, #44]	; (8018320 <_fx_flac_decode_sample_size+0x3c>)
 80182f4:	5cd3      	ldrb	r3, [r2, r3]
 80182f6:	73fb      	strb	r3, [r7, #15]
	if (ss < 0) {
 80182f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	da01      	bge.n	8018304 <_fx_flac_decode_sample_size+0x20>
		return false; /* Invalid */
 8018300:	2300      	movs	r3, #0
 8018302:	e007      	b.n	8018314 <_fx_flac_decode_sample_size+0x30>
	}
	else if (ss > 0) {
 8018304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018308:	2b00      	cmp	r3, #0
 801830a:	dd02      	ble.n	8018312 <_fx_flac_decode_sample_size+0x2e>
		*sample_size = ss;
 801830c:	7bfa      	ldrb	r2, [r7, #15]
 801830e:	683b      	ldr	r3, [r7, #0]
 8018310:	701a      	strb	r2, [r3, #0]
	}
	return true;
 8018312:	2301      	movs	r3, #1
}
 8018314:	4618      	mov	r0, r3
 8018316:	3714      	adds	r7, #20
 8018318:	46bd      	mov	sp, r7
 801831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801831e:	4770      	bx	lr
 8018320:	0801b240 	.word	0x0801b240

08018324 <_fx_flac_decode_channel_count>:
/**
 * Returns the number of channels encoded in the frame header.
 */
static bool _fx_flac_decode_channel_count(
    fx_flac_channel_assignment_t channel_assignment, uint8_t *channel_count)
{
 8018324:	b480      	push	{r7}
 8018326:	b083      	sub	sp, #12
 8018328:	af00      	add	r7, sp, #0
 801832a:	4603      	mov	r3, r0
 801832c:	6039      	str	r1, [r7, #0]
 801832e:	71fb      	strb	r3, [r7, #7]
	*channel_count = (channel_assignment >= LEFT_SIDE_STEREO)
 8018330:	79fb      	ldrb	r3, [r7, #7]
 8018332:	2b07      	cmp	r3, #7
 8018334:	d803      	bhi.n	801833e <_fx_flac_decode_channel_count+0x1a>
 8018336:	79fb      	ldrb	r3, [r7, #7]
 8018338:	3301      	adds	r3, #1
 801833a:	b2da      	uxtb	r2, r3
 801833c:	e000      	b.n	8018340 <_fx_flac_decode_channel_count+0x1c>
 801833e:	2202      	movs	r2, #2
 8018340:	683b      	ldr	r3, [r7, #0]
 8018342:	701a      	strb	r2, [r3, #0]
	                     ? 2U
	                     : (uint8_t)channel_assignment + 1U;
	return true;
 8018344:	2301      	movs	r3, #1
}
 8018346:	4618      	mov	r0, r3
 8018348:	370c      	adds	r7, #12
 801834a:	46bd      	mov	sp, r7
 801834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018350:	4770      	bx	lr

08018352 <_fx_flac_post_process_left_side>:
 * Decoding functions                                                         *
 ******************************************************************************/

static inline void _fx_flac_post_process_left_side(int32_t *blk1, int32_t *blk2,
                                                   uint32_t blk_size)
{
 8018352:	b480      	push	{r7}
 8018354:	b087      	sub	sp, #28
 8018356:	af00      	add	r7, sp, #0
 8018358:	60f8      	str	r0, [r7, #12]
 801835a:	60b9      	str	r1, [r7, #8]
 801835c:	607a      	str	r2, [r7, #4]
	blk1 = (int32_t *)FX_ASSUME_ALIGNED(blk1);
	blk2 = (int32_t *)FX_ASSUME_ALIGNED(blk2);
	for (uint32_t i = 0U; i < blk_size; i++) {
 801835e:	2300      	movs	r3, #0
 8018360:	617b      	str	r3, [r7, #20]
 8018362:	e012      	b.n	801838a <_fx_flac_post_process_left_side+0x38>
		blk2[i] = blk1[i] - blk2[i];
 8018364:	697b      	ldr	r3, [r7, #20]
 8018366:	009b      	lsls	r3, r3, #2
 8018368:	68fa      	ldr	r2, [r7, #12]
 801836a:	4413      	add	r3, r2
 801836c:	6819      	ldr	r1, [r3, #0]
 801836e:	697b      	ldr	r3, [r7, #20]
 8018370:	009b      	lsls	r3, r3, #2
 8018372:	68ba      	ldr	r2, [r7, #8]
 8018374:	4413      	add	r3, r2
 8018376:	681a      	ldr	r2, [r3, #0]
 8018378:	697b      	ldr	r3, [r7, #20]
 801837a:	009b      	lsls	r3, r3, #2
 801837c:	68b8      	ldr	r0, [r7, #8]
 801837e:	4403      	add	r3, r0
 8018380:	1a8a      	subs	r2, r1, r2
 8018382:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0U; i < blk_size; i++) {
 8018384:	697b      	ldr	r3, [r7, #20]
 8018386:	3301      	adds	r3, #1
 8018388:	617b      	str	r3, [r7, #20]
 801838a:	697a      	ldr	r2, [r7, #20]
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	429a      	cmp	r2, r3
 8018390:	d3e8      	bcc.n	8018364 <_fx_flac_post_process_left_side+0x12>
	}
}
 8018392:	bf00      	nop
 8018394:	bf00      	nop
 8018396:	371c      	adds	r7, #28
 8018398:	46bd      	mov	sp, r7
 801839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801839e:	4770      	bx	lr

080183a0 <_fx_flac_post_process_right_side>:

static inline void _fx_flac_post_process_right_side(int32_t *blk1,
                                                    int32_t *blk2,
                                                    uint32_t blk_size)
{
 80183a0:	b480      	push	{r7}
 80183a2:	b087      	sub	sp, #28
 80183a4:	af00      	add	r7, sp, #0
 80183a6:	60f8      	str	r0, [r7, #12]
 80183a8:	60b9      	str	r1, [r7, #8]
 80183aa:	607a      	str	r2, [r7, #4]
	blk1 = (int32_t *)FX_ASSUME_ALIGNED(blk1);
	blk2 = (int32_t *)FX_ASSUME_ALIGNED(blk2);
	for (uint32_t i = 0U; i < blk_size; i++) {
 80183ac:	2300      	movs	r3, #0
 80183ae:	617b      	str	r3, [r7, #20]
 80183b0:	e012      	b.n	80183d8 <_fx_flac_post_process_right_side+0x38>
		blk1[i] = blk1[i] + blk2[i];
 80183b2:	697b      	ldr	r3, [r7, #20]
 80183b4:	009b      	lsls	r3, r3, #2
 80183b6:	68fa      	ldr	r2, [r7, #12]
 80183b8:	4413      	add	r3, r2
 80183ba:	6819      	ldr	r1, [r3, #0]
 80183bc:	697b      	ldr	r3, [r7, #20]
 80183be:	009b      	lsls	r3, r3, #2
 80183c0:	68ba      	ldr	r2, [r7, #8]
 80183c2:	4413      	add	r3, r2
 80183c4:	681a      	ldr	r2, [r3, #0]
 80183c6:	697b      	ldr	r3, [r7, #20]
 80183c8:	009b      	lsls	r3, r3, #2
 80183ca:	68f8      	ldr	r0, [r7, #12]
 80183cc:	4403      	add	r3, r0
 80183ce:	440a      	add	r2, r1
 80183d0:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0U; i < blk_size; i++) {
 80183d2:	697b      	ldr	r3, [r7, #20]
 80183d4:	3301      	adds	r3, #1
 80183d6:	617b      	str	r3, [r7, #20]
 80183d8:	697a      	ldr	r2, [r7, #20]
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	429a      	cmp	r2, r3
 80183de:	d3e8      	bcc.n	80183b2 <_fx_flac_post_process_right_side+0x12>
	}
}
 80183e0:	bf00      	nop
 80183e2:	bf00      	nop
 80183e4:	371c      	adds	r7, #28
 80183e6:	46bd      	mov	sp, r7
 80183e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ec:	4770      	bx	lr

080183ee <_fx_flac_post_process_mid_side>:

static inline void _fx_flac_post_process_mid_side(int32_t *blk1, int32_t *blk2,
                                                  uint32_t blk_size)
{
 80183ee:	b480      	push	{r7}
 80183f0:	b089      	sub	sp, #36	; 0x24
 80183f2:	af00      	add	r7, sp, #0
 80183f4:	60f8      	str	r0, [r7, #12]
 80183f6:	60b9      	str	r1, [r7, #8]
 80183f8:	607a      	str	r2, [r7, #4]
	blk1 = (int32_t *)FX_ASSUME_ALIGNED(blk1);
	blk2 = (int32_t *)FX_ASSUME_ALIGNED(blk2);
	for (uint32_t i = 0U; i < blk_size; i++) {
 80183fa:	2300      	movs	r3, #0
 80183fc:	61fb      	str	r3, [r7, #28]
 80183fe:	e029      	b.n	8018454 <_fx_flac_post_process_mid_side+0x66>
		/* Code libflac from stream_decoder.c */
		int32_t mid = blk1[i];
 8018400:	69fb      	ldr	r3, [r7, #28]
 8018402:	009b      	lsls	r3, r3, #2
 8018404:	68fa      	ldr	r2, [r7, #12]
 8018406:	4413      	add	r3, r2
 8018408:	681b      	ldr	r3, [r3, #0]
 801840a:	61bb      	str	r3, [r7, #24]
		int32_t side = blk2[i];
 801840c:	69fb      	ldr	r3, [r7, #28]
 801840e:	009b      	lsls	r3, r3, #2
 8018410:	68ba      	ldr	r2, [r7, #8]
 8018412:	4413      	add	r3, r2
 8018414:	681b      	ldr	r3, [r3, #0]
 8018416:	617b      	str	r3, [r7, #20]
		mid = ((uint32_t)mid) << 1;
 8018418:	69bb      	ldr	r3, [r7, #24]
 801841a:	005b      	lsls	r3, r3, #1
 801841c:	61bb      	str	r3, [r7, #24]
		mid |= (side & 1); /* Round correctly */
 801841e:	697b      	ldr	r3, [r7, #20]
 8018420:	f003 0301 	and.w	r3, r3, #1
 8018424:	69ba      	ldr	r2, [r7, #24]
 8018426:	4313      	orrs	r3, r2
 8018428:	61bb      	str	r3, [r7, #24]
		blk1[i] = (mid + side) >> 1;
 801842a:	69ba      	ldr	r2, [r7, #24]
 801842c:	697b      	ldr	r3, [r7, #20]
 801842e:	441a      	add	r2, r3
 8018430:	69fb      	ldr	r3, [r7, #28]
 8018432:	009b      	lsls	r3, r3, #2
 8018434:	68f9      	ldr	r1, [r7, #12]
 8018436:	440b      	add	r3, r1
 8018438:	1052      	asrs	r2, r2, #1
 801843a:	601a      	str	r2, [r3, #0]
		blk2[i] = (mid - side) >> 1;
 801843c:	69ba      	ldr	r2, [r7, #24]
 801843e:	697b      	ldr	r3, [r7, #20]
 8018440:	1ad2      	subs	r2, r2, r3
 8018442:	69fb      	ldr	r3, [r7, #28]
 8018444:	009b      	lsls	r3, r3, #2
 8018446:	68b9      	ldr	r1, [r7, #8]
 8018448:	440b      	add	r3, r1
 801844a:	1052      	asrs	r2, r2, #1
 801844c:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0U; i < blk_size; i++) {
 801844e:	69fb      	ldr	r3, [r7, #28]
 8018450:	3301      	adds	r3, #1
 8018452:	61fb      	str	r3, [r7, #28]
 8018454:	69fa      	ldr	r2, [r7, #28]
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	429a      	cmp	r2, r3
 801845a:	d3d1      	bcc.n	8018400 <_fx_flac_post_process_mid_side+0x12>
	}
}
 801845c:	bf00      	nop
 801845e:	bf00      	nop
 8018460:	3724      	adds	r7, #36	; 0x24
 8018462:	46bd      	mov	sp, r7
 8018464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018468:	4770      	bx	lr

0801846a <_fx_flac_restore_lpc_signal>:

static inline void _fx_flac_restore_lpc_signal(int32_t *blk, uint32_t blk_size,
                                               int32_t *lpc_coeffs,
                                               uint8_t lpc_order,
                                               int8_t lpc_shift)
{
 801846a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 801846e:	b08a      	sub	sp, #40	; 0x28
 8018470:	af00      	add	r7, sp, #0
 8018472:	60f8      	str	r0, [r7, #12]
 8018474:	60b9      	str	r1, [r7, #8]
 8018476:	607a      	str	r2, [r7, #4]
 8018478:	70fb      	strb	r3, [r7, #3]
	blk = (int32_t *)FX_ASSUME_ALIGNED(blk);
	lpc_coeffs = (int32_t *)FX_ASSUME_ALIGNED(lpc_coeffs);

	for (uint32_t i = lpc_order; i < blk_size; i++) {
 801847a:	78fb      	ldrb	r3, [r7, #3]
 801847c:	627b      	str	r3, [r7, #36]	; 0x24
 801847e:	e05b      	b.n	8018538 <_fx_flac_restore_lpc_signal+0xce>
		int64_t accu = 0;
 8018480:	f04f 0200 	mov.w	r2, #0
 8018484:	f04f 0300 	mov.w	r3, #0
 8018488:	e9c7 2306 	strd	r2, r3, [r7, #24]
		for (uint8_t j = 0; j < lpc_order; j++) {
 801848c:	2300      	movs	r3, #0
 801848e:	75fb      	strb	r3, [r7, #23]
 8018490:	e028      	b.n	80184e4 <_fx_flac_restore_lpc_signal+0x7a>
			accu += (int64_t)lpc_coeffs[j] * (int64_t)blk[i - j - 1];
 8018492:	7dfb      	ldrb	r3, [r7, #23]
 8018494:	009b      	lsls	r3, r3, #2
 8018496:	687a      	ldr	r2, [r7, #4]
 8018498:	4413      	add	r3, r2
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	4618      	mov	r0, r3
 801849e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80184a2:	7dfb      	ldrb	r3, [r7, #23]
 80184a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80184a6:	1ad3      	subs	r3, r2, r3
 80184a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80184ac:	3b01      	subs	r3, #1
 80184ae:	009b      	lsls	r3, r3, #2
 80184b0:	68fa      	ldr	r2, [r7, #12]
 80184b2:	4413      	add	r3, r2
 80184b4:	681b      	ldr	r3, [r3, #0]
 80184b6:	461a      	mov	r2, r3
 80184b8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80184bc:	fb02 fc01 	mul.w	ip, r2, r1
 80184c0:	fb00 f603 	mul.w	r6, r0, r3
 80184c4:	4466      	add	r6, ip
 80184c6:	fba0 2302 	umull	r2, r3, r0, r2
 80184ca:	18f1      	adds	r1, r6, r3
 80184cc:	460b      	mov	r3, r1
 80184ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80184d2:	eb10 0802 	adds.w	r8, r0, r2
 80184d6:	eb41 0903 	adc.w	r9, r1, r3
 80184da:	e9c7 8906 	strd	r8, r9, [r7, #24]
		for (uint8_t j = 0; j < lpc_order; j++) {
 80184de:	7dfb      	ldrb	r3, [r7, #23]
 80184e0:	3301      	adds	r3, #1
 80184e2:	75fb      	strb	r3, [r7, #23]
 80184e4:	7dfa      	ldrb	r2, [r7, #23]
 80184e6:	78fb      	ldrb	r3, [r7, #3]
 80184e8:	429a      	cmp	r2, r3
 80184ea:	d3d2      	bcc.n	8018492 <_fx_flac_restore_lpc_signal+0x28>
		}
		blk[i] = blk[i] + (accu >> lpc_shift);
 80184ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184ee:	009b      	lsls	r3, r3, #2
 80184f0:	68fa      	ldr	r2, [r7, #12]
 80184f2:	4413      	add	r3, r2
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	469c      	mov	ip, r3
 80184f8:	f997 1040 	ldrsb.w	r1, [r7, #64]	; 0x40
 80184fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8018500:	f1c1 0620 	rsb	r6, r1, #32
 8018504:	f1b1 0020 	subs.w	r0, r1, #32
 8018508:	fa22 f401 	lsr.w	r4, r2, r1
 801850c:	fa03 f606 	lsl.w	r6, r3, r6
 8018510:	ea44 0406 	orr.w	r4, r4, r6
 8018514:	d402      	bmi.n	801851c <_fx_flac_restore_lpc_signal+0xb2>
 8018516:	fa43 f000 	asr.w	r0, r3, r0
 801851a:	4304      	orrs	r4, r0
 801851c:	fa43 f501 	asr.w	r5, r3, r1
 8018520:	4623      	mov	r3, r4
 8018522:	eb0c 0103 	add.w	r1, ip, r3
 8018526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018528:	009b      	lsls	r3, r3, #2
 801852a:	68fa      	ldr	r2, [r7, #12]
 801852c:	4413      	add	r3, r2
 801852e:	460a      	mov	r2, r1
 8018530:	601a      	str	r2, [r3, #0]
	for (uint32_t i = lpc_order; i < blk_size; i++) {
 8018532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018534:	3301      	adds	r3, #1
 8018536:	627b      	str	r3, [r7, #36]	; 0x24
 8018538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801853a:	68bb      	ldr	r3, [r7, #8]
 801853c:	429a      	cmp	r2, r3
 801853e:	d39f      	bcc.n	8018480 <_fx_flac_restore_lpc_signal+0x16>
	}
}
 8018540:	bf00      	nop
 8018542:	bf00      	nop
 8018544:	3728      	adds	r7, #40	; 0x28
 8018546:	46bd      	mov	sp, r7
 8018548:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 801854c:	4770      	bx	lr

0801854e <_fx_flac_reader_utf8_coded_int>:
}
#endif /* FX_FLAC_NO_CRC */

static bool _fx_flac_reader_utf8_coded_int(fx_flac_t *inst, uint8_t max_n,
                                           uint64_t *tar)
{
 801854e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018552:	b088      	sub	sp, #32
 8018554:	af00      	add	r7, sp, #0
 8018556:	60f8      	str	r0, [r7, #12]
 8018558:	460b      	mov	r3, r1
 801855a:	607a      	str	r2, [r7, #4]
 801855c:	72fb      	strb	r3, [r7, #11]
	int64_t tmp_; /* Used by the READ_BITS macro */

	ENSURE_BITS(max_n * 8U);
 801855e:	68fa      	ldr	r2, [r7, #12]
 8018560:	7afb      	ldrb	r3, [r7, #11]
 8018562:	00db      	lsls	r3, r3, #3
 8018564:	b2db      	uxtb	r3, r3
 8018566:	4619      	mov	r1, r3
 8018568:	4610      	mov	r0, r2
 801856a:	f7ff fc1b 	bl	8017da4 <fx_bitstream_can_read>
 801856e:	4603      	mov	r3, r0
 8018570:	f083 0301 	eor.w	r3, r3, #1
 8018574:	b2db      	uxtb	r3, r3
 8018576:	2b00      	cmp	r3, #0
 8018578:	d001      	beq.n	801857e <_fx_flac_reader_utf8_coded_int+0x30>
 801857a:	2300      	movs	r3, #0
 801857c:	e069      	b.n	8018652 <_fx_flac_reader_utf8_coded_int+0x104>
	/* Read the first byte */
	uint8_t v = READ_BITS_FAST_DCRC(8U);
 801857e:	68fb      	ldr	r3, [r7, #12]
 8018580:	2108      	movs	r1, #8
 8018582:	4618      	mov	r0, r3
 8018584:	f7ff fd4f 	bl	8018026 <fx_bitstream_read_msb>
 8018588:	4602      	mov	r2, r0
 801858a:	460b      	mov	r3, r1
 801858c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8018590:	693b      	ldr	r3, [r7, #16]
 8018592:	77fb      	strb	r3, [r7, #31]

	/* Count the number of ones in the first byte */
	uint8_t n_ones = 0U;
 8018594:	2300      	movs	r3, #0
 8018596:	77bb      	strb	r3, [r7, #30]
	while (v & 0x80U) {
 8018598:	e005      	b.n	80185a6 <_fx_flac_reader_utf8_coded_int+0x58>
		v = v << 1U;
 801859a:	7ffb      	ldrb	r3, [r7, #31]
 801859c:	005b      	lsls	r3, r3, #1
 801859e:	77fb      	strb	r3, [r7, #31]
		n_ones++;
 80185a0:	7fbb      	ldrb	r3, [r7, #30]
 80185a2:	3301      	adds	r3, #1
 80185a4:	77bb      	strb	r3, [r7, #30]
	while (v & 0x80U) {
 80185a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	dbf5      	blt.n	801859a <_fx_flac_reader_utf8_coded_int+0x4c>
	}

	/* Abort if the number of bytes to read is larger than max_n */
	if (n_ones > max_n) {
 80185ae:	7fba      	ldrb	r2, [r7, #30]
 80185b0:	7afb      	ldrb	r3, [r7, #11]
 80185b2:	429a      	cmp	r2, r3
 80185b4:	d905      	bls.n	80185c2 <_fx_flac_reader_utf8_coded_int+0x74>
		inst->priv_state = FLAC_FRAME_SYNC; /* Invalid header */
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80185bc:	835a      	strh	r2, [r3, #26]
		return true;
 80185be:	2301      	movs	r3, #1
 80185c0:	e047      	b.n	8018652 <_fx_flac_reader_utf8_coded_int+0x104>
	}

	/* Shift v back and store in var */
	*tar = (v >> n_ones);
 80185c2:	7ffa      	ldrb	r2, [r7, #31]
 80185c4:	7fbb      	ldrb	r3, [r7, #30]
 80185c6:	fa42 f303 	asr.w	r3, r2, r3
 80185ca:	461a      	mov	r2, r3
 80185cc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80185d0:	6879      	ldr	r1, [r7, #4]
 80185d2:	e9c1 2300 	strd	r2, r3, [r1]

	/* Read all continuation bytes */
	for (uint8_t i = 1U; i < n_ones; i++) {
 80185d6:	2301      	movs	r3, #1
 80185d8:	777b      	strb	r3, [r7, #29]
 80185da:	e035      	b.n	8018648 <_fx_flac_reader_utf8_coded_int+0xfa>
		v = READ_BITS_FAST_DCRC(8U);
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	2108      	movs	r1, #8
 80185e0:	4618      	mov	r0, r3
 80185e2:	f7ff fd20 	bl	8018026 <fx_bitstream_read_msb>
 80185e6:	4602      	mov	r2, r0
 80185e8:	460b      	mov	r3, r1
 80185ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80185ee:	693b      	ldr	r3, [r7, #16]
 80185f0:	77fb      	strb	r3, [r7, #31]
		/* Abort if continuation byte doesn't start with correct sequence */
		if ((v & 0xC0U) != 0x80) {
 80185f2:	7ffb      	ldrb	r3, [r7, #31]
 80185f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80185f8:	2b80      	cmp	r3, #128	; 0x80
 80185fa:	d005      	beq.n	8018608 <_fx_flac_reader_utf8_coded_int+0xba>
			inst->priv_state = FLAC_FRAME_SYNC; /* Invalid header */
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8018602:	835a      	strh	r2, [r3, #26]
			return true;
 8018604:	2301      	movs	r3, #1
 8018606:	e024      	b.n	8018652 <_fx_flac_reader_utf8_coded_int+0x104>
		}
		*tar = ((*tar) << 6U) | (v & 0x3F);
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801860e:	f04f 0200 	mov.w	r2, #0
 8018612:	f04f 0300 	mov.w	r3, #0
 8018616:	018b      	lsls	r3, r1, #6
 8018618:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801861c:	0182      	lsls	r2, r0, #6
 801861e:	7ff8      	ldrb	r0, [r7, #31]
 8018620:	f04f 0100 	mov.w	r1, #0
 8018624:	f04f 0a3f 	mov.w	sl, #63	; 0x3f
 8018628:	f04f 0b00 	mov.w	fp, #0
 801862c:	ea00 040a 	and.w	r4, r0, sl
 8018630:	ea01 050b 	and.w	r5, r1, fp
 8018634:	ea42 0804 	orr.w	r8, r2, r4
 8018638:	ea43 0905 	orr.w	r9, r3, r5
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	e9c3 8900 	strd	r8, r9, [r3]
	for (uint8_t i = 1U; i < n_ones; i++) {
 8018642:	7f7b      	ldrb	r3, [r7, #29]
 8018644:	3301      	adds	r3, #1
 8018646:	777b      	strb	r3, [r7, #29]
 8018648:	7f7a      	ldrb	r2, [r7, #29]
 801864a:	7fbb      	ldrb	r3, [r7, #30]
 801864c:	429a      	cmp	r2, r3
 801864e:	d3c5      	bcc.n	80185dc <_fx_flac_reader_utf8_coded_int+0x8e>
	}
	return true;
 8018650:	2301      	movs	r3, #1
}
 8018652:	4618      	mov	r0, r3
 8018654:	3720      	adds	r7, #32
 8018656:	46bd      	mov	sp, r7
 8018658:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801865c <_fx_flac_handle_err>:
 * to read more data. The return value does NOT indicate success/failure. This
 * is what inst->state == FLAC_ERR is for.
 */

static bool _fx_flac_handle_err(fx_flac_t *inst)
{
 801865c:	b480      	push	{r7}
 801865e:	b083      	sub	sp, #12
 8018660:	af00      	add	r7, sp, #0
 8018662:	6078      	str	r0, [r7, #4]
	/* TODO: Add flags to fx_flac_t which control this behaviour */

	/* If an error happens while searching for metadata, this is fatal. */
	if (inst->state < FLAC_END_OF_METADATA) {
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	f993 3018 	ldrsb.w	r3, [r3, #24]
 801866a:	2b01      	cmp	r3, #1
 801866c:	dc04      	bgt.n	8018678 <_fx_flac_handle_err+0x1c>
		inst->state = FLAC_ERR;
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	22ff      	movs	r2, #255	; 0xff
 8018672:	761a      	strb	r2, [r3, #24]
		return false;
 8018674:	2300      	movs	r3, #0
 8018676:	e007      	b.n	8018688 <_fx_flac_handle_err+0x2c>
	}

	/* Otherwise just try to re-synchronise with the stream by searching for the
	   next frame */
	inst->state = FLAC_SEARCH_FRAME;
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	2203      	movs	r2, #3
 801867c:	761a      	strb	r2, [r3, #24]
	inst->priv_state = FLAC_FRAME_SYNC;
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8018684:	835a      	strh	r2, [r3, #26]
	return true;
 8018686:	2301      	movs	r3, #1
}
 8018688:	4618      	mov	r0, r3
 801868a:	370c      	adds	r7, #12
 801868c:	46bd      	mov	sp, r7
 801868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018692:	4770      	bx	lr

08018694 <_fx_flac_process_init>:
/**
 * Statemachine used to search the beginning of the stream. This (for example)
 * skips IDv3 tags prepended to the file.
 */
static bool _fx_flac_process_init(fx_flac_t *inst)
{
 8018694:	b580      	push	{r7, lr}
 8018696:	b086      	sub	sp, #24
 8018698:	af00      	add	r7, sp, #0
 801869a:	6078      	str	r0, [r7, #4]
	int64_t tmp_; /* Used by the READ_BITS macro */
	/* Search for the 'fLaC' sync word */
	uint8_t byte = READ_BITS(8);
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	2108      	movs	r1, #8
 80186a0:	4618      	mov	r0, r3
 80186a2:	f7ff fb94 	bl	8017dce <fx_bitstream_try_read_msb>
 80186a6:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80186aa:	693b      	ldr	r3, [r7, #16]
 80186ac:	73fb      	strb	r3, [r7, #15]
 80186ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80186b2:	2a00      	cmp	r2, #0
 80186b4:	f173 0300 	sbcs.w	r3, r3, #0
 80186b8:	da01      	bge.n	80186be <_fx_flac_process_init+0x2a>
 80186ba:	2300      	movs	r3, #0
 80186bc:	e040      	b.n	8018740 <_fx_flac_process_init+0xac>
	switch (inst->priv_state) {
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	8b5b      	ldrh	r3, [r3, #26]
 80186c2:	2b66      	cmp	r3, #102	; 0x66
 80186c4:	d027      	beq.n	8018716 <_fx_flac_process_init+0x82>
 80186c6:	2b66      	cmp	r3, #102	; 0x66
 80186c8:	dc33      	bgt.n	8018732 <_fx_flac_process_init+0x9e>
 80186ca:	2b65      	cmp	r3, #101	; 0x65
 80186cc:	d018      	beq.n	8018700 <_fx_flac_process_init+0x6c>
 80186ce:	2b65      	cmp	r3, #101	; 0x65
 80186d0:	dc2f      	bgt.n	8018732 <_fx_flac_process_init+0x9e>
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d002      	beq.n	80186dc <_fx_flac_process_init+0x48>
 80186d6:	2b64      	cmp	r3, #100	; 0x64
 80186d8:	d007      	beq.n	80186ea <_fx_flac_process_init+0x56>
 80186da:	e02a      	b.n	8018732 <_fx_flac_process_init+0x9e>
		case FLAC_SYNC_INIT:
			if (byte == 'f') {
 80186dc:	7bfb      	ldrb	r3, [r7, #15]
 80186de:	2b66      	cmp	r3, #102	; 0x66
 80186e0:	d12c      	bne.n	801873c <_fx_flac_process_init+0xa8>
				inst->priv_state = FLAC_SYNC_F;
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	2264      	movs	r2, #100	; 0x64
 80186e6:	835a      	strh	r2, [r3, #26]
			}
			break;
 80186e8:	e028      	b.n	801873c <_fx_flac_process_init+0xa8>
		case FLAC_SYNC_F:
			if (byte == 'L') {
 80186ea:	7bfb      	ldrb	r3, [r7, #15]
 80186ec:	2b4c      	cmp	r3, #76	; 0x4c
 80186ee:	d103      	bne.n	80186f8 <_fx_flac_process_init+0x64>
				inst->priv_state = FLAC_SYNC_L;
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	2265      	movs	r2, #101	; 0x65
 80186f4:	835a      	strh	r2, [r3, #26]
			}
			else {
				inst->priv_state = FLAC_SYNC_INIT;
			}
			break;
 80186f6:	e022      	b.n	801873e <_fx_flac_process_init+0xaa>
				inst->priv_state = FLAC_SYNC_INIT;
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	2200      	movs	r2, #0
 80186fc:	835a      	strh	r2, [r3, #26]
			break;
 80186fe:	e01e      	b.n	801873e <_fx_flac_process_init+0xaa>
		case FLAC_SYNC_L:
			if (byte == 'a') {
 8018700:	7bfb      	ldrb	r3, [r7, #15]
 8018702:	2b61      	cmp	r3, #97	; 0x61
 8018704:	d103      	bne.n	801870e <_fx_flac_process_init+0x7a>
				inst->priv_state = FLAC_SYNC_A;
 8018706:	687b      	ldr	r3, [r7, #4]
 8018708:	2266      	movs	r2, #102	; 0x66
 801870a:	835a      	strh	r2, [r3, #26]
			}
			else {
				inst->priv_state = FLAC_SYNC_INIT;
			}
			break;
 801870c:	e017      	b.n	801873e <_fx_flac_process_init+0xaa>
				inst->priv_state = FLAC_SYNC_INIT;
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	2200      	movs	r2, #0
 8018712:	835a      	strh	r2, [r3, #26]
			break;
 8018714:	e013      	b.n	801873e <_fx_flac_process_init+0xaa>
		case FLAC_SYNC_A:
			if (byte == 'C') {
 8018716:	7bfb      	ldrb	r3, [r7, #15]
 8018718:	2b43      	cmp	r3, #67	; 0x43
 801871a:	d106      	bne.n	801872a <_fx_flac_process_init+0x96>
				inst->state = FLAC_IN_METADATA;
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	2201      	movs	r2, #1
 8018720:	761a      	strb	r2, [r3, #24]
				inst->priv_state = FLAC_METADATA_HEADER;
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	22c8      	movs	r2, #200	; 0xc8
 8018726:	835a      	strh	r2, [r3, #26]
			}
			else {
				inst->priv_state = FLAC_SYNC_INIT;
			}
			break;
 8018728:	e009      	b.n	801873e <_fx_flac_process_init+0xaa>
				inst->priv_state = FLAC_SYNC_INIT;
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	2200      	movs	r2, #0
 801872e:	835a      	strh	r2, [r3, #26]
			break;
 8018730:	e005      	b.n	801873e <_fx_flac_process_init+0xaa>
		default:
			return _fx_flac_handle_err(inst);
 8018732:	6878      	ldr	r0, [r7, #4]
 8018734:	f7ff ff92 	bl	801865c <_fx_flac_handle_err>
 8018738:	4603      	mov	r3, r0
 801873a:	e001      	b.n	8018740 <_fx_flac_process_init+0xac>
			break;
 801873c:	bf00      	nop
	}
	return true;
 801873e:	2301      	movs	r3, #1
}
 8018740:	4618      	mov	r0, r3
 8018742:	3718      	adds	r7, #24
 8018744:	46bd      	mov	sp, r7
 8018746:	bd80      	pop	{r7, pc}

08018748 <_fx_flac_process_in_metadata>:

static bool _fx_flac_process_in_metadata(fx_flac_t *inst)
{
 8018748:	b580      	push	{r7, lr}
 801874a:	b086      	sub	sp, #24
 801874c:	af00      	add	r7, sp, #0
 801874e:	6078      	str	r0, [r7, #4]
	int64_t tmp_; /* Used by the READ_BITS macro */
	switch (inst->priv_state) {
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	8b5b      	ldrh	r3, [r3, #26]
 8018754:	2bca      	cmp	r3, #202	; 0xca
 8018756:	d068      	beq.n	801882a <_fx_flac_process_in_metadata+0xe2>
 8018758:	2bca      	cmp	r3, #202	; 0xca
 801875a:	f300 81cb 	bgt.w	8018af4 <_fx_flac_process_in_metadata+0x3ac>
 801875e:	2bc8      	cmp	r3, #200	; 0xc8
 8018760:	d003      	beq.n	801876a <_fx_flac_process_in_metadata+0x22>
 8018762:	2bc9      	cmp	r3, #201	; 0xc9
 8018764:	f000 8197 	beq.w	8018a96 <_fx_flac_process_in_metadata+0x34e>
 8018768:	e1c4      	b.n	8018af4 <_fx_flac_process_in_metadata+0x3ac>
		case FLAC_METADATA_HEADER:
			ENSURE_BITS(32U);
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	2120      	movs	r1, #32
 801876e:	4618      	mov	r0, r3
 8018770:	f7ff fb18 	bl	8017da4 <fx_bitstream_can_read>
 8018774:	4603      	mov	r3, r0
 8018776:	f083 0301 	eor.w	r3, r3, #1
 801877a:	b2db      	uxtb	r3, r3
 801877c:	2b00      	cmp	r3, #0
 801877e:	d001      	beq.n	8018784 <_fx_flac_process_in_metadata+0x3c>
 8018780:	2300      	movs	r3, #0
 8018782:	e1be      	b.n	8018b02 <_fx_flac_process_in_metadata+0x3ba>
			inst->metadata->is_last = READ_BITS_FAST(1U);
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	2101      	movs	r1, #1
 8018788:	4618      	mov	r0, r3
 801878a:	f7ff fc4c 	bl	8018026 <fx_bitstream_read_msb>
 801878e:	4602      	mov	r2, r0
 8018790:	460b      	mov	r3, r1
 8018792:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801879a:	6939      	ldr	r1, [r7, #16]
 801879c:	697a      	ldr	r2, [r7, #20]
 801879e:	430a      	orrs	r2, r1
 80187a0:	2a00      	cmp	r2, #0
 80187a2:	bf14      	ite	ne
 80187a4:	2201      	movne	r2, #1
 80187a6:	2200      	moveq	r2, #0
 80187a8:	b2d2      	uxtb	r2, r2
 80187aa:	701a      	strb	r2, [r3, #0]
			inst->metadata->type = (fx_flac_metadata_type_t)READ_BITS_FAST(7U);
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	2107      	movs	r1, #7
 80187b0:	4618      	mov	r0, r3
 80187b2:	f7ff fc38 	bl	8018026 <fx_bitstream_read_msb>
 80187b6:	4602      	mov	r2, r0
 80187b8:	460b      	mov	r3, r1
 80187ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80187c2:	7c3a      	ldrb	r2, [r7, #16]
 80187c4:	705a      	strb	r2, [r3, #1]
			if (inst->metadata->type == META_TYPE_INVALID) {
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80187ca:	785b      	ldrb	r3, [r3, #1]
 80187cc:	2b7f      	cmp	r3, #127	; 0x7f
 80187ce:	d104      	bne.n	80187da <_fx_flac_process_in_metadata+0x92>
				return _fx_flac_handle_err(inst);
 80187d0:	6878      	ldr	r0, [r7, #4]
 80187d2:	f7ff ff43 	bl	801865c <_fx_flac_handle_err>
 80187d6:	4603      	mov	r3, r0
 80187d8:	e193      	b.n	8018b02 <_fx_flac_process_in_metadata+0x3ba>
			}
			inst->metadata->length = inst->n_bytes_rem = READ_BITS_FAST(24U);
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	2118      	movs	r1, #24
 80187de:	4618      	mov	r0, r3
 80187e0:	f7ff fc21 	bl	8018026 <fx_bitstream_read_msb>
 80187e4:	4602      	mov	r2, r0
 80187e6:	460b      	mov	r3, r1
 80187e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80187ec:	693a      	ldr	r2, [r7, #16]
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	61da      	str	r2, [r3, #28]
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80187f6:	687a      	ldr	r2, [r7, #4]
 80187f8:	69d2      	ldr	r2, [r2, #28]
 80187fa:	605a      	str	r2, [r3, #4]
			if (inst->metadata->type == META_TYPE_STREAMINFO) {
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018800:	785b      	ldrb	r3, [r3, #1]
 8018802:	2b00      	cmp	r3, #0
 8018804:	d10d      	bne.n	8018822 <_fx_flac_process_in_metadata+0xda>
				inst->priv_state = FLAC_METADATA_SINFO;
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	22ca      	movs	r2, #202	; 0xca
 801880a:	835a      	strh	r2, [r3, #26]
				/* The stream info header must be exactly 33 bytes long */
				if (inst->metadata->length != 34U) {
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018810:	685b      	ldr	r3, [r3, #4]
 8018812:	2b22      	cmp	r3, #34	; 0x22
 8018814:	f000 8173 	beq.w	8018afe <_fx_flac_process_in_metadata+0x3b6>
					return _fx_flac_handle_err(inst);
 8018818:	6878      	ldr	r0, [r7, #4]
 801881a:	f7ff ff1f 	bl	801865c <_fx_flac_handle_err>
 801881e:	4603      	mov	r3, r0
 8018820:	e16f      	b.n	8018b02 <_fx_flac_process_in_metadata+0x3ba>
				}
			}
			else {
				inst->priv_state = FLAC_METADATA_SKIP;
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	22c9      	movs	r2, #201	; 0xc9
 8018826:	835a      	strh	r2, [r3, #26]
			}
			break;
 8018828:	e169      	b.n	8018afe <_fx_flac_process_in_metadata+0x3b6>
		case FLAC_METADATA_SINFO:
			switch (inst->n_bytes_rem) {
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	69db      	ldr	r3, [r3, #28]
 801882e:	2b22      	cmp	r3, #34	; 0x22
 8018830:	f200 812b 	bhi.w	8018a8a <_fx_flac_process_in_metadata+0x342>
 8018834:	a201      	add	r2, pc, #4	; (adr r2, 801883c <_fx_flac_process_in_metadata+0xf4>)
 8018836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801883a:	bf00      	nop
 801883c:	08018a83 	.word	0x08018a83
 8018840:	08018a43 	.word	0x08018a43
 8018844:	08018a43 	.word	0x08018a43
 8018848:	08018a43 	.word	0x08018a43
 801884c:	08018a43 	.word	0x08018a43
 8018850:	08018a43 	.word	0x08018a43
 8018854:	08018a43 	.word	0x08018a43
 8018858:	08018a43 	.word	0x08018a43
 801885c:	08018a43 	.word	0x08018a43
 8018860:	08018a43 	.word	0x08018a43
 8018864:	08018a43 	.word	0x08018a43
 8018868:	08018a43 	.word	0x08018a43
 801886c:	08018a43 	.word	0x08018a43
 8018870:	08018a43 	.word	0x08018a43
 8018874:	08018a43 	.word	0x08018a43
 8018878:	08018a43 	.word	0x08018a43
 801887c:	08018a43 	.word	0x08018a43
 8018880:	08018a8b 	.word	0x08018a8b
 8018884:	08018a8b 	.word	0x08018a8b
 8018888:	08018a8b 	.word	0x08018a8b
 801888c:	08018a0d 	.word	0x08018a0d
 8018890:	08018a8b 	.word	0x08018a8b
 8018894:	08018a8b 	.word	0x08018a8b
 8018898:	08018a8b 	.word	0x08018a8b
 801889c:	08018991 	.word	0x08018991
 80188a0:	08018a8b 	.word	0x08018a8b
 80188a4:	08018a8b 	.word	0x08018a8b
 80188a8:	0801895f 	.word	0x0801895f
 80188ac:	08018a8b 	.word	0x08018a8b
 80188b0:	08018a8b 	.word	0x08018a8b
 80188b4:	0801892d 	.word	0x0801892d
 80188b8:	08018a8b 	.word	0x08018a8b
 80188bc:	080188fb 	.word	0x080188fb
 80188c0:	08018a8b 	.word	0x08018a8b
 80188c4:	080188c9 	.word	0x080188c9
				case 34U:
					inst->streaminfo->min_block_size = READ_BITS(16U);
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	2110      	movs	r1, #16
 80188cc:	4618      	mov	r0, r3
 80188ce:	f7ff fa7e 	bl	8017dce <fx_bitstream_try_read_msb>
 80188d2:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80188da:	8a3a      	ldrh	r2, [r7, #16]
 80188dc:	801a      	strh	r2, [r3, #0]
 80188de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80188e2:	2a00      	cmp	r2, #0
 80188e4:	f173 0300 	sbcs.w	r3, r3, #0
 80188e8:	da01      	bge.n	80188ee <_fx_flac_process_in_metadata+0x1a6>
 80188ea:	2300      	movs	r3, #0
 80188ec:	e109      	b.n	8018b02 <_fx_flac_process_in_metadata+0x3ba>
					inst->n_bytes_rem -= 2U;
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	69db      	ldr	r3, [r3, #28]
 80188f2:	1e9a      	subs	r2, r3, #2
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	61da      	str	r2, [r3, #28]
					break;
 80188f8:	e0cc      	b.n	8018a94 <_fx_flac_process_in_metadata+0x34c>
				case 32U:
					inst->streaminfo->max_block_size = READ_BITS(16U);
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	2110      	movs	r1, #16
 80188fe:	4618      	mov	r0, r3
 8018900:	f7ff fa65 	bl	8017dce <fx_bitstream_try_read_msb>
 8018904:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801890c:	8a3a      	ldrh	r2, [r7, #16]
 801890e:	805a      	strh	r2, [r3, #2]
 8018910:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8018914:	2a00      	cmp	r2, #0
 8018916:	f173 0300 	sbcs.w	r3, r3, #0
 801891a:	da01      	bge.n	8018920 <_fx_flac_process_in_metadata+0x1d8>
 801891c:	2300      	movs	r3, #0
 801891e:	e0f0      	b.n	8018b02 <_fx_flac_process_in_metadata+0x3ba>
					inst->n_bytes_rem -= 2U;
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	69db      	ldr	r3, [r3, #28]
 8018924:	1e9a      	subs	r2, r3, #2
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	61da      	str	r2, [r3, #28]
					break;
 801892a:	e0b3      	b.n	8018a94 <_fx_flac_process_in_metadata+0x34c>
				case 30U:
					inst->streaminfo->min_frame_size = READ_BITS(24U);
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	2118      	movs	r1, #24
 8018930:	4618      	mov	r0, r3
 8018932:	f7ff fa4c 	bl	8017dce <fx_bitstream_try_read_msb>
 8018936:	e9c7 0104 	strd	r0, r1, [r7, #16]
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801893e:	693a      	ldr	r2, [r7, #16]
 8018940:	605a      	str	r2, [r3, #4]
 8018942:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8018946:	2a00      	cmp	r2, #0
 8018948:	f173 0300 	sbcs.w	r3, r3, #0
 801894c:	da01      	bge.n	8018952 <_fx_flac_process_in_metadata+0x20a>
 801894e:	2300      	movs	r3, #0
 8018950:	e0d7      	b.n	8018b02 <_fx_flac_process_in_metadata+0x3ba>
					inst->n_bytes_rem -= 3U;
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	69db      	ldr	r3, [r3, #28]
 8018956:	1eda      	subs	r2, r3, #3
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	61da      	str	r2, [r3, #28]
					break;
 801895c:	e09a      	b.n	8018a94 <_fx_flac_process_in_metadata+0x34c>
				case 27U:
					inst->streaminfo->max_frame_size = READ_BITS(24U);
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	2118      	movs	r1, #24
 8018962:	4618      	mov	r0, r3
 8018964:	f7ff fa33 	bl	8017dce <fx_bitstream_try_read_msb>
 8018968:	e9c7 0104 	strd	r0, r1, [r7, #16]
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018970:	693a      	ldr	r2, [r7, #16]
 8018972:	609a      	str	r2, [r3, #8]
 8018974:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8018978:	2a00      	cmp	r2, #0
 801897a:	f173 0300 	sbcs.w	r3, r3, #0
 801897e:	da01      	bge.n	8018984 <_fx_flac_process_in_metadata+0x23c>
 8018980:	2300      	movs	r3, #0
 8018982:	e0be      	b.n	8018b02 <_fx_flac_process_in_metadata+0x3ba>
					inst->n_bytes_rem -= 3U;
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	69db      	ldr	r3, [r3, #28]
 8018988:	1eda      	subs	r2, r3, #3
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	61da      	str	r2, [r3, #28]
					break;
 801898e:	e081      	b.n	8018a94 <_fx_flac_process_in_metadata+0x34c>
				case 24U:
					ENSURE_BITS(28U);
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	211c      	movs	r1, #28
 8018994:	4618      	mov	r0, r3
 8018996:	f7ff fa05 	bl	8017da4 <fx_bitstream_can_read>
 801899a:	4603      	mov	r3, r0
 801899c:	f083 0301 	eor.w	r3, r3, #1
 80189a0:	b2db      	uxtb	r3, r3
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d001      	beq.n	80189aa <_fx_flac_process_in_metadata+0x262>
 80189a6:	2300      	movs	r3, #0
 80189a8:	e0ab      	b.n	8018b02 <_fx_flac_process_in_metadata+0x3ba>
					inst->streaminfo->sample_rate = READ_BITS_FAST(20U);
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	2114      	movs	r1, #20
 80189ae:	4618      	mov	r0, r3
 80189b0:	f7ff fb39 	bl	8018026 <fx_bitstream_read_msb>
 80189b4:	4602      	mov	r2, r0
 80189b6:	460b      	mov	r3, r1
 80189b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80189c0:	693a      	ldr	r2, [r7, #16]
 80189c2:	60da      	str	r2, [r3, #12]
					inst->streaminfo->n_channels = 1U + READ_BITS_FAST(3U);
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	2103      	movs	r1, #3
 80189c8:	4618      	mov	r0, r3
 80189ca:	f7ff fb2c 	bl	8018026 <fx_bitstream_read_msb>
 80189ce:	4602      	mov	r2, r0
 80189d0:	460b      	mov	r3, r1
 80189d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80189d6:	7c3a      	ldrb	r2, [r7, #16]
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80189dc:	3201      	adds	r2, #1
 80189de:	b2d2      	uxtb	r2, r2
 80189e0:	741a      	strb	r2, [r3, #16]
					inst->streaminfo->sample_size = 1U + READ_BITS_FAST(5U);
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	2105      	movs	r1, #5
 80189e6:	4618      	mov	r0, r3
 80189e8:	f7ff fb1d 	bl	8018026 <fx_bitstream_read_msb>
 80189ec:	4602      	mov	r2, r0
 80189ee:	460b      	mov	r3, r1
 80189f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80189f4:	7c3a      	ldrb	r2, [r7, #16]
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80189fa:	3201      	adds	r2, #1
 80189fc:	b2d2      	uxtb	r2, r2
 80189fe:	745a      	strb	r2, [r3, #17]
					inst->n_bytes_rem -= 4U;
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	69db      	ldr	r3, [r3, #28]
 8018a04:	1f1a      	subs	r2, r3, #4
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	61da      	str	r2, [r3, #28]
					break;
 8018a0a:	e043      	b.n	8018a94 <_fx_flac_process_in_metadata+0x34c>
				case 20U:
					inst->streaminfo->n_samples = READ_BITS(36U);
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	2124      	movs	r1, #36	; 0x24
 8018a10:	4618      	mov	r0, r3
 8018a12:	f7ff f9dc 	bl	8017dce <fx_bitstream_try_read_msb>
 8018a16:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8018a1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8018a22:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8018a26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8018a2a:	2a00      	cmp	r2, #0
 8018a2c:	f173 0300 	sbcs.w	r3, r3, #0
 8018a30:	da01      	bge.n	8018a36 <_fx_flac_process_in_metadata+0x2ee>
 8018a32:	2300      	movs	r3, #0
 8018a34:	e065      	b.n	8018b02 <_fx_flac_process_in_metadata+0x3ba>
					inst->n_bytes_rem -= 4U;
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	69db      	ldr	r3, [r3, #28]
 8018a3a:	1f1a      	subs	r2, r3, #4
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	61da      	str	r2, [r3, #28]
					break;
 8018a40:	e028      	b.n	8018a94 <_fx_flac_process_in_metadata+0x34c>
				case 1U ... 16U:
					inst->streaminfo->md5_sum[16U - inst->n_bytes_rem] =
					    READ_BITS(8);
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	2108      	movs	r1, #8
 8018a46:	4618      	mov	r0, r3
 8018a48:	f7ff f9c1 	bl	8017dce <fx_bitstream_try_read_msb>
 8018a4c:	e9c7 0104 	strd	r0, r1, [r7, #16]
					inst->streaminfo->md5_sum[16U - inst->n_bytes_rem] =
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	69db      	ldr	r3, [r3, #28]
 8018a58:	f1c3 0310 	rsb	r3, r3, #16
 8018a5c:	7c39      	ldrb	r1, [r7, #16]
 8018a5e:	4413      	add	r3, r2
 8018a60:	460a      	mov	r2, r1
 8018a62:	f883 2020 	strb.w	r2, [r3, #32]
					    READ_BITS(8);
 8018a66:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8018a6a:	2a00      	cmp	r2, #0
 8018a6c:	f173 0300 	sbcs.w	r3, r3, #0
 8018a70:	da01      	bge.n	8018a76 <_fx_flac_process_in_metadata+0x32e>
 8018a72:	2300      	movs	r3, #0
 8018a74:	e045      	b.n	8018b02 <_fx_flac_process_in_metadata+0x3ba>
					inst->n_bytes_rem -= 1U;
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	69db      	ldr	r3, [r3, #28]
 8018a7a:	1e5a      	subs	r2, r3, #1
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	61da      	str	r2, [r3, #28]
					break;
 8018a80:	e008      	b.n	8018a94 <_fx_flac_process_in_metadata+0x34c>
				case 0U:
					/* Use the FLAC_END_OF_METADATA_SKIP state logic below */
					inst->priv_state = FLAC_METADATA_SKIP;
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	22c9      	movs	r2, #201	; 0xc9
 8018a86:	835a      	strh	r2, [r3, #26]
					break;
 8018a88:	e004      	b.n	8018a94 <_fx_flac_process_in_metadata+0x34c>
				default:
					return _fx_flac_handle_err(inst);
 8018a8a:	6878      	ldr	r0, [r7, #4]
 8018a8c:	f7ff fde6 	bl	801865c <_fx_flac_handle_err>
 8018a90:	4603      	mov	r3, r0
 8018a92:	e036      	b.n	8018b02 <_fx_flac_process_in_metadata+0x3ba>
			}
			break;
 8018a94:	e034      	b.n	8018b00 <_fx_flac_process_in_metadata+0x3b8>
		case FLAC_METADATA_SKIP: {
			const uint8_t n_read =
			    (inst->n_bytes_rem >= 7U) ? 7U : inst->n_bytes_rem;
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	69db      	ldr	r3, [r3, #28]
 8018a9a:	2b07      	cmp	r3, #7
 8018a9c:	bf28      	it	cs
 8018a9e:	2307      	movcs	r3, #7
			const uint8_t n_read =
 8018aa0:	73fb      	strb	r3, [r7, #15]
			if (n_read == 0U) { /* We read all the data for this block */
 8018aa2:	7bfb      	ldrb	r3, [r7, #15]
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d10c      	bne.n	8018ac2 <_fx_flac_process_in_metadata+0x37a>
				if (inst->metadata->is_last) {
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018aac:	781b      	ldrb	r3, [r3, #0]
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d003      	beq.n	8018aba <_fx_flac_process_in_metadata+0x372>
					/* Last metadata block, transition to the next state */
					inst->state = FLAC_END_OF_METADATA;
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	2202      	movs	r2, #2
 8018ab6:	761a      	strb	r2, [r3, #24]
				}
				else {
					/* End of metadata block, read the next one */
					inst->priv_state = FLAC_METADATA_HEADER;
				}
				break;
 8018ab8:	e022      	b.n	8018b00 <_fx_flac_process_in_metadata+0x3b8>
					inst->priv_state = FLAC_METADATA_HEADER;
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	22c8      	movs	r2, #200	; 0xc8
 8018abe:	835a      	strh	r2, [r3, #26]
				break;
 8018ac0:	e01e      	b.n	8018b00 <_fx_flac_process_in_metadata+0x3b8>
			}
			READ_BITS(n_read * 8U);
 8018ac2:	687a      	ldr	r2, [r7, #4]
 8018ac4:	7bfb      	ldrb	r3, [r7, #15]
 8018ac6:	00db      	lsls	r3, r3, #3
 8018ac8:	b2db      	uxtb	r3, r3
 8018aca:	4619      	mov	r1, r3
 8018acc:	4610      	mov	r0, r2
 8018ace:	f7ff f97e 	bl	8017dce <fx_bitstream_try_read_msb>
 8018ad2:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8018ad6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8018ada:	2a00      	cmp	r2, #0
 8018adc:	f173 0300 	sbcs.w	r3, r3, #0
 8018ae0:	da01      	bge.n	8018ae6 <_fx_flac_process_in_metadata+0x39e>
 8018ae2:	2300      	movs	r3, #0
 8018ae4:	e00d      	b.n	8018b02 <_fx_flac_process_in_metadata+0x3ba>
			inst->n_bytes_rem -= n_read;
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	69da      	ldr	r2, [r3, #28]
 8018aea:	7bfb      	ldrb	r3, [r7, #15]
 8018aec:	1ad2      	subs	r2, r2, r3
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	61da      	str	r2, [r3, #28]
			break;
 8018af2:	e005      	b.n	8018b00 <_fx_flac_process_in_metadata+0x3b8>
		}
		default:
			return _fx_flac_handle_err(inst); /* Internal error */
 8018af4:	6878      	ldr	r0, [r7, #4]
 8018af6:	f7ff fdb1 	bl	801865c <_fx_flac_handle_err>
 8018afa:	4603      	mov	r3, r0
 8018afc:	e001      	b.n	8018b02 <_fx_flac_process_in_metadata+0x3ba>
			break;
 8018afe:	bf00      	nop
	}
	return true;
 8018b00:	2301      	movs	r3, #1
}
 8018b02:	4618      	mov	r0, r3
 8018b04:	3718      	adds	r7, #24
 8018b06:	46bd      	mov	sp, r7
 8018b08:	bd80      	pop	{r7, pc}
 8018b0a:	bf00      	nop

08018b0c <_fx_flac_process_search_frame>:

static bool _fx_flac_process_search_frame(fx_flac_t *inst)
{
 8018b0c:	b580      	push	{r7, lr}
 8018b0e:	b088      	sub	sp, #32
 8018b10:	af00      	add	r7, sp, #0
 8018b12:	6078      	str	r0, [r7, #4]
	int64_t tmp_; /* Used by the READ_BITS macro */
	fx_flac_frame_header_t *fh = inst->frame_header;
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018b18:	61fb      	str	r3, [r7, #28]
	fx_flac_streaminfo_t *si = inst->streaminfo;
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b1e:	61bb      	str	r3, [r7, #24]
	switch (inst->priv_state) {
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	8b5b      	ldrh	r3, [r3, #26]
 8018b24:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8018b28:	d01c      	beq.n	8018b64 <_fx_flac_process_search_frame+0x58>
 8018b2a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8018b2e:	f2c0 81e2 	blt.w	8018ef6 <_fx_flac_process_search_frame+0x3ea>
 8018b32:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 8018b36:	f280 81de 	bge.w	8018ef6 <_fx_flac_process_search_frame+0x3ea>
 8018b3a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8018b3e:	f2c0 81da 	blt.w	8018ef6 <_fx_flac_process_search_frame+0x3ea>
 8018b42:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8018b46:	2b03      	cmp	r3, #3
 8018b48:	f200 81d5 	bhi.w	8018ef6 <_fx_flac_process_search_frame+0x3ea>
 8018b4c:	a201      	add	r2, pc, #4	; (adr r2, 8018b54 <_fx_flac_process_search_frame+0x48>)
 8018b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b52:	bf00      	nop
 8018b54:	08018c2d 	.word	0x08018c2d
 8018b58:	08018d7f 	.word	0x08018d7f
 8018b5c:	08018db3 	.word	0x08018db3
 8018b60:	08018e95 	.word	0x08018e95
		case FLAC_FRAME_SYNC:
			/* Synchronise with the underlying bytestream */
			SYNC_BYTESTREAM();
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	7c1b      	ldrb	r3, [r3, #16]
 8018b68:	f003 0307 	and.w	r3, r3, #7
 8018b6c:	73fb      	strb	r3, [r7, #15]
 8018b6e:	7bfb      	ldrb	r3, [r7, #15]
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d012      	beq.n	8018b9a <_fx_flac_process_search_frame+0x8e>
 8018b74:	687a      	ldr	r2, [r7, #4]
 8018b76:	7bfb      	ldrb	r3, [r7, #15]
 8018b78:	f1c3 0308 	rsb	r3, r3, #8
 8018b7c:	b2db      	uxtb	r3, r3
 8018b7e:	4619      	mov	r1, r3
 8018b80:	4610      	mov	r0, r2
 8018b82:	f7ff f924 	bl	8017dce <fx_bitstream_try_read_msb>
 8018b86:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8018b8a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8018b8e:	2a00      	cmp	r2, #0
 8018b90:	f173 0300 	sbcs.w	r3, r3, #0
 8018b94:	da01      	bge.n	8018b9a <_fx_flac_process_search_frame+0x8e>
 8018b96:	2300      	movs	r3, #0
 8018b98:	e1b3      	b.n	8018f02 <_fx_flac_process_search_frame+0x3f6>

			ENSURE_BITS(15U);
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	210f      	movs	r1, #15
 8018b9e:	4618      	mov	r0, r3
 8018ba0:	f7ff f900 	bl	8017da4 <fx_bitstream_can_read>
 8018ba4:	4603      	mov	r3, r0
 8018ba6:	f083 0301 	eor.w	r3, r3, #1
 8018baa:	b2db      	uxtb	r3, r3
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d001      	beq.n	8018bb4 <_fx_flac_process_search_frame+0xa8>
 8018bb0:	2300      	movs	r3, #0
 8018bb2:	e1a6      	b.n	8018f02 <_fx_flac_process_search_frame+0x3f6>
			uint16_t sync_code = PEEK_BITS(15U);
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	210f      	movs	r1, #15
 8018bb8:	4618      	mov	r0, r3
 8018bba:	f7ff f927 	bl	8017e0c <fx_bitstream_try_peek_msb>
 8018bbe:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8018bc2:	693b      	ldr	r3, [r7, #16]
 8018bc4:	81bb      	strh	r3, [r7, #12]
 8018bc6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8018bca:	2a00      	cmp	r2, #0
 8018bcc:	f173 0300 	sbcs.w	r3, r3, #0
 8018bd0:	da01      	bge.n	8018bd6 <_fx_flac_process_search_frame+0xca>
 8018bd2:	2300      	movs	r3, #0
 8018bd4:	e195      	b.n	8018f02 <_fx_flac_process_search_frame+0x3f6>
			if (sync_code != 0x7FFCU) {
 8018bd6:	89bb      	ldrh	r3, [r7, #12]
 8018bd8:	f647 72fc 	movw	r2, #32764	; 0x7ffc
 8018bdc:	4293      	cmp	r3, r2
 8018bde:	d010      	beq.n	8018c02 <_fx_flac_process_search_frame+0xf6>
				READ_BITS(8U); /* Next byte (assume frames are byte aligned). */
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	2108      	movs	r1, #8
 8018be4:	4618      	mov	r0, r3
 8018be6:	f7ff f8f2 	bl	8017dce <fx_bitstream_try_read_msb>
 8018bea:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8018bee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8018bf2:	2a00      	cmp	r2, #0
 8018bf4:	f173 0300 	sbcs.w	r3, r3, #0
 8018bf8:	da01      	bge.n	8018bfe <_fx_flac_process_search_frame+0xf2>
 8018bfa:	2300      	movs	r3, #0
 8018bfc:	e181      	b.n	8018f02 <_fx_flac_process_search_frame+0x3f6>
				return true;
 8018bfe:	2301      	movs	r3, #1
 8018c00:	e17f      	b.n	8018f02 <_fx_flac_process_search_frame+0x3f6>
			}
			else {
				inst->crc8 = 0U; /* Reset the checksums */
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	2200      	movs	r2, #0
 8018c06:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				inst->crc16 = 0U;
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	2200      	movs	r2, #0
 8018c0e:	861a      	strh	r2, [r3, #48]	; 0x30
				inst->priv_state = FLAC_FRAME_HEADER;
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8018c16:	835a      	strh	r2, [r3, #26]
				READ_BITS_FAST_DCRC(15U);
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	210f      	movs	r1, #15
 8018c1c:	4618      	mov	r0, r3
 8018c1e:	f7ff fa02 	bl	8018026 <fx_bitstream_read_msb>
 8018c22:	4602      	mov	r2, r0
 8018c24:	460b      	mov	r3, r1
 8018c26:	e9c7 2304 	strd	r2, r3, [r7, #16]
			}
			break;
 8018c2a:	e169      	b.n	8018f00 <_fx_flac_process_search_frame+0x3f4>
		case FLAC_FRAME_HEADER:
			ENSURE_BITS(17U);
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	2111      	movs	r1, #17
 8018c30:	4618      	mov	r0, r3
 8018c32:	f7ff f8b7 	bl	8017da4 <fx_bitstream_can_read>
 8018c36:	4603      	mov	r3, r0
 8018c38:	f083 0301 	eor.w	r3, r3, #1
 8018c3c:	b2db      	uxtb	r3, r3
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d001      	beq.n	8018c46 <_fx_flac_process_search_frame+0x13a>
 8018c42:	2300      	movs	r3, #0
 8018c44:	e15d      	b.n	8018f02 <_fx_flac_process_search_frame+0x3f6>

			/* Read the frame header bits */
			fh->blocking_strategy =
			    (fx_flac_blocking_strategy_t)READ_BITS_FAST_DCRC(1U);
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	2101      	movs	r1, #1
 8018c4a:	4618      	mov	r0, r3
 8018c4c:	f7ff f9eb 	bl	8018026 <fx_bitstream_read_msb>
 8018c50:	4602      	mov	r2, r0
 8018c52:	460b      	mov	r3, r1
 8018c54:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8018c58:	7c3a      	ldrb	r2, [r7, #16]
			fh->blocking_strategy =
 8018c5a:	69fb      	ldr	r3, [r7, #28]
 8018c5c:	701a      	strb	r2, [r3, #0]
			fh->block_size_enum = (fx_flac_block_size_t)READ_BITS_FAST_DCRC(4U);
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	2104      	movs	r1, #4
 8018c62:	4618      	mov	r0, r3
 8018c64:	f7ff f9df 	bl	8018026 <fx_bitstream_read_msb>
 8018c68:	4602      	mov	r2, r0
 8018c6a:	460b      	mov	r3, r1
 8018c6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8018c70:	7c3a      	ldrb	r2, [r7, #16]
 8018c72:	69fb      	ldr	r3, [r7, #28]
 8018c74:	705a      	strb	r2, [r3, #1]
			fh->sample_rate_enum =
			    (fx_flac_sample_rate_t)READ_BITS_FAST_DCRC(4U);
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	2104      	movs	r1, #4
 8018c7a:	4618      	mov	r0, r3
 8018c7c:	f7ff f9d3 	bl	8018026 <fx_bitstream_read_msb>
 8018c80:	4602      	mov	r2, r0
 8018c82:	460b      	mov	r3, r1
 8018c84:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8018c88:	7c3a      	ldrb	r2, [r7, #16]
			fh->sample_rate_enum =
 8018c8a:	69fb      	ldr	r3, [r7, #28]
 8018c8c:	709a      	strb	r2, [r3, #2]
			fh->channel_assignment =
			    (fx_flac_channel_assignment_t)READ_BITS_FAST_DCRC(4U);
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	2104      	movs	r1, #4
 8018c92:	4618      	mov	r0, r3
 8018c94:	f7ff f9c7 	bl	8018026 <fx_bitstream_read_msb>
 8018c98:	4602      	mov	r2, r0
 8018c9a:	460b      	mov	r3, r1
 8018c9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8018ca0:	7c3a      	ldrb	r2, [r7, #16]
			fh->channel_assignment =
 8018ca2:	69fb      	ldr	r3, [r7, #28]
 8018ca4:	70da      	strb	r2, [r3, #3]
			fh->sample_size_enum =
			    (fx_flac_sample_size_t)READ_BITS_FAST_DCRC(3U);
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	2103      	movs	r1, #3
 8018caa:	4618      	mov	r0, r3
 8018cac:	f7ff f9bb 	bl	8018026 <fx_bitstream_read_msb>
 8018cb0:	4602      	mov	r2, r0
 8018cb2:	460b      	mov	r3, r1
 8018cb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8018cb8:	7c3a      	ldrb	r2, [r7, #16]
			fh->sample_size_enum =
 8018cba:	69fb      	ldr	r3, [r7, #28]
 8018cbc:	711a      	strb	r2, [r3, #4]
			READ_BITS_FAST_DCRC(1U);
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	2101      	movs	r1, #1
 8018cc2:	4618      	mov	r0, r3
 8018cc4:	f7ff f9af 	bl	8018026 <fx_bitstream_read_msb>
 8018cc8:	4602      	mov	r2, r0
 8018cca:	460b      	mov	r3, r1
 8018ccc:	e9c7 2304 	strd	r2, r3, [r7, #16]
			if (tmp_ != 0U || fh->channel_assignment > MID_SIDE_STEREO) {
 8018cd0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8018cd4:	4313      	orrs	r3, r2
 8018cd6:	d103      	bne.n	8018ce0 <_fx_flac_process_search_frame+0x1d4>
 8018cd8:	69fb      	ldr	r3, [r7, #28]
 8018cda:	78db      	ldrb	r3, [r3, #3]
 8018cdc:	2b0a      	cmp	r3, #10
 8018cde:	d904      	bls.n	8018cea <_fx_flac_process_search_frame+0x1de>
				return _fx_flac_handle_err(inst); /* Invalid header */
 8018ce0:	6878      	ldr	r0, [r7, #4]
 8018ce2:	f7ff fcbb 	bl	801865c <_fx_flac_handle_err>
 8018ce6:	4603      	mov	r3, r0
 8018ce8:	e10b      	b.n	8018f02 <_fx_flac_process_search_frame+0x3f6>
			}

			/* Copy sample rate and sample size from the streaminfo */
			fh->sample_rate = si->sample_rate;
 8018cea:	69bb      	ldr	r3, [r7, #24]
 8018cec:	68da      	ldr	r2, [r3, #12]
 8018cee:	69fb      	ldr	r3, [r7, #28]
 8018cf0:	60da      	str	r2, [r3, #12]
			fh->sample_size = si->sample_size;
 8018cf2:	69bb      	ldr	r3, [r7, #24]
 8018cf4:	7c5a      	ldrb	r2, [r3, #17]
 8018cf6:	69fb      	ldr	r3, [r7, #28]
 8018cf8:	745a      	strb	r2, [r3, #17]

			/* Decode the individual enums */
			if (!_fx_flac_decode_block_size(fh->block_size_enum,
 8018cfa:	69fb      	ldr	r3, [r7, #28]
 8018cfc:	785a      	ldrb	r2, [r3, #1]
 8018cfe:	69fb      	ldr	r3, [r7, #28]
 8018d00:	3308      	adds	r3, #8
 8018d02:	4619      	mov	r1, r3
 8018d04:	4610      	mov	r0, r2
 8018d06:	f7ff faad 	bl	8018264 <_fx_flac_decode_block_size>
 8018d0a:	4603      	mov	r3, r0
 8018d0c:	f083 0301 	eor.w	r3, r3, #1
 8018d10:	b2db      	uxtb	r3, r3
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d129      	bne.n	8018d6a <_fx_flac_process_search_frame+0x25e>
			                                &fh->block_size) ||
			    !_fx_flac_decode_sample_rate(fh->sample_rate_enum,
 8018d16:	69fb      	ldr	r3, [r7, #28]
 8018d18:	789a      	ldrb	r2, [r3, #2]
 8018d1a:	69fb      	ldr	r3, [r7, #28]
 8018d1c:	330c      	adds	r3, #12
 8018d1e:	4619      	mov	r1, r3
 8018d20:	4610      	mov	r0, r2
 8018d22:	f7ff fabf 	bl	80182a4 <_fx_flac_decode_sample_rate>
 8018d26:	4603      	mov	r3, r0
 8018d28:	f083 0301 	eor.w	r3, r3, #1
 8018d2c:	b2db      	uxtb	r3, r3
			                                &fh->block_size) ||
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d11b      	bne.n	8018d6a <_fx_flac_process_search_frame+0x25e>
			                                 &fh->sample_rate) ||
			    !_fx_flac_decode_sample_size(fh->sample_size_enum,
 8018d32:	69fb      	ldr	r3, [r7, #28]
 8018d34:	791a      	ldrb	r2, [r3, #4]
 8018d36:	69fb      	ldr	r3, [r7, #28]
 8018d38:	3311      	adds	r3, #17
 8018d3a:	4619      	mov	r1, r3
 8018d3c:	4610      	mov	r0, r2
 8018d3e:	f7ff fad1 	bl	80182e4 <_fx_flac_decode_sample_size>
 8018d42:	4603      	mov	r3, r0
 8018d44:	f083 0301 	eor.w	r3, r3, #1
 8018d48:	b2db      	uxtb	r3, r3
			                                 &fh->sample_rate) ||
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d10d      	bne.n	8018d6a <_fx_flac_process_search_frame+0x25e>
			                                 &fh->sample_size) ||
			    !_fx_flac_decode_channel_count(fh->channel_assignment,
 8018d4e:	69fb      	ldr	r3, [r7, #28]
 8018d50:	78da      	ldrb	r2, [r3, #3]
 8018d52:	69fb      	ldr	r3, [r7, #28]
 8018d54:	3310      	adds	r3, #16
 8018d56:	4619      	mov	r1, r3
 8018d58:	4610      	mov	r0, r2
 8018d5a:	f7ff fae3 	bl	8018324 <_fx_flac_decode_channel_count>
 8018d5e:	4603      	mov	r3, r0
 8018d60:	f083 0301 	eor.w	r3, r3, #1
 8018d64:	b2db      	uxtb	r3, r3
			                                 &fh->sample_size) ||
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	d004      	beq.n	8018d74 <_fx_flac_process_search_frame+0x268>
			                                   &fh->channel_count)) {
				inst->priv_state = FLAC_FRAME_SYNC; /* Got invalid value */
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8018d70:	835a      	strh	r2, [r3, #26]
				break;
 8018d72:	e0c5      	b.n	8018f00 <_fx_flac_process_search_frame+0x3f4>
			}
			inst->priv_state = FLAC_FRAME_HEADER_SYNC_INFO;
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	f240 1291 	movw	r2, #401	; 0x191
 8018d7a:	835a      	strh	r2, [r3, #26]
			break;
 8018d7c:	e0c0      	b.n	8018f00 <_fx_flac_process_search_frame+0x3f4>
		case FLAC_FRAME_HEADER_SYNC_INFO:
			if (!_fx_flac_reader_utf8_coded_int(
			        inst, (fh->blocking_strategy == BLK_VARIABLE) ? 7U : 6U,
 8018d7e:	69fb      	ldr	r3, [r7, #28]
 8018d80:	781b      	ldrb	r3, [r3, #0]
			if (!_fx_flac_reader_utf8_coded_int(
 8018d82:	2b01      	cmp	r3, #1
 8018d84:	d101      	bne.n	8018d8a <_fx_flac_process_search_frame+0x27e>
 8018d86:	2107      	movs	r1, #7
 8018d88:	e000      	b.n	8018d8c <_fx_flac_process_search_frame+0x280>
 8018d8a:	2106      	movs	r1, #6
 8018d8c:	69fb      	ldr	r3, [r7, #28]
 8018d8e:	3318      	adds	r3, #24
 8018d90:	461a      	mov	r2, r3
 8018d92:	6878      	ldr	r0, [r7, #4]
 8018d94:	f7ff fbdb 	bl	801854e <_fx_flac_reader_utf8_coded_int>
 8018d98:	4603      	mov	r3, r0
 8018d9a:	f083 0301 	eor.w	r3, r3, #1
 8018d9e:	b2db      	uxtb	r3, r3
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d001      	beq.n	8018da8 <_fx_flac_process_search_frame+0x29c>
			        &fh->sync_info)) {
				return false;
 8018da4:	2300      	movs	r3, #0
 8018da6:	e0ac      	b.n	8018f02 <_fx_flac_process_search_frame+0x3f6>
			}
			inst->priv_state = FLAC_FRAME_HEADER_AUX;
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8018dae:	835a      	strh	r2, [r3, #26]
			break;
 8018db0:	e0a6      	b.n	8018f00 <_fx_flac_process_search_frame+0x3f4>
		case FLAC_FRAME_HEADER_AUX:
			ENSURE_BITS(32U);
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	2120      	movs	r1, #32
 8018db6:	4618      	mov	r0, r3
 8018db8:	f7fe fff4 	bl	8017da4 <fx_bitstream_can_read>
 8018dbc:	4603      	mov	r3, r0
 8018dbe:	f083 0301 	eor.w	r3, r3, #1
 8018dc2:	b2db      	uxtb	r3, r3
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d001      	beq.n	8018dcc <_fx_flac_process_search_frame+0x2c0>
 8018dc8:	2300      	movs	r3, #0
 8018dca:	e09a      	b.n	8018f02 <_fx_flac_process_search_frame+0x3f6>
			/* Read block size/sample rate if not directly packed into the
			   previous header */
			switch (fh->block_size_enum) {
 8018dcc:	69fb      	ldr	r3, [r7, #28]
 8018dce:	785b      	ldrb	r3, [r3, #1]
 8018dd0:	2b06      	cmp	r3, #6
 8018dd2:	d002      	beq.n	8018dda <_fx_flac_process_search_frame+0x2ce>
 8018dd4:	2b07      	cmp	r3, #7
 8018dd6:	d00e      	beq.n	8018df6 <_fx_flac_process_search_frame+0x2ea>
					break;
				case BLK_SIZE_READ_16BIT:
					fh->block_size = 1U + READ_BITS_FAST_DCRC(16U);
					break;
				default:
					break;
 8018dd8:	e01b      	b.n	8018e12 <_fx_flac_process_search_frame+0x306>
					fh->block_size = 1U + READ_BITS_FAST_DCRC(8U);
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	2108      	movs	r1, #8
 8018dde:	4618      	mov	r0, r3
 8018de0:	f7ff f921 	bl	8018026 <fx_bitstream_read_msb>
 8018de4:	4602      	mov	r2, r0
 8018de6:	460b      	mov	r3, r1
 8018de8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8018dec:	693b      	ldr	r3, [r7, #16]
 8018dee:	1c5a      	adds	r2, r3, #1
 8018df0:	69fb      	ldr	r3, [r7, #28]
 8018df2:	609a      	str	r2, [r3, #8]
					break;
 8018df4:	e00d      	b.n	8018e12 <_fx_flac_process_search_frame+0x306>
					fh->block_size = 1U + READ_BITS_FAST_DCRC(16U);
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	2110      	movs	r1, #16
 8018dfa:	4618      	mov	r0, r3
 8018dfc:	f7ff f913 	bl	8018026 <fx_bitstream_read_msb>
 8018e00:	4602      	mov	r2, r0
 8018e02:	460b      	mov	r3, r1
 8018e04:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8018e08:	693b      	ldr	r3, [r7, #16]
 8018e0a:	1c5a      	adds	r2, r3, #1
 8018e0c:	69fb      	ldr	r3, [r7, #28]
 8018e0e:	609a      	str	r2, [r3, #8]
					break;
 8018e10:	bf00      	nop
			}
			switch (fh->sample_rate_enum) {
 8018e12:	69fb      	ldr	r3, [r7, #28]
 8018e14:	789b      	ldrb	r3, [r3, #2]
 8018e16:	2b0e      	cmp	r3, #14
 8018e18:	d024      	beq.n	8018e64 <_fx_flac_process_search_frame+0x358>
 8018e1a:	2b0e      	cmp	r3, #14
 8018e1c:	dc34      	bgt.n	8018e88 <_fx_flac_process_search_frame+0x37c>
 8018e1e:	2b0c      	cmp	r3, #12
 8018e20:	d002      	beq.n	8018e28 <_fx_flac_process_search_frame+0x31c>
 8018e22:	2b0d      	cmp	r3, #13
 8018e24:	d011      	beq.n	8018e4a <_fx_flac_process_search_frame+0x33e>
					break;
				case FS_READ_16BIT_DHZ:
					fh->sample_rate = 10UL * READ_BITS_FAST_DCRC(16U);
					break;
				default:
					break;
 8018e26:	e02f      	b.n	8018e88 <_fx_flac_process_search_frame+0x37c>
					fh->sample_rate = 1000UL * READ_BITS_FAST_DCRC(8U);
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	2108      	movs	r1, #8
 8018e2c:	4618      	mov	r0, r3
 8018e2e:	f7ff f8fa 	bl	8018026 <fx_bitstream_read_msb>
 8018e32:	4602      	mov	r2, r0
 8018e34:	460b      	mov	r3, r1
 8018e36:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8018e3a:	693b      	ldr	r3, [r7, #16]
 8018e3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018e40:	fb02 f203 	mul.w	r2, r2, r3
 8018e44:	69fb      	ldr	r3, [r7, #28]
 8018e46:	60da      	str	r2, [r3, #12]
					break;
 8018e48:	e01f      	b.n	8018e8a <_fx_flac_process_search_frame+0x37e>
					fh->sample_rate = READ_BITS_FAST_DCRC(16U);
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	2110      	movs	r1, #16
 8018e4e:	4618      	mov	r0, r3
 8018e50:	f7ff f8e9 	bl	8018026 <fx_bitstream_read_msb>
 8018e54:	4602      	mov	r2, r0
 8018e56:	460b      	mov	r3, r1
 8018e58:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8018e5c:	693a      	ldr	r2, [r7, #16]
 8018e5e:	69fb      	ldr	r3, [r7, #28]
 8018e60:	60da      	str	r2, [r3, #12]
					break;
 8018e62:	e012      	b.n	8018e8a <_fx_flac_process_search_frame+0x37e>
					fh->sample_rate = 10UL * READ_BITS_FAST_DCRC(16U);
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	2110      	movs	r1, #16
 8018e68:	4618      	mov	r0, r3
 8018e6a:	f7ff f8dc 	bl	8018026 <fx_bitstream_read_msb>
 8018e6e:	4602      	mov	r2, r0
 8018e70:	460b      	mov	r3, r1
 8018e72:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8018e76:	693a      	ldr	r2, [r7, #16]
 8018e78:	4613      	mov	r3, r2
 8018e7a:	009b      	lsls	r3, r3, #2
 8018e7c:	4413      	add	r3, r2
 8018e7e:	005b      	lsls	r3, r3, #1
 8018e80:	461a      	mov	r2, r3
 8018e82:	69fb      	ldr	r3, [r7, #28]
 8018e84:	60da      	str	r2, [r3, #12]
					break;
 8018e86:	e000      	b.n	8018e8a <_fx_flac_process_search_frame+0x37e>
					break;
 8018e88:	bf00      	nop
			}
			inst->priv_state = FLAC_FRAME_HEADER_CRC;
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	f240 1293 	movw	r2, #403	; 0x193
 8018e90:	835a      	strh	r2, [r3, #26]
			break;
 8018e92:	e035      	b.n	8018f00 <_fx_flac_process_search_frame+0x3f4>
		case FLAC_FRAME_HEADER_CRC:
			/* Read the CRC8 checksum, make sure it equals the checksum written
			   to the header. If not, this is not a valid header. Continue
			   searching. */
			fh->crc8 = READ_BITS_CRC(8U);
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	2108      	movs	r1, #8
 8018e98:	4618      	mov	r0, r3
 8018e9a:	f7fe ff98 	bl	8017dce <fx_bitstream_try_read_msb>
 8018e9e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8018ea2:	7c3a      	ldrb	r2, [r7, #16]
 8018ea4:	69fb      	ldr	r3, [r7, #28]
 8018ea6:	f883 2020 	strb.w	r2, [r3, #32]
 8018eaa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8018eae:	2a00      	cmp	r2, #0
 8018eb0:	f173 0300 	sbcs.w	r3, r3, #0
 8018eb4:	da01      	bge.n	8018eba <_fx_flac_process_search_frame+0x3ae>
 8018eb6:	2300      	movs	r3, #0
 8018eb8:	e023      	b.n	8018f02 <_fx_flac_process_search_frame+0x3f6>
				return _fx_flac_handle_err(inst);
			}
#endif

			/* Make sure the decode has enough space */
			if ((fh->block_size > inst->max_block_size) ||
 8018eba:	69fb      	ldr	r3, [r7, #28]
 8018ebc:	689b      	ldr	r3, [r3, #8]
 8018ebe:	687a      	ldr	r2, [r7, #4]
 8018ec0:	8c12      	ldrh	r2, [r2, #32]
 8018ec2:	4293      	cmp	r3, r2
 8018ec4:	d806      	bhi.n	8018ed4 <_fx_flac_process_search_frame+0x3c8>
			    (fh->channel_count > inst->max_channels)) {
 8018ec6:	69fb      	ldr	r3, [r7, #28]
 8018ec8:	7c1a      	ldrb	r2, [r3, #16]
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
			if ((fh->block_size > inst->max_block_size) ||
 8018ed0:	429a      	cmp	r2, r3
 8018ed2:	d904      	bls.n	8018ede <_fx_flac_process_search_frame+0x3d2>
				return _fx_flac_handle_err(inst);
 8018ed4:	6878      	ldr	r0, [r7, #4]
 8018ed6:	f7ff fbc1 	bl	801865c <_fx_flac_handle_err>
 8018eda:	4603      	mov	r3, r0
 8018edc:	e011      	b.n	8018f02 <_fx_flac_process_search_frame+0x3f6>
			}

			/* Decode the subframes */
			inst->state = FLAC_IN_FRAME;
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	2204      	movs	r2, #4
 8018ee2:	761a      	strb	r2, [r3, #24]
			inst->priv_state = FLAC_SUBFRAME_HEADER;
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8018eea:	835a      	strh	r2, [r3, #26]
			inst->chan_cur = 0U; /* Start with the first channel */
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	2200      	movs	r2, #0
 8018ef0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			break;
 8018ef4:	e004      	b.n	8018f00 <_fx_flac_process_search_frame+0x3f4>
		default:
			return _fx_flac_handle_err(inst);
 8018ef6:	6878      	ldr	r0, [r7, #4]
 8018ef8:	f7ff fbb0 	bl	801865c <_fx_flac_handle_err>
 8018efc:	4603      	mov	r3, r0
 8018efe:	e000      	b.n	8018f02 <_fx_flac_process_search_frame+0x3f6>
	}
	return true;
 8018f00:	2301      	movs	r3, #1
}
 8018f02:	4618      	mov	r0, r3
 8018f04:	3720      	adds	r7, #32
 8018f06:	46bd      	mov	sp, r7
 8018f08:	bd80      	pop	{r7, pc}
 8018f0a:	bf00      	nop

08018f0c <_fx_flac_process_in_frame>:

static bool _fx_flac_process_in_frame(fx_flac_t *inst)
{
 8018f0c:	b580      	push	{r7, lr}
 8018f0e:	b09a      	sub	sp, #104	; 0x68
 8018f10:	af02      	add	r7, sp, #8
 8018f12:	6078      	str	r0, [r7, #4]
	int64_t tmp_; /* Used by the READ_BITS macro */
	fx_flac_frame_header_t *fh = inst->frame_header;
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f18:	647b      	str	r3, [r7, #68]	; 0x44
	fx_flac_subframe_header_t *sfh = inst->subframe_header;
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f1e:	643b      	str	r3, [r7, #64]	; 0x40
	int32_t *blk = inst->blkbuf[inst->chan_cur % FLAC_MAX_CHANNEL_COUNT];
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8018f26:	f003 0207 	and.w	r2, r3, #7
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	3212      	adds	r2, #18
 8018f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018f32:	63fb      	str	r3, [r7, #60]	; 0x3c
	const uint32_t blk_n = fh->block_size;
 8018f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018f36:	689b      	ldr	r3, [r3, #8]
 8018f38:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Figure out the number of bits to read for sample. This depends on the
	   channel assignment. */
	uint8_t bps = fh->sample_size - sfh->wasted_bits;
 8018f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018f3c:	7c5a      	ldrb	r2, [r3, #17]
 8018f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f40:	789b      	ldrb	r3, [r3, #2]
 8018f42:	1ad3      	subs	r3, r2, r3
 8018f44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if ((fh->channel_assignment == LEFT_SIDE_STEREO && inst->chan_cur == 1) ||
 8018f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018f4a:	78db      	ldrb	r3, [r3, #3]
 8018f4c:	2b08      	cmp	r3, #8
 8018f4e:	d104      	bne.n	8018f5a <_fx_flac_process_in_frame+0x4e>
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8018f56:	2b01      	cmp	r3, #1
 8018f58:	d011      	beq.n	8018f7e <_fx_flac_process_in_frame+0x72>
	    (fh->channel_assignment == RIGHT_SIDE_STEREO && inst->chan_cur == 0) ||
 8018f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018f5c:	78db      	ldrb	r3, [r3, #3]
	if ((fh->channel_assignment == LEFT_SIDE_STEREO && inst->chan_cur == 1) ||
 8018f5e:	2b09      	cmp	r3, #9
 8018f60:	d104      	bne.n	8018f6c <_fx_flac_process_in_frame+0x60>
	    (fh->channel_assignment == RIGHT_SIDE_STEREO && inst->chan_cur == 0) ||
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d008      	beq.n	8018f7e <_fx_flac_process_in_frame+0x72>
	    (fh->channel_assignment == MID_SIDE_STEREO && inst->chan_cur == 1)) {
 8018f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018f6e:	78db      	ldrb	r3, [r3, #3]
	    (fh->channel_assignment == RIGHT_SIDE_STEREO && inst->chan_cur == 0) ||
 8018f70:	2b0a      	cmp	r3, #10
 8018f72:	d109      	bne.n	8018f88 <_fx_flac_process_in_frame+0x7c>
	    (fh->channel_assignment == MID_SIDE_STEREO && inst->chan_cur == 1)) {
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8018f7a:	2b01      	cmp	r3, #1
 8018f7c:	d104      	bne.n	8018f88 <_fx_flac_process_in_frame+0x7c>
		bps++;
 8018f7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018f82:	3301      	adds	r3, #1
 8018f84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}

	/* Discard frames with invalid bits per sample values */
	if (bps == 0U || bps > 32U) {
 8018f88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d003      	beq.n	8018f98 <_fx_flac_process_in_frame+0x8c>
 8018f90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018f94:	2b20      	cmp	r3, #32
 8018f96:	d905      	bls.n	8018fa4 <_fx_flac_process_in_frame+0x98>
		return _fx_flac_handle_err(inst);
 8018f98:	6878      	ldr	r0, [r7, #4]
 8018f9a:	f7ff fb5f 	bl	801865c <_fx_flac_handle_err>
 8018f9e:	4603      	mov	r3, r0
 8018fa0:	f000 bcc9 	b.w	8019936 <_fx_flac_process_in_frame+0xa2a>
	}

	/* This flag is set to false whenever a state in the state machine
	   encounters and error. */
	switch (inst->priv_state) {
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	8b5b      	ldrh	r3, [r3, #26]
 8018fa8:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8018fac:	2b0f      	cmp	r3, #15
 8018fae:	f200 84ba 	bhi.w	8019926 <_fx_flac_process_in_frame+0xa1a>
 8018fb2:	a201      	add	r2, pc, #4	; (adr r2, 8018fb8 <_fx_flac_process_in_frame+0xac>)
 8018fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018fb8:	08018ff9 	.word	0x08018ff9
 8018fbc:	08019927 	.word	0x08019927
 8018fc0:	08019223 	.word	0x08019223
 8018fc4:	080192ab 	.word	0x080192ab
 8018fc8:	08019469 	.word	0x08019469
 8018fcc:	080192ab 	.word	0x080192ab
 8018fd0:	0801934f 	.word	0x0801934f
 8018fd4:	08019451 	.word	0x08019451
 8018fd8:	08019469 	.word	0x08019469
 8018fdc:	080194d9 	.word	0x080194d9
 8018fe0:	080196b7 	.word	0x080196b7
 8018fe4:	080196b7 	.word	0x080196b7
 8018fe8:	080196c9 	.word	0x080196c9
 8018fec:	08019773 	.word	0x08019773
 8018ff0:	080192ab 	.word	0x080192ab
 8018ff4:	080197c1 	.word	0x080197c1
		case FLAC_SUBFRAME_HEADER: {
			ENSURE_BITS(40U);
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	2128      	movs	r1, #40	; 0x28
 8018ffc:	4618      	mov	r0, r3
 8018ffe:	f7fe fed1 	bl	8017da4 <fx_bitstream_can_read>
 8019002:	4603      	mov	r3, r0
 8019004:	f083 0301 	eor.w	r3, r3, #1
 8019008:	b2db      	uxtb	r3, r3
 801900a:	2b00      	cmp	r3, #0
 801900c:	d002      	beq.n	8019014 <_fx_flac_process_in_frame+0x108>
 801900e:	2300      	movs	r3, #0
 8019010:	f000 bc91 	b.w	8019936 <_fx_flac_process_in_frame+0xa2a>

			/* Reset the block write cursor, make sure initial blk sample is set
			   to zero for zero-order fixed LPC */
			inst->blk_cur = 0U;
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	2200      	movs	r2, #0
 8019018:	859a      	strh	r2, [r3, #44]	; 0x2c
			blk[0U] = 0U;
 801901a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801901c:	2200      	movs	r2, #0
 801901e:	601a      	str	r2, [r3, #0]

			/* Read a zero padding bit. This must be zero. */
			uint8_t padding = READ_BITS_FAST_CRC(1U);
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	2101      	movs	r1, #1
 8019024:	4618      	mov	r0, r3
 8019026:	f7fe fffe 	bl	8018026 <fx_bitstream_read_msb>
 801902a:	4602      	mov	r2, r0
 801902c:	460b      	mov	r3, r1
 801902e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8019032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019034:	72fb      	strb	r3, [r7, #11]
			bool valid = padding == 0U;
 8019036:	7afb      	ldrb	r3, [r7, #11]
 8019038:	2b00      	cmp	r3, #0
 801903a:	bf0c      	ite	eq
 801903c:	2301      	moveq	r3, #1
 801903e:	2300      	movne	r3, #0
 8019040:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

			/* Read the frame type and order */
			uint8_t type = READ_BITS_FAST_CRC(6U);
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	2106      	movs	r1, #6
 8019048:	4618      	mov	r0, r3
 801904a:	f7fe ffec 	bl	8018026 <fx_bitstream_read_msb>
 801904e:	4602      	mov	r2, r0
 8019050:	460b      	mov	r3, r1
 8019052:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8019056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019058:	72bb      	strb	r3, [r7, #10]
			if (type & 0x20U) {
 801905a:	7abb      	ldrb	r3, [r7, #10]
 801905c:	f003 0320 	and.w	r3, r3, #32
 8019060:	2b00      	cmp	r3, #0
 8019062:	d013      	beq.n	801908c <_fx_flac_process_in_frame+0x180>
				sfh->order = (type & 0x1FU) + 1U;
 8019064:	7abb      	ldrb	r3, [r7, #10]
 8019066:	f003 031f 	and.w	r3, r3, #31
 801906a:	b2db      	uxtb	r3, r3
 801906c:	3301      	adds	r3, #1
 801906e:	b2da      	uxtb	r2, r3
 8019070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019072:	705a      	strb	r2, [r3, #1]
				sfh->type = SFT_LPC;
 8019074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019076:	2203      	movs	r2, #3
 8019078:	701a      	strb	r2, [r3, #0]
				sfh->lpc_coeffs = inst->qbuf;
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801907e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019080:	609a      	str	r2, [r3, #8]
				inst->priv_state = FLAC_SUBFRAME_LPC;
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	f240 12f9 	movw	r2, #505	; 0x1f9
 8019088:	835a      	strh	r2, [r3, #26]
 801908a:	e062      	b.n	8019152 <_fx_flac_process_in_frame+0x246>
			}
			else if (type & 0x10U) {
 801908c:	7abb      	ldrb	r3, [r7, #10]
 801908e:	f003 0310 	and.w	r3, r3, #16
 8019092:	2b00      	cmp	r3, #0
 8019094:	d005      	beq.n	80190a2 <_fx_flac_process_in_frame+0x196>
				return _fx_flac_handle_err(inst);
 8019096:	6878      	ldr	r0, [r7, #4]
 8019098:	f7ff fae0 	bl	801865c <_fx_flac_handle_err>
 801909c:	4603      	mov	r3, r0
 801909e:	f000 bc4a 	b.w	8019936 <_fx_flac_process_in_frame+0xa2a>
			}
			else if (type & 0x08U) {
 80190a2:	7abb      	ldrb	r3, [r7, #10]
 80190a4:	f003 0308 	and.w	r3, r3, #8
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	d02e      	beq.n	801910a <_fx_flac_process_in_frame+0x1fe>
				sfh->order = type & 0x07U;
 80190ac:	7abb      	ldrb	r3, [r7, #10]
 80190ae:	f003 0307 	and.w	r3, r3, #7
 80190b2:	b2da      	uxtb	r2, r3
 80190b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80190b6:	705a      	strb	r2, [r3, #1]
				sfh->type = SFT_FIXED;
 80190b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80190ba:	2202      	movs	r2, #2
 80190bc:	701a      	strb	r2, [r3, #0]
				sfh->lpc_shift = 0;
 80190be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80190c0:	2200      	movs	r2, #0
 80190c2:	711a      	strb	r2, [r3, #4]
				inst->priv_state = FLAC_SUBFRAME_FIXED;
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	f240 12f7 	movw	r2, #503	; 0x1f7
 80190ca:	835a      	strh	r2, [r3, #26]
				valid = valid && (sfh->order <= 4U);
 80190cc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d005      	beq.n	80190e0 <_fx_flac_process_in_frame+0x1d4>
 80190d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80190d6:	785b      	ldrb	r3, [r3, #1]
 80190d8:	2b04      	cmp	r3, #4
 80190da:	d801      	bhi.n	80190e0 <_fx_flac_process_in_frame+0x1d4>
 80190dc:	2301      	movs	r3, #1
 80190de:	e000      	b.n	80190e2 <_fx_flac_process_in_frame+0x1d6>
 80190e0:	2300      	movs	r3, #0
 80190e2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80190e6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80190ea:	f003 0301 	and.w	r3, r3, #1
 80190ee:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
				if (valid) {
 80190f2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80190f6:	2b00      	cmp	r3, #0
 80190f8:	d02b      	beq.n	8019152 <_fx_flac_process_in_frame+0x246>
					sfh->lpc_coeffs =
					    (int32_t *)_fx_flac_fixed_coeffs[sfh->order];
 80190fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80190fc:	785b      	ldrb	r3, [r3, #1]
 80190fe:	011b      	lsls	r3, r3, #4
 8019100:	4ab9      	ldr	r2, [pc, #740]	; (80193e8 <_fx_flac_process_in_frame+0x4dc>)
 8019102:	441a      	add	r2, r3
					sfh->lpc_coeffs =
 8019104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019106:	609a      	str	r2, [r3, #8]
 8019108:	e023      	b.n	8019152 <_fx_flac_process_in_frame+0x246>
				}
			}
			else if ((type & 0x04U) || (type & 0x02U)) {
 801910a:	7abb      	ldrb	r3, [r7, #10]
 801910c:	f003 0304 	and.w	r3, r3, #4
 8019110:	2b00      	cmp	r3, #0
 8019112:	d104      	bne.n	801911e <_fx_flac_process_in_frame+0x212>
 8019114:	7abb      	ldrb	r3, [r7, #10]
 8019116:	f003 0302 	and.w	r3, r3, #2
 801911a:	2b00      	cmp	r3, #0
 801911c:	d005      	beq.n	801912a <_fx_flac_process_in_frame+0x21e>
				return _fx_flac_handle_err(inst);
 801911e:	6878      	ldr	r0, [r7, #4]
 8019120:	f7ff fa9c 	bl	801865c <_fx_flac_handle_err>
 8019124:	4603      	mov	r3, r0
 8019126:	f000 bc06 	b.w	8019936 <_fx_flac_process_in_frame+0xa2a>
			}
			else if (type & 0x01U) {
 801912a:	7abb      	ldrb	r3, [r7, #10]
 801912c:	f003 0301 	and.w	r3, r3, #1
 8019130:	2b00      	cmp	r3, #0
 8019132:	d007      	beq.n	8019144 <_fx_flac_process_in_frame+0x238>
				sfh->type = SFT_VERBATIM;
 8019134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019136:	2201      	movs	r2, #1
 8019138:	701a      	strb	r2, [r3, #0]
				inst->priv_state = FLAC_SUBFRAME_VERBATIM;
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	f240 2202 	movw	r2, #514	; 0x202
 8019140:	835a      	strh	r2, [r3, #26]
 8019142:	e006      	b.n	8019152 <_fx_flac_process_in_frame+0x246>
			}
			else {
				sfh->type = SFT_CONSTANT;
 8019144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019146:	2200      	movs	r2, #0
 8019148:	701a      	strb	r2, [r3, #0]
				inst->priv_state = FLAC_SUBFRAME_CONSTANT;
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8019150:	835a      	strh	r2, [r3, #26]
			}

			/* Read the "wasted_bits" flag */
			uint8_t wasted_bits = READ_BITS_FAST_CRC(1U);
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	2101      	movs	r1, #1
 8019156:	4618      	mov	r0, r3
 8019158:	f7fe ff65 	bl	8018026 <fx_bitstream_read_msb>
 801915c:	4602      	mov	r2, r0
 801915e:	460b      	mov	r3, r1
 8019160:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8019164:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019166:	727b      	strb	r3, [r7, #9]
			if (wasted_bits) {
 8019168:	7a7b      	ldrb	r3, [r7, #9]
 801916a:	2b00      	cmp	r3, #0
 801916c:	d038      	beq.n	80191e0 <_fx_flac_process_in_frame+0x2d4>
				for (uint8_t i = 1U; i <= 30U; i++) {
 801916e:	2301      	movs	r3, #1
 8019170:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8019174:	e017      	b.n	80191a6 <_fx_flac_process_in_frame+0x29a>
					const uint8_t bit = READ_BITS_FAST_CRC(1U);
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	2101      	movs	r1, #1
 801917a:	4618      	mov	r0, r3
 801917c:	f7fe ff53 	bl	8018026 <fx_bitstream_read_msb>
 8019180:	4602      	mov	r2, r0
 8019182:	460b      	mov	r3, r1
 8019184:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8019188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801918a:	723b      	strb	r3, [r7, #8]
					if (bit == 1U) {
 801918c:	7a3b      	ldrb	r3, [r7, #8]
 801918e:	2b01      	cmp	r3, #1
 8019190:	d104      	bne.n	801919c <_fx_flac_process_in_frame+0x290>
						sfh->wasted_bits = i;
 8019192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019194:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8019198:	709a      	strb	r2, [r3, #2]
						break;
 801919a:	e008      	b.n	80191ae <_fx_flac_process_in_frame+0x2a2>
				for (uint8_t i = 1U; i <= 30U; i++) {
 801919c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80191a0:	3301      	adds	r3, #1
 80191a2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 80191a6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80191aa:	2b1e      	cmp	r3, #30
 80191ac:	d9e3      	bls.n	8019176 <_fx_flac_process_in_frame+0x26a>
					}
				}
				valid = valid && (sfh->wasted_bits > 0U) &&
 80191ae:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d00b      	beq.n	80191ce <_fx_flac_process_in_frame+0x2c2>
 80191b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80191b8:	789b      	ldrb	r3, [r3, #2]
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	d007      	beq.n	80191ce <_fx_flac_process_in_frame+0x2c2>
				        (sfh->wasted_bits < fh->sample_size);
 80191be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80191c0:	789a      	ldrb	r2, [r3, #2]
 80191c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80191c4:	7c5b      	ldrb	r3, [r3, #17]
				valid = valid && (sfh->wasted_bits > 0U) &&
 80191c6:	429a      	cmp	r2, r3
 80191c8:	d201      	bcs.n	80191ce <_fx_flac_process_in_frame+0x2c2>
 80191ca:	2301      	movs	r3, #1
 80191cc:	e000      	b.n	80191d0 <_fx_flac_process_in_frame+0x2c4>
 80191ce:	2300      	movs	r3, #0
 80191d0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80191d4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80191d8:	f003 0301 	and.w	r3, r3, #1
 80191dc:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			}

			/* Make sure the block is large enough for the initial samples */
			valid = valid && (blk_n >= sfh->order);
 80191e0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d007      	beq.n	80191f8 <_fx_flac_process_in_frame+0x2ec>
 80191e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80191ea:	785b      	ldrb	r3, [r3, #1]
 80191ec:	461a      	mov	r2, r3
 80191ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191f0:	4293      	cmp	r3, r2
 80191f2:	d301      	bcc.n	80191f8 <_fx_flac_process_in_frame+0x2ec>
 80191f4:	2301      	movs	r3, #1
 80191f6:	e000      	b.n	80191fa <_fx_flac_process_in_frame+0x2ee>
 80191f8:	2300      	movs	r3, #0
 80191fa:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80191fe:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8019202:	f003 0301 	and.w	r3, r3, #1
 8019206:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			if (!valid) {
 801920a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 801920e:	f083 0301 	eor.w	r3, r3, #1
 8019212:	b2db      	uxtb	r3, r3
 8019214:	2b00      	cmp	r3, #0
 8019216:	f000 838a 	beq.w	801992e <_fx_flac_process_in_frame+0xa22>
				_fx_flac_handle_err(inst);
 801921a:	6878      	ldr	r0, [r7, #4]
 801921c:	f7ff fa1e 	bl	801865c <_fx_flac_handle_err>
			}
			break;
 8019220:	e385      	b.n	801992e <_fx_flac_process_in_frame+0xa22>
		}
		case FLAC_SUBFRAME_CONSTANT: {
			/* Read a single sample value and spread it over the entire block
			   buffer for this subframe. */
			blk[0U] = READ_BITS_CRC(bps);
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8019228:	4611      	mov	r1, r2
 801922a:	4618      	mov	r0, r3
 801922c:	f7fe fdcf 	bl	8017dce <fx_bitstream_try_read_msb>
 8019230:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 8019234:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019238:	601a      	str	r2, [r3, #0]
 801923a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801923e:	2a00      	cmp	r2, #0
 8019240:	f173 0300 	sbcs.w	r3, r3, #0
 8019244:	da01      	bge.n	801924a <_fx_flac_process_in_frame+0x33e>
 8019246:	2300      	movs	r3, #0
 8019248:	e375      	b.n	8019936 <_fx_flac_process_in_frame+0xa2a>
			blk[0U] = SIGN_EXTEND(blk[0U], bps);
 801924a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801924c:	681b      	ldr	r3, [r3, #0]
 801924e:	4619      	mov	r1, r3
 8019250:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019254:	3b01      	subs	r3, #1
 8019256:	2201      	movs	r2, #1
 8019258:	fa02 f303 	lsl.w	r3, r2, r3
 801925c:	ea81 0203 	eor.w	r2, r1, r3
 8019260:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019264:	3b01      	subs	r3, #1
 8019266:	2101      	movs	r1, #1
 8019268:	fa01 f303 	lsl.w	r3, r1, r3
 801926c:	1ad3      	subs	r3, r2, r3
 801926e:	461a      	mov	r2, r3
 8019270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019272:	601a      	str	r2, [r3, #0]
			for (uint16_t i = 1U; i < blk_n; i++) {
 8019274:	2301      	movs	r3, #1
 8019276:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 801927a:	e00c      	b.n	8019296 <_fx_flac_process_in_frame+0x38a>
				blk[i] = blk[0U];
 801927c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8019280:	009b      	lsls	r3, r3, #2
 8019282:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019284:	4413      	add	r3, r2
 8019286:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019288:	6812      	ldr	r2, [r2, #0]
 801928a:	601a      	str	r2, [r3, #0]
			for (uint16_t i = 1U; i < blk_n; i++) {
 801928c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8019290:	3301      	adds	r3, #1
 8019292:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8019296:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 801929a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801929c:	429a      	cmp	r2, r3
 801929e:	d8ed      	bhi.n	801927c <_fx_flac_process_in_frame+0x370>
			}
			inst->priv_state = FLAC_SUBFRAME_FINALIZE;
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	f240 2203 	movw	r2, #515	; 0x203
 80192a6:	835a      	strh	r2, [r3, #26]
			break;
 80192a8:	e344      	b.n	8019934 <_fx_flac_process_in_frame+0xa28>
		}
		case FLAC_SUBFRAME_VERBATIM:
		case FLAC_SUBFRAME_FIXED:
		case FLAC_SUBFRAME_LPC: {
			/* Either just read up to "order" samples, or the entire block */
			const uint32_t n = (sfh->type == SFT_VERBATIM) ? blk_n : sfh->order;
 80192aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192ac:	781b      	ldrb	r3, [r3, #0]
 80192ae:	2b01      	cmp	r3, #1
 80192b0:	d002      	beq.n	80192b8 <_fx_flac_process_in_frame+0x3ac>
 80192b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192b4:	785b      	ldrb	r3, [r3, #1]
 80192b6:	e000      	b.n	80192ba <_fx_flac_process_in_frame+0x3ae>
 80192b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192ba:	60fb      	str	r3, [r7, #12]
			while (inst->blk_cur < n) {
 80192bc:	e03a      	b.n	8019334 <_fx_flac_process_in_frame+0x428>
				blk[inst->blk_cur] = READ_BITS_CRC(bps);
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80192c4:	4611      	mov	r1, r2
 80192c6:	4618      	mov	r0, r3
 80192c8:	f7fe fd81 	bl	8017dce <fx_bitstream_try_read_msb>
 80192cc:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80192d4:	009b      	lsls	r3, r3, #2
 80192d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80192d8:	4413      	add	r3, r2
 80192da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80192dc:	601a      	str	r2, [r3, #0]
 80192de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80192e2:	2a00      	cmp	r2, #0
 80192e4:	f173 0300 	sbcs.w	r3, r3, #0
 80192e8:	da01      	bge.n	80192ee <_fx_flac_process_in_frame+0x3e2>
 80192ea:	2300      	movs	r3, #0
 80192ec:	e323      	b.n	8019936 <_fx_flac_process_in_frame+0xa2a>
				blk[inst->blk_cur] = SIGN_EXTEND(blk[inst->blk_cur], bps);
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80192f2:	009b      	lsls	r3, r3, #2
 80192f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80192f6:	4413      	add	r3, r2
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	4619      	mov	r1, r3
 80192fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019300:	3b01      	subs	r3, #1
 8019302:	2201      	movs	r2, #1
 8019304:	fa02 f303 	lsl.w	r3, r2, r3
 8019308:	ea81 0203 	eor.w	r2, r1, r3
 801930c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019310:	3b01      	subs	r3, #1
 8019312:	2101      	movs	r1, #1
 8019314:	fa01 f303 	lsl.w	r3, r1, r3
 8019318:	1ad1      	subs	r1, r2, r3
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801931e:	009b      	lsls	r3, r3, #2
 8019320:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019322:	4413      	add	r3, r2
 8019324:	460a      	mov	r2, r1
 8019326:	601a      	str	r2, [r3, #0]
				inst->blk_cur++;
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801932c:	3301      	adds	r3, #1
 801932e:	b29a      	uxth	r2, r3
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	859a      	strh	r2, [r3, #44]	; 0x2c
			while (inst->blk_cur < n) {
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8019338:	461a      	mov	r2, r3
 801933a:	68fb      	ldr	r3, [r7, #12]
 801933c:	4293      	cmp	r3, r2
 801933e:	d8be      	bhi.n	80192be <_fx_flac_process_in_frame+0x3b2>
			}
			inst->priv_state =
			    (fx_flac_private_state_t)((int)inst->priv_state + 1U);
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	8b5b      	ldrh	r3, [r3, #26]
 8019344:	3301      	adds	r3, #1
 8019346:	b29a      	uxth	r2, r3
			inst->priv_state =
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	835a      	strh	r2, [r3, #26]
			break;
 801934c:	e2f2      	b.n	8019934 <_fx_flac_process_in_frame+0xa28>
		}
		case FLAC_SUBFRAME_LPC_HEADER: {
			/* Read the coefficient precision as well as the shift value */
			ENSURE_BITS(9U);
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	2109      	movs	r1, #9
 8019352:	4618      	mov	r0, r3
 8019354:	f7fe fd26 	bl	8017da4 <fx_bitstream_can_read>
 8019358:	4603      	mov	r3, r0
 801935a:	f083 0301 	eor.w	r3, r3, #1
 801935e:	b2db      	uxtb	r3, r3
 8019360:	2b00      	cmp	r3, #0
 8019362:	d001      	beq.n	8019368 <_fx_flac_process_in_frame+0x45c>
 8019364:	2300      	movs	r3, #0
 8019366:	e2e6      	b.n	8019936 <_fx_flac_process_in_frame+0xa2a>
			const uint8_t prec = READ_BITS_FAST_CRC(4U);
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	2104      	movs	r1, #4
 801936c:	4618      	mov	r0, r3
 801936e:	f7fe fe5a 	bl	8018026 <fx_bitstream_read_msb>
 8019372:	4602      	mov	r2, r0
 8019374:	460b      	mov	r3, r1
 8019376:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 801937a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801937c:	74fb      	strb	r3, [r7, #19]
			const uint8_t shift = READ_BITS_FAST_CRC(5U);
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	2105      	movs	r1, #5
 8019382:	4618      	mov	r0, r3
 8019384:	f7fe fe4f 	bl	8018026 <fx_bitstream_read_msb>
 8019388:	4602      	mov	r2, r0
 801938a:	460b      	mov	r3, r1
 801938c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8019390:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019392:	74bb      	strb	r3, [r7, #18]
			if (prec == 15U) { /* Precision of 15 bits is invalid */
 8019394:	7cfb      	ldrb	r3, [r7, #19]
 8019396:	2b0f      	cmp	r3, #15
 8019398:	d104      	bne.n	80193a4 <_fx_flac_process_in_frame+0x498>
				return _fx_flac_handle_err(inst);
 801939a:	6878      	ldr	r0, [r7, #4]
 801939c:	f7ff f95e 	bl	801865c <_fx_flac_handle_err>
 80193a0:	4603      	mov	r3, r0
 80193a2:	e2c8      	b.n	8019936 <_fx_flac_process_in_frame+0xa2a>
			}
			sfh->lpc_prec = prec + 1U;
 80193a4:	7cfb      	ldrb	r3, [r7, #19]
 80193a6:	3301      	adds	r3, #1
 80193a8:	b2da      	uxtb	r2, r3
 80193aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193ac:	70da      	strb	r2, [r3, #3]
			sfh->lpc_shift = SIGN_EXTEND(shift, 5U);
 80193ae:	7cbb      	ldrb	r3, [r7, #18]
 80193b0:	f083 0310 	eor.w	r3, r3, #16
 80193b4:	b2db      	uxtb	r3, r3
 80193b6:	3b10      	subs	r3, #16
 80193b8:	b2db      	uxtb	r3, r3
 80193ba:	b25a      	sxtb	r2, r3
 80193bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193be:	711a      	strb	r2, [r3, #4]
			if (sfh->lpc_shift < 0) {
 80193c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193c2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80193c6:	2b00      	cmp	r3, #0
 80193c8:	da04      	bge.n	80193d4 <_fx_flac_process_in_frame+0x4c8>
				return _fx_flac_handle_err(inst);
 80193ca:	6878      	ldr	r0, [r7, #4]
 80193cc:	f7ff f946 	bl	801865c <_fx_flac_handle_err>
 80193d0:	4603      	mov	r3, r0
 80193d2:	e2b0      	b.n	8019936 <_fx_flac_process_in_frame+0xa2a>
			}
			inst->coef_cur = 0U;
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	2200      	movs	r2, #0
 80193d8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			inst->priv_state = FLAC_SUBFRAME_LPC_COEFFS;
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	f240 12fb 	movw	r2, #507	; 0x1fb
 80193e2:	835a      	strh	r2, [r3, #26]
			break;
 80193e4:	e2a6      	b.n	8019934 <_fx_flac_process_in_frame+0xa28>
 80193e6:	bf00      	nop
 80193e8:	0801b248 	.word	0x0801b248
		}
		case FLAC_SUBFRAME_LPC_COEFFS:
			/* Read the individual predictor coefficients */
			while (inst->coef_cur < sfh->order) {
				uint32_t coef = READ_BITS_CRC(sfh->lpc_prec);
 80193ec:	687a      	ldr	r2, [r7, #4]
 80193ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193f0:	78db      	ldrb	r3, [r3, #3]
 80193f2:	4619      	mov	r1, r3
 80193f4:	4610      	mov	r0, r2
 80193f6:	f7fe fcea 	bl	8017dce <fx_bitstream_try_read_msb>
 80193fa:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 80193fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019400:	617b      	str	r3, [r7, #20]
 8019402:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8019406:	2a00      	cmp	r2, #0
 8019408:	f173 0300 	sbcs.w	r3, r3, #0
 801940c:	da01      	bge.n	8019412 <_fx_flac_process_in_frame+0x506>
 801940e:	2300      	movs	r3, #0
 8019410:	e291      	b.n	8019936 <_fx_flac_process_in_frame+0xa2a>
				sfh->lpc_coeffs[inst->coef_cur] =
				    SIGN_EXTEND(coef, sfh->lpc_prec);
 8019412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019414:	78db      	ldrb	r3, [r3, #3]
 8019416:	3b01      	subs	r3, #1
 8019418:	2201      	movs	r2, #1
 801941a:	409a      	lsls	r2, r3
 801941c:	697b      	ldr	r3, [r7, #20]
 801941e:	405a      	eors	r2, r3
 8019420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019422:	78db      	ldrb	r3, [r3, #3]
 8019424:	3b01      	subs	r3, #1
 8019426:	2101      	movs	r1, #1
 8019428:	fa01 f303 	lsl.w	r3, r1, r3
 801942c:	1ad1      	subs	r1, r2, r3
				sfh->lpc_coeffs[inst->coef_cur] =
 801942e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019430:	689a      	ldr	r2, [r3, #8]
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8019438:	009b      	lsls	r3, r3, #2
 801943a:	4413      	add	r3, r2
				    SIGN_EXTEND(coef, sfh->lpc_prec);
 801943c:	460a      	mov	r2, r1
				sfh->lpc_coeffs[inst->coef_cur] =
 801943e:	601a      	str	r2, [r3, #0]
				inst->coef_cur++;
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8019446:	3301      	adds	r3, #1
 8019448:	b2da      	uxtb	r2, r3
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			while (inst->coef_cur < sfh->order) {
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8019456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019458:	785b      	ldrb	r3, [r3, #1]
 801945a:	429a      	cmp	r2, r3
 801945c:	d3c6      	bcc.n	80193ec <_fx_flac_process_in_frame+0x4e0>
			}
			inst->priv_state = FLAC_SUBFRAME_LPC_RESIDUAL;
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8019464:	835a      	strh	r2, [r3, #26]
			break;
 8019466:	e265      	b.n	8019934 <_fx_flac_process_in_frame+0xa28>
		case FLAC_SUBFRAME_FIXED_RESIDUAL:
		case FLAC_SUBFRAME_LPC_RESIDUAL: {
			ENSURE_BITS(6U);
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	2106      	movs	r1, #6
 801946c:	4618      	mov	r0, r3
 801946e:	f7fe fc99 	bl	8017da4 <fx_bitstream_can_read>
 8019472:	4603      	mov	r3, r0
 8019474:	f083 0301 	eor.w	r3, r3, #1
 8019478:	b2db      	uxtb	r3, r3
 801947a:	2b00      	cmp	r3, #0
 801947c:	d001      	beq.n	8019482 <_fx_flac_process_in_frame+0x576>
 801947e:	2300      	movs	r3, #0
 8019480:	e259      	b.n	8019936 <_fx_flac_process_in_frame+0xa2a>

			/* Read the residual encoding type and the rice partition order */
			sfh->residual_method =
			    (fx_flac_residual_method_t)READ_BITS_FAST_CRC(2U);
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	2102      	movs	r1, #2
 8019486:	4618      	mov	r0, r3
 8019488:	f7fe fdcd 	bl	8018026 <fx_bitstream_read_msb>
 801948c:	4602      	mov	r2, r0
 801948e:	460b      	mov	r3, r1
 8019490:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8019494:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
			sfh->residual_method =
 8019498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801949a:	731a      	strb	r2, [r3, #12]
			if (sfh->residual_method > RES_RICE2) {
 801949c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801949e:	7b1b      	ldrb	r3, [r3, #12]
 80194a0:	2b01      	cmp	r3, #1
 80194a2:	d904      	bls.n	80194ae <_fx_flac_process_in_frame+0x5a2>
				return _fx_flac_handle_err(inst);
 80194a4:	6878      	ldr	r0, [r7, #4]
 80194a6:	f7ff f8d9 	bl	801865c <_fx_flac_handle_err>
 80194aa:	4603      	mov	r3, r0
 80194ac:	e243      	b.n	8019936 <_fx_flac_process_in_frame+0xa2a>
			}
			sfh->rice_partition_order = READ_BITS_FAST_CRC(4U);
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	2104      	movs	r1, #4
 80194b2:	4618      	mov	r0, r3
 80194b4:	f7fe fdb7 	bl	8018026 <fx_bitstream_read_msb>
 80194b8:	4602      	mov	r2, r0
 80194ba:	460b      	mov	r3, r1
 80194bc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80194c0:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80194c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80194c6:	735a      	strb	r2, [r3, #13]
			inst->partition_cur = 0U;
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	2200      	movs	r2, #0
 80194cc:	849a      	strh	r2, [r3, #36]	; 0x24
			inst->priv_state = FLAC_SUBFRAME_RICE_INIT;
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	f240 12fd 	movw	r2, #509	; 0x1fd
 80194d4:	835a      	strh	r2, [r3, #26]
			break;
 80194d6:	e22d      	b.n	8019934 <_fx_flac_process_in_frame+0xa28>
		}
		case FLAC_SUBFRAME_RICE_INIT: {
			/* Read the Rice parameter */
			ENSURE_BITS(10U);
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	210a      	movs	r1, #10
 80194dc:	4618      	mov	r0, r3
 80194de:	f7fe fc61 	bl	8017da4 <fx_bitstream_can_read>
 80194e2:	4603      	mov	r3, r0
 80194e4:	f083 0301 	eor.w	r3, r3, #1
 80194e8:	b2db      	uxtb	r3, r3
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	d001      	beq.n	80194f2 <_fx_flac_process_in_frame+0x5e6>
 80194ee:	2300      	movs	r3, #0
 80194f0:	e221      	b.n	8019936 <_fx_flac_process_in_frame+0xa2a>

			uint8_t n_bits = (sfh->residual_method == RES_RICE) ? 4U : 5U;
 80194f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80194f4:	7b1b      	ldrb	r3, [r3, #12]
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d101      	bne.n	80194fe <_fx_flac_process_in_frame+0x5f2>
 80194fa:	2304      	movs	r3, #4
 80194fc:	e000      	b.n	8019500 <_fx_flac_process_in_frame+0x5f4>
 80194fe:	2305      	movs	r3, #5
 8019500:	76fb      	strb	r3, [r7, #27]
			sfh->rice_parameter = READ_BITS_FAST_CRC(n_bits);
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	7efa      	ldrb	r2, [r7, #27]
 8019506:	4611      	mov	r1, r2
 8019508:	4618      	mov	r0, r3
 801950a:	f7fe fd8c 	bl	8018026 <fx_bitstream_read_msb>
 801950e:	4602      	mov	r2, r0
 8019510:	460b      	mov	r3, r1
 8019512:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8019516:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 801951a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801951c:	739a      	strb	r2, [r3, #14]
			if (sfh->rice_parameter == ((1U << n_bits) - 1U)) {
 801951e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019520:	7b9b      	ldrb	r3, [r3, #14]
 8019522:	4619      	mov	r1, r3
 8019524:	7efb      	ldrb	r3, [r7, #27]
 8019526:	2201      	movs	r2, #1
 8019528:	fa02 f303 	lsl.w	r3, r2, r3
 801952c:	3b01      	subs	r3, #1
 801952e:	4299      	cmp	r1, r3
 8019530:	d111      	bne.n	8019556 <_fx_flac_process_in_frame+0x64a>
				sfh->rice_parameter = READ_BITS_FAST_CRC(5U);
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	2105      	movs	r1, #5
 8019536:	4618      	mov	r0, r3
 8019538:	f7fe fd75 	bl	8018026 <fx_bitstream_read_msb>
 801953c:	4602      	mov	r2, r0
 801953e:	460b      	mov	r3, r1
 8019540:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8019544:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8019548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801954a:	739a      	strb	r2, [r3, #14]
				inst->priv_state = FLAC_SUBFRAME_RICE_VERBATIM;
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019552:	835a      	strh	r2, [r3, #26]
 8019554:	e006      	b.n	8019564 <_fx_flac_process_in_frame+0x658>
			}
			else {
				inst->priv_state = FLAC_SUBFRAME_RICE_UNARY;
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	f240 12ff 	movw	r2, #511	; 0x1ff
 801955c:	835a      	strh	r2, [r3, #26]
				inst->rice_unary_counter = 0U;
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	2200      	movs	r2, #0
 8019562:	851a      	strh	r2, [r3, #40]	; 0x28
			}

			/* Compute the number of samples to read */
			inst->partition_sample = blk_n >> sfh->rice_partition_order;
 8019564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019566:	7b5b      	ldrb	r3, [r3, #13]
 8019568:	461a      	mov	r2, r3
 801956a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801956c:	40d3      	lsrs	r3, r2
 801956e:	b29a      	uxth	r2, r3
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	84da      	strh	r2, [r3, #38]	; 0x26
			if (inst->partition_cur == 0U) {
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019578:	2b00      	cmp	r3, #0
 801957a:	d114      	bne.n	80195a6 <_fx_flac_process_in_frame+0x69a>
				/* First partition alread includes verbatim samples */
				if (inst->partition_sample < sfh->order) {
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8019580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019582:	785b      	ldrb	r3, [r3, #1]
 8019584:	b29b      	uxth	r3, r3
 8019586:	429a      	cmp	r2, r3
 8019588:	d204      	bcs.n	8019594 <_fx_flac_process_in_frame+0x688>
					return _fx_flac_handle_err(
 801958a:	6878      	ldr	r0, [r7, #4]
 801958c:	f7ff f866 	bl	801865c <_fx_flac_handle_err>
 8019590:	4603      	mov	r3, r0
 8019592:	e1d0      	b.n	8019936 <_fx_flac_process_in_frame+0xa2a>
					    inst); /* Number of samples is negative */
				}
				inst->partition_sample -= sfh->order;
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8019598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801959a:	785b      	ldrb	r3, [r3, #1]
 801959c:	b29b      	uxth	r3, r3
 801959e:	1ad3      	subs	r3, r2, r3
 80195a0:	b29a      	uxth	r2, r3
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	84da      	strh	r2, [r3, #38]	; 0x26
			}

			/* Make sure we're never writing beyond the buffer for this
			   channel */
			if ((inst->partition_sample + inst->blk_cur) > blk_n) {
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80195aa:	461a      	mov	r2, r3
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80195b0:	4413      	add	r3, r2
 80195b2:	461a      	mov	r2, r3
 80195b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195b6:	4293      	cmp	r3, r2
 80195b8:	f080 81bb 	bcs.w	8019932 <_fx_flac_process_in_frame+0xa26>
				return _fx_flac_handle_err(inst);
 80195bc:	6878      	ldr	r0, [r7, #4]
 80195be:	f7ff f84d 	bl	801865c <_fx_flac_handle_err>
 80195c2:	4603      	mov	r3, r0
 80195c4:	e1b7      	b.n	8019936 <_fx_flac_process_in_frame+0xa2a>
		case FLAC_SUBFRAME_RICE:
		case FLAC_SUBFRAME_RICE_UNARY:
			/* Read the individual rice samples */
			while (inst->partition_sample > 0U) {
				/* Read the unary part of the Rice encoded sample bit-by-bit */
				if (inst->priv_state == FLAC_SUBFRAME_RICE_UNARY) {
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	8b5b      	ldrh	r3, [r3, #26]
 80195ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80195ce:	4293      	cmp	r3, r2
 80195d0:	d11d      	bne.n	801960e <_fx_flac_process_in_frame+0x702>
					while (true) {
						const uint8_t bit = READ_BITS_CRC(1U);
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	2101      	movs	r1, #1
 80195d6:	4618      	mov	r0, r3
 80195d8:	f7fe fbf9 	bl	8017dce <fx_bitstream_try_read_msb>
 80195dc:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 80195e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80195e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80195e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80195ea:	2a00      	cmp	r2, #0
 80195ec:	f173 0300 	sbcs.w	r3, r3, #0
 80195f0:	da01      	bge.n	80195f6 <_fx_flac_process_in_frame+0x6ea>
 80195f2:	2300      	movs	r3, #0
 80195f4:	e19f      	b.n	8019936 <_fx_flac_process_in_frame+0xa2a>
						if (bit) {
 80195f6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d106      	bne.n	801960c <_fx_flac_process_in_frame+0x700>
							break;
						}
						inst->rice_unary_counter++;
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019602:	3301      	adds	r3, #1
 8019604:	b29a      	uxth	r2, r3
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	851a      	strh	r2, [r3, #40]	; 0x28
					while (true) {
 801960a:	e7e2      	b.n	80195d2 <_fx_flac_process_in_frame+0x6c6>
							break;
 801960c:	bf00      	nop
					}
				}

				/* If there are no more bits left below, make sure we end up
				   here instead of going through the unary decoder again. */
				inst->priv_state = FLAC_SUBFRAME_RICE;
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8019614:	835a      	strh	r2, [r3, #26]

				/* Read the remainder */
				uint32_t r = 0U;
 8019616:	2300      	movs	r3, #0
 8019618:	64fb      	str	r3, [r7, #76]	; 0x4c
				if (sfh->rice_parameter > 0U) {
 801961a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801961c:	7b9b      	ldrb	r3, [r3, #14]
 801961e:	2b00      	cmp	r3, #0
 8019620:	d012      	beq.n	8019648 <_fx_flac_process_in_frame+0x73c>
					r = READ_BITS_CRC(sfh->rice_parameter);
 8019622:	687a      	ldr	r2, [r7, #4]
 8019624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019626:	7b9b      	ldrb	r3, [r3, #14]
 8019628:	4619      	mov	r1, r3
 801962a:	4610      	mov	r0, r2
 801962c:	f7fe fbcf 	bl	8017dce <fx_bitstream_try_read_msb>
 8019630:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 8019634:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019638:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801963c:	2a00      	cmp	r2, #0
 801963e:	f173 0300 	sbcs.w	r3, r3, #0
 8019642:	da01      	bge.n	8019648 <_fx_flac_process_in_frame+0x73c>
 8019644:	2300      	movs	r3, #0
 8019646:	e176      	b.n	8019936 <_fx_flac_process_in_frame+0xa2a>
				}
				const uint16_t q = inst->rice_unary_counter;
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801964c:	843b      	strh	r3, [r7, #32]
				const uint32_t val = (q << sfh->rice_parameter) | r;
 801964e:	8c3b      	ldrh	r3, [r7, #32]
 8019650:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019652:	7b92      	ldrb	r2, [r2, #14]
 8019654:	4093      	lsls	r3, r2
 8019656:	461a      	mov	r2, r3
 8019658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801965a:	4313      	orrs	r3, r2
 801965c:	61fb      	str	r3, [r7, #28]

				/* Last bit determines sign */
				if (val & 1) {
 801965e:	69fb      	ldr	r3, [r7, #28]
 8019660:	f003 0301 	and.w	r3, r3, #1
 8019664:	2b00      	cmp	r3, #0
 8019666:	d00a      	beq.n	801967e <_fx_flac_process_in_frame+0x772>
					blk[inst->blk_cur] = -((int32_t)(val >> 1)) - 1;
 8019668:	69fb      	ldr	r3, [r7, #28]
 801966a:	085b      	lsrs	r3, r3, #1
 801966c:	4619      	mov	r1, r3
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8019672:	009b      	lsls	r3, r3, #2
 8019674:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019676:	4413      	add	r3, r2
 8019678:	43ca      	mvns	r2, r1
 801967a:	601a      	str	r2, [r3, #0]
 801967c:	e008      	b.n	8019690 <_fx_flac_process_in_frame+0x784>
				}
				else {
					blk[inst->blk_cur] = (int32_t)(val >> 1);
 801967e:	69fb      	ldr	r3, [r7, #28]
 8019680:	0859      	lsrs	r1, r3, #1
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8019686:	009b      	lsls	r3, r3, #2
 8019688:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801968a:	4413      	add	r3, r2
 801968c:	460a      	mov	r2, r1
 801968e:	601a      	str	r2, [r3, #0]
				}

				/* Read the next sample */
				inst->rice_unary_counter = 0U;
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	2200      	movs	r2, #0
 8019694:	851a      	strh	r2, [r3, #40]	; 0x28
				inst->priv_state = FLAC_SUBFRAME_RICE_UNARY;
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	f240 12ff 	movw	r2, #511	; 0x1ff
 801969c:	835a      	strh	r2, [r3, #26]
				inst->blk_cur++;
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80196a2:	3301      	adds	r3, #1
 80196a4:	b29a      	uxth	r2, r3
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	859a      	strh	r2, [r3, #44]	; 0x2c
				inst->partition_sample--;
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80196ae:	3b01      	subs	r3, #1
 80196b0:	b29a      	uxth	r2, r3
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	84da      	strh	r2, [r3, #38]	; 0x26
			while (inst->partition_sample > 0U) {
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80196ba:	2b00      	cmp	r3, #0
 80196bc:	d183      	bne.n	80195c6 <_fx_flac_process_in_frame+0x6ba>
			}
			inst->priv_state = FLAC_SUBFRAME_RICE_FINALIZE;
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	f240 2201 	movw	r2, #513	; 0x201
 80196c4:	835a      	strh	r2, [r3, #26]
			break;
 80196c6:	e135      	b.n	8019934 <_fx_flac_process_in_frame+0xa28>
		case FLAC_SUBFRAME_RICE_VERBATIM: {
			/* Samples are encoded in verbatim in this partition */
			const uint8_t bps = sfh->rice_parameter;
 80196c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80196ca:	7b9b      	ldrb	r3, [r3, #14]
 80196cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			while (inst->partition_sample > 0U) {
 80196d0:	e046      	b.n	8019760 <_fx_flac_process_in_frame+0x854>
				blk[inst->blk_cur] = (bps == 0) ? 0U : READ_BITS_CRC(bps);
 80196d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80196d6:	2b00      	cmp	r3, #0
 80196d8:	d00a      	beq.n	80196f0 <_fx_flac_process_in_frame+0x7e4>
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80196e0:	4611      	mov	r1, r2
 80196e2:	4618      	mov	r0, r3
 80196e4:	f7fe fb73 	bl	8017dce <fx_bitstream_try_read_msb>
 80196e8:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 80196ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80196ee:	e000      	b.n	80196f2 <_fx_flac_process_in_frame+0x7e6>
 80196f0:	2300      	movs	r3, #0
 80196f2:	687a      	ldr	r2, [r7, #4]
 80196f4:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80196f6:	0092      	lsls	r2, r2, #2
 80196f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80196fa:	440a      	add	r2, r1
 80196fc:	6013      	str	r3, [r2, #0]
 80196fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8019702:	2a00      	cmp	r2, #0
 8019704:	f173 0300 	sbcs.w	r3, r3, #0
 8019708:	da01      	bge.n	801970e <_fx_flac_process_in_frame+0x802>
 801970a:	2300      	movs	r3, #0
 801970c:	e113      	b.n	8019936 <_fx_flac_process_in_frame+0xa2a>
				blk[inst->blk_cur] = SIGN_EXTEND(blk[inst->blk_cur], bps);
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8019712:	009b      	lsls	r3, r3, #2
 8019714:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019716:	4413      	add	r3, r2
 8019718:	681b      	ldr	r3, [r3, #0]
 801971a:	4619      	mov	r1, r3
 801971c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019720:	3b01      	subs	r3, #1
 8019722:	2201      	movs	r2, #1
 8019724:	fa02 f303 	lsl.w	r3, r2, r3
 8019728:	ea81 0203 	eor.w	r2, r1, r3
 801972c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019730:	3b01      	subs	r3, #1
 8019732:	2101      	movs	r1, #1
 8019734:	fa01 f303 	lsl.w	r3, r1, r3
 8019738:	1ad1      	subs	r1, r2, r3
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801973e:	009b      	lsls	r3, r3, #2
 8019740:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019742:	4413      	add	r3, r2
 8019744:	460a      	mov	r2, r1
 8019746:	601a      	str	r2, [r3, #0]
				inst->blk_cur++;
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801974c:	3301      	adds	r3, #1
 801974e:	b29a      	uxth	r2, r3
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	859a      	strh	r2, [r3, #44]	; 0x2c
				inst->partition_sample--;
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8019758:	3b01      	subs	r3, #1
 801975a:	b29a      	uxth	r2, r3
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	84da      	strh	r2, [r3, #38]	; 0x26
			while (inst->partition_sample > 0U) {
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8019764:	2b00      	cmp	r3, #0
 8019766:	d1b4      	bne.n	80196d2 <_fx_flac_process_in_frame+0x7c6>
			}
			inst->priv_state = FLAC_SUBFRAME_RICE_FINALIZE;
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	f240 2201 	movw	r2, #513	; 0x201
 801976e:	835a      	strh	r2, [r3, #26]
			break;
 8019770:	e0e0      	b.n	8019934 <_fx_flac_process_in_frame+0xa28>
		}
		case FLAC_SUBFRAME_RICE_FINALIZE:
			/* Go to the next partition or finalize this subframe */
			inst->partition_cur++;
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019776:	3301      	adds	r3, #1
 8019778:	b29a      	uxth	r2, r3
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	849a      	strh	r2, [r3, #36]	; 0x24
			if (inst->partition_cur == (1U << sfh->rice_partition_order)) {
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019782:	461a      	mov	r2, r3
 8019784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019786:	7b5b      	ldrb	r3, [r3, #13]
 8019788:	4619      	mov	r1, r3
 801978a:	2301      	movs	r3, #1
 801978c:	408b      	lsls	r3, r1
 801978e:	429a      	cmp	r2, r3
 8019790:	d111      	bne.n	80197b6 <_fx_flac_process_in_frame+0x8aa>
				/* Decode the residual */
				_fx_flac_restore_lpc_signal(blk, blk_n, sfh->lpc_coeffs,
 8019792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019794:	689a      	ldr	r2, [r3, #8]
 8019796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019798:	7859      	ldrb	r1, [r3, #1]
 801979a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801979c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80197a0:	9300      	str	r3, [sp, #0]
 80197a2:	460b      	mov	r3, r1
 80197a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80197a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80197a8:	f7fe fe5f 	bl	801846a <_fx_flac_restore_lpc_signal>
				                            sfh->order, sfh->lpc_shift);
				inst->priv_state = FLAC_SUBFRAME_FINALIZE;
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	f240 2203 	movw	r2, #515	; 0x203
 80197b2:	835a      	strh	r2, [r3, #26]
			}
			else {
				inst->priv_state = FLAC_SUBFRAME_RICE_INIT;
			}
			break;
 80197b4:	e0be      	b.n	8019934 <_fx_flac_process_in_frame+0xa28>
				inst->priv_state = FLAC_SUBFRAME_RICE_INIT;
 80197b6:	687b      	ldr	r3, [r7, #4]
 80197b8:	f240 12fd 	movw	r2, #509	; 0x1fd
 80197bc:	835a      	strh	r2, [r3, #26]
			break;
 80197be:	e0b9      	b.n	8019934 <_fx_flac_process_in_frame+0xa28>
		case FLAC_SUBFRAME_FINALIZE: {
			/* There is another subframe to read, continue! */
			inst->chan_cur++; /* Go to the next channel */
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80197c6:	3301      	adds	r3, #1
 80197c8:	b2da      	uxtb	r2, r3
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			if (inst->chan_cur < fh->channel_count) {
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80197d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80197d8:	7c1b      	ldrb	r3, [r3, #16]
 80197da:	429a      	cmp	r2, r3
 80197dc:	d204      	bcs.n	80197e8 <_fx_flac_process_in_frame+0x8dc>
				inst->priv_state = FLAC_SUBFRAME_HEADER;
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80197e4:	835a      	strh	r2, [r3, #26]
				break;
 80197e6:	e0a5      	b.n	8019934 <_fx_flac_process_in_frame+0xa28>
			}

			/* Synchronise with the underlying byte stream */
			SYNC_BYTESTREAM_CRC();
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	7c1b      	ldrb	r3, [r3, #16]
 80197ec:	f003 0307 	and.w	r3, r3, #7
 80197f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80197f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d013      	beq.n	8019824 <_fx_flac_process_in_frame+0x918>
 80197fc:	687a      	ldr	r2, [r7, #4]
 80197fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019802:	f1c3 0308 	rsb	r3, r3, #8
 8019806:	b2db      	uxtb	r3, r3
 8019808:	4619      	mov	r1, r3
 801980a:	4610      	mov	r0, r2
 801980c:	f7fe fadf 	bl	8017dce <fx_bitstream_try_read_msb>
 8019810:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 8019814:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8019818:	2a00      	cmp	r2, #0
 801981a:	f173 0300 	sbcs.w	r3, r3, #0
 801981e:	da01      	bge.n	8019824 <_fx_flac_process_in_frame+0x918>
 8019820:	2300      	movs	r3, #0
 8019822:	e088      	b.n	8019936 <_fx_flac_process_in_frame+0xa2a>

			/* Read the CRC16 sum, resync if it doesn't match our own */
			uint16_t crc16 = READ_BITS(16U);
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	2110      	movs	r1, #16
 8019828:	4618      	mov	r0, r3
 801982a:	f7fe fad0 	bl	8017dce <fx_bitstream_try_read_msb>
 801982e:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 8019832:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019834:	86bb      	strh	r3, [r7, #52]	; 0x34
 8019836:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801983a:	2a00      	cmp	r2, #0
 801983c:	f173 0300 	sbcs.w	r3, r3, #0
 8019840:	da01      	bge.n	8019846 <_fx_flac_process_in_frame+0x93a>
 8019842:	2300      	movs	r3, #0
 8019844:	e077      	b.n	8019936 <_fx_flac_process_in_frame+0xa2a>
#else
			(void)crc16;
#endif

			/* Post process side-stereo */
			int32_t *c1 = inst->blkbuf[0], *c2 = inst->blkbuf[1];
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801984a:	633b      	str	r3, [r7, #48]	; 0x30
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019850:	62fb      	str	r3, [r7, #44]	; 0x2c
			switch (fh->channel_assignment) {
 8019852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019854:	78db      	ldrb	r3, [r3, #3]
 8019856:	2b0a      	cmp	r3, #10
 8019858:	d012      	beq.n	8019880 <_fx_flac_process_in_frame+0x974>
 801985a:	2b0a      	cmp	r3, #10
 801985c:	dc16      	bgt.n	801988c <_fx_flac_process_in_frame+0x980>
 801985e:	2b08      	cmp	r3, #8
 8019860:	d002      	beq.n	8019868 <_fx_flac_process_in_frame+0x95c>
 8019862:	2b09      	cmp	r3, #9
 8019864:	d006      	beq.n	8019874 <_fx_flac_process_in_frame+0x968>
					break;
				case MID_SIDE_STEREO:
					_fx_flac_post_process_mid_side(c1, c2, blk_n);
					break;
				default:
					break;
 8019866:	e011      	b.n	801988c <_fx_flac_process_in_frame+0x980>
					_fx_flac_post_process_left_side(c1, c2, blk_n);
 8019868:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801986a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801986c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801986e:	f7fe fd70 	bl	8018352 <_fx_flac_post_process_left_side>
					break;
 8019872:	e00c      	b.n	801988e <_fx_flac_process_in_frame+0x982>
					_fx_flac_post_process_right_side(c1, c2, blk_n);
 8019874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019876:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801987a:	f7fe fd91 	bl	80183a0 <_fx_flac_post_process_right_side>
					break;
 801987e:	e006      	b.n	801988e <_fx_flac_process_in_frame+0x982>
					_fx_flac_post_process_mid_side(c1, c2, blk_n);
 8019880:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019886:	f7fe fdb2 	bl	80183ee <_fx_flac_post_process_mid_side>
					break;
 801988a:	e000      	b.n	801988e <_fx_flac_process_in_frame+0x982>
					break;
 801988c:	bf00      	nop
			}

			/* Apply the "wasted bits" transformation, i.e. multiply the output
			   by the corresponding power of two. Furthermore, shift the output
			   such that the resulting int32 stream can be played back. */
			uint8_t shift = sfh->wasted_bits + (32U - fh->sample_size);
 801988e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019890:	789a      	ldrb	r2, [r3, #2]
 8019892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019894:	7c5b      	ldrb	r3, [r3, #17]
 8019896:	1ad3      	subs	r3, r2, r3
 8019898:	b2db      	uxtb	r3, r3
 801989a:	3320      	adds	r3, #32
 801989c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			if (shift) {
 80198a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d033      	beq.n	8019910 <_fx_flac_process_in_frame+0xa04>
				for (uint8_t c = 0U; c < fh->channel_count; c++) {
 80198a8:	2300      	movs	r3, #0
 80198aa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80198ae:	e029      	b.n	8019904 <_fx_flac_process_in_frame+0x9f8>
					int32_t *blk = inst->blkbuf[c];
 80198b0:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	3212      	adds	r2, #18
 80198b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80198bc:	627b      	str	r3, [r7, #36]	; 0x24
					for (uint16_t i = 0U; i < blk_n; i++) {
 80198be:	2300      	movs	r3, #0
 80198c0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80198c4:	e014      	b.n	80198f0 <_fx_flac_process_in_frame+0x9e4>
						blk[i] = blk[i] * (1 << shift);
 80198c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80198ca:	009b      	lsls	r3, r3, #2
 80198cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80198ce:	4413      	add	r3, r2
 80198d0:	6819      	ldr	r1, [r3, #0]
 80198d2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80198d6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80198da:	009b      	lsls	r3, r3, #2
 80198dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80198de:	4403      	add	r3, r0
 80198e0:	fa01 f202 	lsl.w	r2, r1, r2
 80198e4:	601a      	str	r2, [r3, #0]
					for (uint16_t i = 0U; i < blk_n; i++) {
 80198e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80198ea:	3301      	adds	r3, #1
 80198ec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80198f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80198f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80198f6:	429a      	cmp	r2, r3
 80198f8:	d8e5      	bhi.n	80198c6 <_fx_flac_process_in_frame+0x9ba>
				for (uint8_t c = 0U; c < fh->channel_count; c++) {
 80198fa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80198fe:	3301      	adds	r3, #1
 8019900:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8019904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019906:	7c1b      	ldrb	r3, [r3, #16]
 8019908:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 801990c:	429a      	cmp	r2, r3
 801990e:	d3cf      	bcc.n	80198b0 <_fx_flac_process_in_frame+0x9a4>
					}
				}
			}

			/* We're done decoding this frame! Notify the outer loop! */
			inst->blk_cur = 0U; /* Reset the read cursor */
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	2200      	movs	r2, #0
 8019914:	859a      	strh	r2, [r3, #44]	; 0x2c
			inst->chan_cur = 0U;
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	2200      	movs	r2, #0
 801991a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			inst->state = FLAC_DECODED_FRAME;
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	2205      	movs	r2, #5
 8019922:	761a      	strb	r2, [r3, #24]
			break;
 8019924:	e006      	b.n	8019934 <_fx_flac_process_in_frame+0xa28>
		}
		default:
			inst->state = FLAC_ERR;
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	22ff      	movs	r2, #255	; 0xff
 801992a:	761a      	strb	r2, [r3, #24]
			break;
 801992c:	e002      	b.n	8019934 <_fx_flac_process_in_frame+0xa28>
			break;
 801992e:	bf00      	nop
 8019930:	e000      	b.n	8019934 <_fx_flac_process_in_frame+0xa28>
			break;
 8019932:	bf00      	nop
	}
	return true;
 8019934:	2301      	movs	r3, #1
}
 8019936:	4618      	mov	r0, r3
 8019938:	3760      	adds	r7, #96	; 0x60
 801993a:	46bd      	mov	sp, r7
 801993c:	bd80      	pop	{r7, pc}
 801993e:	bf00      	nop

08019940 <_fx_flac_process_decoded_frame>:

static bool _fx_flac_process_decoded_frame(fx_flac_t *inst, int32_t *out,
                                           uint32_t *out_len)
{
 8019940:	b480      	push	{r7}
 8019942:	b089      	sub	sp, #36	; 0x24
 8019944:	af00      	add	r7, sp, #0
 8019946:	60f8      	str	r0, [r7, #12]
 8019948:	60b9      	str	r1, [r7, #8]
 801994a:	607a      	str	r2, [r7, #4]
	/* Fetch the current stream and frame info. */
	const fx_flac_frame_header_t *fh = inst->frame_header;
 801994c:	68fb      	ldr	r3, [r7, #12]
 801994e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019950:	617b      	str	r3, [r7, #20]

	/* Fetch channel count and number of samples left to write */
	const uint8_t cc = fh->channel_count;
 8019952:	697b      	ldr	r3, [r7, #20]
 8019954:	7c1b      	ldrb	r3, [r3, #16]
 8019956:	74fb      	strb	r3, [r7, #19]
	uint32_t n_smpls_rem =
	    (fh->block_size - inst->blk_cur - 1U) * cc + (cc - inst->chan_cur);
 8019958:	697b      	ldr	r3, [r7, #20]
 801995a:	689b      	ldr	r3, [r3, #8]
 801995c:	68fa      	ldr	r2, [r7, #12]
 801995e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8019960:	1a9b      	subs	r3, r3, r2
 8019962:	3b01      	subs	r3, #1
 8019964:	7cfa      	ldrb	r2, [r7, #19]
 8019966:	fb02 f303 	mul.w	r3, r2, r3
 801996a:	7cfa      	ldrb	r2, [r7, #19]
 801996c:	68f9      	ldr	r1, [r7, #12]
 801996e:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
 8019972:	1a52      	subs	r2, r2, r1
	uint32_t n_smpls_rem =
 8019974:	4413      	add	r3, r2
 8019976:	61fb      	str	r3, [r7, #28]

	/* Truncate to the actually available space. */
	if (n_smpls_rem > *out_len) {
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	69fa      	ldr	r2, [r7, #28]
 801997e:	429a      	cmp	r2, r3
 8019980:	d902      	bls.n	8019988 <_fx_flac_process_decoded_frame+0x48>
		n_smpls_rem = *out_len;
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	61fb      	str	r3, [r7, #28]
	}

	/* Interlace the decoded samples in the output array */
	uint32_t tar = 0U; /* Number of samples written. */
 8019988:	2300      	movs	r3, #0
 801998a:	61bb      	str	r3, [r7, #24]
	while (tar < n_smpls_rem) {
 801998c:	e02c      	b.n	80199e8 <_fx_flac_process_decoded_frame+0xa8>
		/* Write to the output buffer */
		out[tar] = inst->blkbuf[inst->chan_cur][inst->blk_cur];
 801998e:	68fb      	ldr	r3, [r7, #12]
 8019990:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8019994:	461a      	mov	r2, r3
 8019996:	68fb      	ldr	r3, [r7, #12]
 8019998:	3212      	adds	r2, #18
 801999a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801999e:	68fb      	ldr	r3, [r7, #12]
 80199a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80199a2:	009b      	lsls	r3, r3, #2
 80199a4:	441a      	add	r2, r3
 80199a6:	69bb      	ldr	r3, [r7, #24]
 80199a8:	009b      	lsls	r3, r3, #2
 80199aa:	68b9      	ldr	r1, [r7, #8]
 80199ac:	440b      	add	r3, r1
 80199ae:	6812      	ldr	r2, [r2, #0]
 80199b0:	601a      	str	r2, [r3, #0]

		/* Advance the read and write cursors */
		inst->chan_cur++;
 80199b2:	68fb      	ldr	r3, [r7, #12]
 80199b4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80199b8:	3301      	adds	r3, #1
 80199ba:	b2da      	uxtb	r2, r3
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		if (inst->chan_cur == cc) {
 80199c2:	68fb      	ldr	r3, [r7, #12]
 80199c4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80199c8:	7cfa      	ldrb	r2, [r7, #19]
 80199ca:	429a      	cmp	r2, r3
 80199cc:	d109      	bne.n	80199e2 <_fx_flac_process_decoded_frame+0xa2>
			inst->chan_cur = 0U;
 80199ce:	68fb      	ldr	r3, [r7, #12]
 80199d0:	2200      	movs	r2, #0
 80199d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			inst->blk_cur++;
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80199da:	3301      	adds	r3, #1
 80199dc:	b29a      	uxth	r2, r3
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	859a      	strh	r2, [r3, #44]	; 0x2c
		}
		tar++;
 80199e2:	69bb      	ldr	r3, [r7, #24]
 80199e4:	3301      	adds	r3, #1
 80199e6:	61bb      	str	r3, [r7, #24]
	while (tar < n_smpls_rem) {
 80199e8:	69ba      	ldr	r2, [r7, #24]
 80199ea:	69fb      	ldr	r3, [r7, #28]
 80199ec:	429a      	cmp	r2, r3
 80199ee:	d3ce      	bcc.n	801998e <_fx_flac_process_decoded_frame+0x4e>
	}

	/* Inform the caller about the number of samples written */
	*out_len = tar;
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	69ba      	ldr	r2, [r7, #24]
 80199f4:	601a      	str	r2, [r3, #0]

	/* We're done with this frame! */
	if (inst->blk_cur == fh->block_size) {
 80199f6:	68fb      	ldr	r3, [r7, #12]
 80199f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80199fa:	461a      	mov	r2, r3
 80199fc:	697b      	ldr	r3, [r7, #20]
 80199fe:	689b      	ldr	r3, [r3, #8]
 8019a00:	429a      	cmp	r2, r3
 8019a02:	d104      	bne.n	8019a0e <_fx_flac_process_decoded_frame+0xce>
		inst->state = FLAC_END_OF_FRAME;
 8019a04:	68fb      	ldr	r3, [r7, #12]
 8019a06:	2206      	movs	r2, #6
 8019a08:	761a      	strb	r2, [r3, #24]
		return true;
 8019a0a:	2301      	movs	r3, #1
 8019a0c:	e000      	b.n	8019a10 <_fx_flac_process_decoded_frame+0xd0>
	}

	/* Since we're here, we need more space in the output array. */
	return false;
 8019a0e:	2300      	movs	r3, #0
}
 8019a10:	4618      	mov	r0, r3
 8019a12:	3724      	adds	r7, #36	; 0x24
 8019a14:	46bd      	mov	sp, r7
 8019a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a1a:	4770      	bx	lr

08019a1c <fx_flac_size>:
/******************************************************************************
 * PUBLIC API                                                                 *
 ******************************************************************************/

uint32_t fx_flac_size(uint32_t max_block_size, uint8_t max_channels)
{
 8019a1c:	b580      	push	{r7, lr}
 8019a1e:	b084      	sub	sp, #16
 8019a20:	af00      	add	r7, sp, #0
 8019a22:	6078      	str	r0, [r7, #4]
 8019a24:	460b      	mov	r3, r1
 8019a26:	70fb      	strb	r3, [r7, #3]
	/* Calculate the size of the fixed-size structures */
	uint32_t size;
	bool ok = _fx_flac_check_params(max_block_size, max_channels) &&
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	b29b      	uxth	r3, r3
 8019a2c:	78fa      	ldrb	r2, [r7, #3]
 8019a2e:	4611      	mov	r1, r2
 8019a30:	4618      	mov	r0, r3
 8019a32:	f7fe fbf9 	bl	8018228 <_fx_flac_check_params>
 8019a36:	4603      	mov	r3, r0
	          fx_mem_init_size(&size) &&
	          fx_mem_update_size(&size, sizeof(fx_flac_t)) &&
	          fx_mem_update_size(&size, sizeof(fx_flac_metadata_t)) &&
	          fx_mem_update_size(&size, sizeof(fx_flac_streaminfo_t)) &&
	          fx_mem_update_size(&size, sizeof(fx_flac_frame_header_t)) &&
	          fx_mem_update_size(&size, sizeof(fx_flac_subframe_header_t)) &&
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d03f      	beq.n	8019abc <fx_flac_size+0xa0>
	          fx_mem_init_size(&size) &&
 8019a3c:	f107 0308 	add.w	r3, r7, #8
 8019a40:	4618      	mov	r0, r3
 8019a42:	f7fe fb49 	bl	80180d8 <fx_mem_init_size>
 8019a46:	4603      	mov	r3, r0
	bool ok = _fx_flac_check_params(max_block_size, max_channels) &&
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	d037      	beq.n	8019abc <fx_flac_size+0xa0>
	          fx_mem_update_size(&size, sizeof(fx_flac_t)) &&
 8019a4c:	f107 0308 	add.w	r3, r7, #8
 8019a50:	2168      	movs	r1, #104	; 0x68
 8019a52:	4618      	mov	r0, r3
 8019a54:	f7fe fb70 	bl	8018138 <fx_mem_update_size>
 8019a58:	4603      	mov	r3, r0
	          fx_mem_init_size(&size) &&
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d02e      	beq.n	8019abc <fx_flac_size+0xa0>
	          fx_mem_update_size(&size, sizeof(fx_flac_metadata_t)) &&
 8019a5e:	f107 0308 	add.w	r3, r7, #8
 8019a62:	2108      	movs	r1, #8
 8019a64:	4618      	mov	r0, r3
 8019a66:	f7fe fb67 	bl	8018138 <fx_mem_update_size>
 8019a6a:	4603      	mov	r3, r0
	          fx_mem_update_size(&size, sizeof(fx_flac_t)) &&
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d025      	beq.n	8019abc <fx_flac_size+0xa0>
	          fx_mem_update_size(&size, sizeof(fx_flac_streaminfo_t)) &&
 8019a70:	f107 0308 	add.w	r3, r7, #8
 8019a74:	2130      	movs	r1, #48	; 0x30
 8019a76:	4618      	mov	r0, r3
 8019a78:	f7fe fb5e 	bl	8018138 <fx_mem_update_size>
 8019a7c:	4603      	mov	r3, r0
	          fx_mem_update_size(&size, sizeof(fx_flac_metadata_t)) &&
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	d01c      	beq.n	8019abc <fx_flac_size+0xa0>
	          fx_mem_update_size(&size, sizeof(fx_flac_frame_header_t)) &&
 8019a82:	f107 0308 	add.w	r3, r7, #8
 8019a86:	2128      	movs	r1, #40	; 0x28
 8019a88:	4618      	mov	r0, r3
 8019a8a:	f7fe fb55 	bl	8018138 <fx_mem_update_size>
 8019a8e:	4603      	mov	r3, r0
	          fx_mem_update_size(&size, sizeof(fx_flac_streaminfo_t)) &&
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d013      	beq.n	8019abc <fx_flac_size+0xa0>
	          fx_mem_update_size(&size, sizeof(fx_flac_subframe_header_t)) &&
 8019a94:	f107 0308 	add.w	r3, r7, #8
 8019a98:	2110      	movs	r1, #16
 8019a9a:	4618      	mov	r0, r3
 8019a9c:	f7fe fb4c 	bl	8018138 <fx_mem_update_size>
 8019aa0:	4603      	mov	r3, r0
	          fx_mem_update_size(&size, sizeof(fx_flac_frame_header_t)) &&
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d00a      	beq.n	8019abc <fx_flac_size+0xa0>
	          fx_mem_update_size(&size, sizeof(int32_t) * 32U);
 8019aa6:	f107 0308 	add.w	r3, r7, #8
 8019aaa:	2180      	movs	r1, #128	; 0x80
 8019aac:	4618      	mov	r0, r3
 8019aae:	f7fe fb43 	bl	8018138 <fx_mem_update_size>
 8019ab2:	4603      	mov	r3, r0
	          fx_mem_update_size(&size, sizeof(fx_flac_subframe_header_t)) &&
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d001      	beq.n	8019abc <fx_flac_size+0xa0>
 8019ab8:	2301      	movs	r3, #1
 8019aba:	e000      	b.n	8019abe <fx_flac_size+0xa2>
 8019abc:	2300      	movs	r3, #0
	bool ok = _fx_flac_check_params(max_block_size, max_channels) &&
 8019abe:	73fb      	strb	r3, [r7, #15]
 8019ac0:	7bfb      	ldrb	r3, [r7, #15]
 8019ac2:	f003 0301 	and.w	r3, r3, #1
 8019ac6:	73fb      	strb	r3, [r7, #15]

	/* Calculate the size of the structures depending on the given parameters.
	 */
	for (uint8_t i = 0; i < max_channels; i++) {
 8019ac8:	2300      	movs	r3, #0
 8019aca:	73bb      	strb	r3, [r7, #14]
 8019acc:	e018      	b.n	8019b00 <fx_flac_size+0xe4>
		ok = ok && fx_mem_update_size(&size, sizeof(int32_t) * max_block_size);
 8019ace:	7bfb      	ldrb	r3, [r7, #15]
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	d00c      	beq.n	8019aee <fx_flac_size+0xd2>
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	009a      	lsls	r2, r3, #2
 8019ad8:	f107 0308 	add.w	r3, r7, #8
 8019adc:	4611      	mov	r1, r2
 8019ade:	4618      	mov	r0, r3
 8019ae0:	f7fe fb2a 	bl	8018138 <fx_mem_update_size>
 8019ae4:	4603      	mov	r3, r0
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	d001      	beq.n	8019aee <fx_flac_size+0xd2>
 8019aea:	2301      	movs	r3, #1
 8019aec:	e000      	b.n	8019af0 <fx_flac_size+0xd4>
 8019aee:	2300      	movs	r3, #0
 8019af0:	73fb      	strb	r3, [r7, #15]
 8019af2:	7bfb      	ldrb	r3, [r7, #15]
 8019af4:	f003 0301 	and.w	r3, r3, #1
 8019af8:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < max_channels; i++) {
 8019afa:	7bbb      	ldrb	r3, [r7, #14]
 8019afc:	3301      	adds	r3, #1
 8019afe:	73bb      	strb	r3, [r7, #14]
 8019b00:	7bba      	ldrb	r2, [r7, #14]
 8019b02:	78fb      	ldrb	r3, [r7, #3]
 8019b04:	429a      	cmp	r2, r3
 8019b06:	d3e2      	bcc.n	8019ace <fx_flac_size+0xb2>
	}
	return ok ? size : 0;
 8019b08:	7bfb      	ldrb	r3, [r7, #15]
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	d001      	beq.n	8019b12 <fx_flac_size+0xf6>
 8019b0e:	68bb      	ldr	r3, [r7, #8]
 8019b10:	e000      	b.n	8019b14 <fx_flac_size+0xf8>
 8019b12:	2300      	movs	r3, #0
}
 8019b14:	4618      	mov	r0, r3
 8019b16:	3710      	adds	r7, #16
 8019b18:	46bd      	mov	sp, r7
 8019b1a:	bd80      	pop	{r7, pc}

08019b1c <fx_flac_init>:

fx_flac_t *fx_flac_init(void *mem, uint16_t max_block_size,
                        uint8_t max_channels)
{
 8019b1c:	b590      	push	{r4, r7, lr}
 8019b1e:	b087      	sub	sp, #28
 8019b20:	af00      	add	r7, sp, #0
 8019b22:	6078      	str	r0, [r7, #4]
 8019b24:	460b      	mov	r3, r1
 8019b26:	807b      	strh	r3, [r7, #2]
 8019b28:	4613      	mov	r3, r2
 8019b2a:	707b      	strb	r3, [r7, #1]
	/* Make sure the parameters are valid. */
	if (!_fx_flac_check_params(max_block_size, max_channels)) {
 8019b2c:	787a      	ldrb	r2, [r7, #1]
 8019b2e:	887b      	ldrh	r3, [r7, #2]
 8019b30:	4611      	mov	r1, r2
 8019b32:	4618      	mov	r0, r3
 8019b34:	f7fe fb78 	bl	8018228 <_fx_flac_check_params>
 8019b38:	4603      	mov	r3, r0
 8019b3a:	f083 0301 	eor.w	r3, r3, #1
 8019b3e:	b2db      	uxtb	r3, r3
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d001      	beq.n	8019b48 <fx_flac_init+0x2c>
		return NULL;
 8019b44:	2300      	movs	r3, #0
 8019b46:	e066      	b.n	8019c16 <fx_flac_init+0xfa>
	}

	/* Abort if mem is NULL to allow passing malloc as a direct argument to this
	   code. Furthermore, store the original "mem" pointer and return it later
	   so the calling code is safe to pass the returned pointer to free. */
	fx_flac_t *inst_unaligned = (fx_flac_t *)mem;
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	617b      	str	r3, [r7, #20]
	if (mem) {
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	d060      	beq.n	8019c14 <fx_flac_init+0xf8>
		/* Fetch the base address of the flac_t address. */
		fx_flac_t *inst = (fx_flac_t *)fx_mem_align(&mem, sizeof(fx_flac_t));
 8019b52:	1d3b      	adds	r3, r7, #4
 8019b54:	2168      	movs	r1, #104	; 0x68
 8019b56:	4618      	mov	r0, r3
 8019b58:	f7fe fb1a 	bl	8018190 <fx_mem_align>
 8019b5c:	60f8      	str	r0, [r7, #12]

		/* Copy the given parameters */
		inst->max_block_size = max_block_size;
 8019b5e:	68fb      	ldr	r3, [r7, #12]
 8019b60:	887a      	ldrh	r2, [r7, #2]
 8019b62:	841a      	strh	r2, [r3, #32]
		inst->max_channels = max_channels;
 8019b64:	68fb      	ldr	r3, [r7, #12]
 8019b66:	787a      	ldrb	r2, [r7, #1]
 8019b68:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

		/* Fetch the base addresses of the internal pointers. */
		inst->metadata = (fx_flac_metadata_t *)fx_mem_align(
 8019b6c:	1d3b      	adds	r3, r7, #4
 8019b6e:	2108      	movs	r1, #8
 8019b70:	4618      	mov	r0, r3
 8019b72:	f7fe fb0d 	bl	8018190 <fx_mem_align>
 8019b76:	4602      	mov	r2, r0
 8019b78:	68fb      	ldr	r3, [r7, #12]
 8019b7a:	635a      	str	r2, [r3, #52]	; 0x34
		    &mem, sizeof(fx_flac_metadata_t));
		inst->streaminfo = (fx_flac_streaminfo_t *)fx_mem_align(
 8019b7c:	1d3b      	adds	r3, r7, #4
 8019b7e:	2130      	movs	r1, #48	; 0x30
 8019b80:	4618      	mov	r0, r3
 8019b82:	f7fe fb05 	bl	8018190 <fx_mem_align>
 8019b86:	4602      	mov	r2, r0
 8019b88:	68fb      	ldr	r3, [r7, #12]
 8019b8a:	639a      	str	r2, [r3, #56]	; 0x38
		    &mem, sizeof(fx_flac_streaminfo_t));
		inst->frame_header = (fx_flac_frame_header_t *)fx_mem_align(
 8019b8c:	1d3b      	adds	r3, r7, #4
 8019b8e:	2128      	movs	r1, #40	; 0x28
 8019b90:	4618      	mov	r0, r3
 8019b92:	f7fe fafd 	bl	8018190 <fx_mem_align>
 8019b96:	4602      	mov	r2, r0
 8019b98:	68fb      	ldr	r3, [r7, #12]
 8019b9a:	63da      	str	r2, [r3, #60]	; 0x3c
		    &mem, sizeof(fx_flac_frame_header_t));
		inst->subframe_header = (fx_flac_subframe_header_t *)fx_mem_align(
 8019b9c:	1d3b      	adds	r3, r7, #4
 8019b9e:	2110      	movs	r1, #16
 8019ba0:	4618      	mov	r0, r3
 8019ba2:	f7fe faf5 	bl	8018190 <fx_mem_align>
 8019ba6:	4602      	mov	r2, r0
 8019ba8:	68fb      	ldr	r3, [r7, #12]
 8019baa:	641a      	str	r2, [r3, #64]	; 0x40
		    &mem, sizeof(fx_flac_subframe_header_t));
		inst->qbuf = (int32_t *)fx_mem_align(&mem, sizeof(int32_t) * 32U);
 8019bac:	1d3b      	adds	r3, r7, #4
 8019bae:	2180      	movs	r1, #128	; 0x80
 8019bb0:	4618      	mov	r0, r3
 8019bb2:	f7fe faed 	bl	8018190 <fx_mem_align>
 8019bb6:	4602      	mov	r2, r0
 8019bb8:	68fb      	ldr	r3, [r7, #12]
 8019bba:	645a      	str	r2, [r3, #68]	; 0x44

		/* Compute the addresses of the per-channel buffers */
		for (uint8_t i = 0; i < FLAC_MAX_CHANNEL_COUNT; i++) {
 8019bbc:	2300      	movs	r3, #0
 8019bbe:	74fb      	strb	r3, [r7, #19]
 8019bc0:	e008      	b.n	8019bd4 <fx_flac_init+0xb8>
			inst->blkbuf[i] = NULL;
 8019bc2:	7cfa      	ldrb	r2, [r7, #19]
 8019bc4:	68fb      	ldr	r3, [r7, #12]
 8019bc6:	3212      	adds	r2, #18
 8019bc8:	2100      	movs	r1, #0
 8019bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (uint8_t i = 0; i < FLAC_MAX_CHANNEL_COUNT; i++) {
 8019bce:	7cfb      	ldrb	r3, [r7, #19]
 8019bd0:	3301      	adds	r3, #1
 8019bd2:	74fb      	strb	r3, [r7, #19]
 8019bd4:	7cfb      	ldrb	r3, [r7, #19]
 8019bd6:	2b07      	cmp	r3, #7
 8019bd8:	d9f3      	bls.n	8019bc2 <fx_flac_init+0xa6>
		}
		for (uint8_t i = 0; i < max_channels; i++) {
 8019bda:	2300      	movs	r3, #0
 8019bdc:	74bb      	strb	r3, [r7, #18]
 8019bde:	e010      	b.n	8019c02 <fx_flac_init+0xe6>
			inst->blkbuf[i] =
			    (int32_t *)fx_mem_align(&mem, sizeof(int32_t) * max_block_size);
 8019be0:	887b      	ldrh	r3, [r7, #2]
 8019be2:	009a      	lsls	r2, r3, #2
			inst->blkbuf[i] =
 8019be4:	7cbc      	ldrb	r4, [r7, #18]
			    (int32_t *)fx_mem_align(&mem, sizeof(int32_t) * max_block_size);
 8019be6:	1d3b      	adds	r3, r7, #4
 8019be8:	4611      	mov	r1, r2
 8019bea:	4618      	mov	r0, r3
 8019bec:	f7fe fad0 	bl	8018190 <fx_mem_align>
 8019bf0:	4601      	mov	r1, r0
			inst->blkbuf[i] =
 8019bf2:	68fb      	ldr	r3, [r7, #12]
 8019bf4:	f104 0212 	add.w	r2, r4, #18
 8019bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (uint8_t i = 0; i < max_channels; i++) {
 8019bfc:	7cbb      	ldrb	r3, [r7, #18]
 8019bfe:	3301      	adds	r3, #1
 8019c00:	74bb      	strb	r3, [r7, #18]
 8019c02:	7cba      	ldrb	r2, [r7, #18]
 8019c04:	787b      	ldrb	r3, [r7, #1]
 8019c06:	429a      	cmp	r2, r3
 8019c08:	d3ea      	bcc.n	8019be0 <fx_flac_init+0xc4>
		}

		/* Reset the instance, i.e. zero most/all fields. */
		fx_flac_reset(inst);
 8019c0a:	68f8      	ldr	r0, [r7, #12]
 8019c0c:	f000 f807 	bl	8019c1e <fx_flac_reset>

		inst_unaligned = inst;
 8019c10:	68fb      	ldr	r3, [r7, #12]
 8019c12:	617b      	str	r3, [r7, #20]
	}
	/* Return the original pointer. */
	return inst_unaligned;
 8019c14:	697b      	ldr	r3, [r7, #20]
}
 8019c16:	4618      	mov	r0, r3
 8019c18:	371c      	adds	r7, #28
 8019c1a:	46bd      	mov	sp, r7
 8019c1c:	bd90      	pop	{r4, r7, pc}

08019c1e <fx_flac_reset>:

void fx_flac_reset(fx_flac_t *inst)
{
 8019c1e:	b580      	push	{r7, lr}
 8019c20:	b082      	sub	sp, #8
 8019c22:	af00      	add	r7, sp, #0
 8019c24:	6078      	str	r0, [r7, #4]
	inst = (fx_flac_t *)FX_ALIGN_ADDR(inst);
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	330f      	adds	r3, #15
 8019c2a:	f023 030f 	bic.w	r3, r3, #15
 8019c2e:	607b      	str	r3, [r7, #4]

	/* Initialize the bitstream reader */
	fx_bitstream_init(&inst->bitstream);
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	4618      	mov	r0, r3
 8019c34:	f7fe f89c 	bl	8017d70 <fx_bitstream_init>

	/* Initialize the current metadata block header */
	FX_MEM_ZERO_ALIGNED(inst->metadata);
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019c3c:	2108      	movs	r1, #8
 8019c3e:	4618      	mov	r0, r3
 8019c40:	f7fe fab6 	bl	80181b0 <fx_mem_zero_aligned>
	inst->metadata->type = META_TYPE_INVALID;
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019c48:	227f      	movs	r2, #127	; 0x7f
 8019c4a:	705a      	strb	r2, [r3, #1]

	/* Initialize the streaminfo structure */
	FX_MEM_ZERO_ALIGNED(inst->streaminfo);
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019c50:	2130      	movs	r1, #48	; 0x30
 8019c52:	4618      	mov	r0, r3
 8019c54:	f7fe faac 	bl	80181b0 <fx_mem_zero_aligned>

	/* Initialize the frame_header structure */
	FX_MEM_ZERO_ALIGNED(inst->frame_header);
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c5c:	2128      	movs	r1, #40	; 0x28
 8019c5e:	4618      	mov	r0, r3
 8019c60:	f7fe faa6 	bl	80181b0 <fx_mem_zero_aligned>

	/* Initialize the subframe_header structure */
	FX_MEM_ZERO_ALIGNED(inst->subframe_header);
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c68:	2110      	movs	r1, #16
 8019c6a:	4618      	mov	r0, r3
 8019c6c:	f7fe faa0 	bl	80181b0 <fx_mem_zero_aligned>

	/* Initialize private member variables */
	inst->state = FLAC_INIT;
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	2200      	movs	r2, #0
 8019c74:	761a      	strb	r2, [r3, #24]
	inst->priv_state = FLAC_SYNC_INIT;
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	2200      	movs	r2, #0
 8019c7a:	835a      	strh	r2, [r3, #26]
	inst->n_bytes_rem = 0U;
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	2200      	movs	r2, #0
 8019c80:	61da      	str	r2, [r3, #28]
	inst->crc8 = 0U;
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	2200      	movs	r2, #0
 8019c86:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->coef_cur = 0U;
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	2200      	movs	r2, #0
 8019c8e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	inst->partition_cur = 0U;
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	2200      	movs	r2, #0
 8019c96:	849a      	strh	r2, [r3, #36]	; 0x24
	inst->partition_sample = 0U;
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	2200      	movs	r2, #0
 8019c9c:	84da      	strh	r2, [r3, #38]	; 0x26
	inst->rice_unary_counter = 0U;
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	2200      	movs	r2, #0
 8019ca2:	851a      	strh	r2, [r3, #40]	; 0x28
	inst->chan_cur = 0U;
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	2200      	movs	r2, #0
 8019ca8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	inst->blk_cur = 0U;
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	2200      	movs	r2, #0
 8019cb0:	859a      	strh	r2, [r3, #44]	; 0x2c
}
 8019cb2:	bf00      	nop
 8019cb4:	3708      	adds	r7, #8
 8019cb6:	46bd      	mov	sp, r7
 8019cb8:	bd80      	pop	{r7, pc}
	...

08019cbc <fx_flac_process>:
}

fx_flac_state_t fx_flac_process(fx_flac_t *inst, const uint8_t *in,
                                uint32_t *in_len, int32_t *out,
                                uint32_t *out_len)
{
 8019cbc:	b580      	push	{r7, lr}
 8019cbe:	b088      	sub	sp, #32
 8019cc0:	af00      	add	r7, sp, #0
 8019cc2:	60f8      	str	r0, [r7, #12]
 8019cc4:	60b9      	str	r1, [r7, #8]
 8019cc6:	607a      	str	r2, [r7, #4]
 8019cc8:	603b      	str	r3, [r7, #0]
	inst = (fx_flac_t *)FX_ALIGN_ADDR(inst);
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	330f      	adds	r3, #15
 8019cce:	f023 030f 	bic.w	r3, r3, #15
 8019cd2:	60fb      	str	r3, [r7, #12]

	/* Set the current bytestream source to the provided input buffer */
	fx_bitstream_t *bs = &inst->bitstream; /* Alias */
 8019cd4:	68fb      	ldr	r3, [r7, #12]
 8019cd6:	61bb      	str	r3, [r7, #24]
	fx_bitstream_set_source(bs, in, *in_len);
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	681b      	ldr	r3, [r3, #0]
 8019cdc:	461a      	mov	r2, r3
 8019cde:	68b9      	ldr	r1, [r7, #8]
 8019ce0:	69b8      	ldr	r0, [r7, #24]
 8019ce2:	f7fe f98b 	bl	8017ffc <fx_bitstream_set_source>

	/* Advance the statemachine */
	bool done = false;
 8019ce6:	2300      	movs	r3, #0
 8019ce8:	77fb      	strb	r3, [r7, #31]
	uint32_t out_len_ = 0U;
 8019cea:	2300      	movs	r3, #0
 8019cec:	617b      	str	r3, [r7, #20]
	fx_flac_state_t old_state = inst->state;
 8019cee:	68fb      	ldr	r3, [r7, #12]
 8019cf0:	7e1b      	ldrb	r3, [r3, #24]
 8019cf2:	77bb      	strb	r3, [r7, #30]
	while (!done) {
 8019cf4:	e0ad      	b.n	8019e52 <fx_flac_process+0x196>
		/* Abort once we've reached an error state. */
		if (inst->state == FLAC_ERR) {
 8019cf6:	68fb      	ldr	r3, [r7, #12]
 8019cf8:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8019cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d00:	d102      	bne.n	8019d08 <fx_flac_process+0x4c>
			done = true;
 8019d02:	2301      	movs	r3, #1
 8019d04:	77fb      	strb	r3, [r7, #31]
			continue; /* Panic, all hope is lost! */
 8019d06:	e0a4      	b.n	8019e52 <fx_flac_process+0x196>
		}

		/* Automatically return once the state transitions to a relevant state,
		   even if there is still data to read. */
		if (old_state != inst->state) {
 8019d08:	68fb      	ldr	r3, [r7, #12]
 8019d0a:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8019d0e:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8019d12:	429a      	cmp	r2, r3
 8019d14:	d00c      	beq.n	8019d30 <fx_flac_process+0x74>
			old_state = inst->state;
 8019d16:	68fb      	ldr	r3, [r7, #12]
 8019d18:	7e1b      	ldrb	r3, [r3, #24]
 8019d1a:	77bb      	strb	r3, [r7, #30]
			switch (inst->state) {
 8019d1c:	68fb      	ldr	r3, [r7, #12]
 8019d1e:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8019d22:	2b02      	cmp	r3, #2
 8019d24:	d001      	beq.n	8019d2a <fx_flac_process+0x6e>
 8019d26:	2b06      	cmp	r3, #6
 8019d28:	d104      	bne.n	8019d34 <fx_flac_process+0x78>
				case FLAC_END_OF_METADATA:
				case FLAC_END_OF_FRAME:
					done = true; /* Good point to return to the caller */
 8019d2a:	2301      	movs	r3, #1
 8019d2c:	77fb      	strb	r3, [r7, #31]
					continue;
 8019d2e:	e090      	b.n	8019e52 <fx_flac_process+0x196>
				default:
					break;
			}
		}
 8019d30:	bf00      	nop
 8019d32:	e000      	b.n	8019d36 <fx_flac_process+0x7a>
					break;
 8019d34:	bf00      	nop

		/* Main state machine. Dispatch calls to the corresponding state
		   handlers. These will returns false in case there is no more data
		   to read/space to write to. */
		switch (inst->state) {
 8019d36:	68fb      	ldr	r3, [r7, #12]
 8019d38:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8019d3c:	2b06      	cmp	r3, #6
 8019d3e:	f200 8084 	bhi.w	8019e4a <fx_flac_process+0x18e>
 8019d42:	a201      	add	r2, pc, #4	; (adr r2, 8019d48 <fx_flac_process+0x8c>)
 8019d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d48:	08019d65 	.word	0x08019d65
 8019d4c:	08019d89 	.word	0x08019d89
 8019d50:	08019dad 	.word	0x08019dad
 8019d54:	08019dbd 	.word	0x08019dbd
 8019d58:	08019de1 	.word	0x08019de1
 8019d5c:	08019e05 	.word	0x08019e05
 8019d60:	08019dad 	.word	0x08019dad
			case FLAC_INIT:
				done = !_fx_flac_process_init(inst);
 8019d64:	68f8      	ldr	r0, [r7, #12]
 8019d66:	f7fe fc95 	bl	8018694 <_fx_flac_process_init>
 8019d6a:	4603      	mov	r3, r0
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	bf14      	ite	ne
 8019d70:	2301      	movne	r3, #1
 8019d72:	2300      	moveq	r3, #0
 8019d74:	b2db      	uxtb	r3, r3
 8019d76:	f083 0301 	eor.w	r3, r3, #1
 8019d7a:	b2db      	uxtb	r3, r3
 8019d7c:	77fb      	strb	r3, [r7, #31]
 8019d7e:	7ffb      	ldrb	r3, [r7, #31]
 8019d80:	f003 0301 	and.w	r3, r3, #1
 8019d84:	77fb      	strb	r3, [r7, #31]
				break;
 8019d86:	e064      	b.n	8019e52 <fx_flac_process+0x196>
			case FLAC_IN_METADATA:
				done = !_fx_flac_process_in_metadata(inst);
 8019d88:	68f8      	ldr	r0, [r7, #12]
 8019d8a:	f7fe fcdd 	bl	8018748 <_fx_flac_process_in_metadata>
 8019d8e:	4603      	mov	r3, r0
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	bf14      	ite	ne
 8019d94:	2301      	movne	r3, #1
 8019d96:	2300      	moveq	r3, #0
 8019d98:	b2db      	uxtb	r3, r3
 8019d9a:	f083 0301 	eor.w	r3, r3, #1
 8019d9e:	b2db      	uxtb	r3, r3
 8019da0:	77fb      	strb	r3, [r7, #31]
 8019da2:	7ffb      	ldrb	r3, [r7, #31]
 8019da4:	f003 0301 	and.w	r3, r3, #1
 8019da8:	77fb      	strb	r3, [r7, #31]
				break;
 8019daa:	e052      	b.n	8019e52 <fx_flac_process+0x196>
			case FLAC_END_OF_METADATA:
			case FLAC_END_OF_FRAME:
				inst->state = FLAC_SEARCH_FRAME;
 8019dac:	68fb      	ldr	r3, [r7, #12]
 8019dae:	2203      	movs	r2, #3
 8019db0:	761a      	strb	r2, [r3, #24]
				inst->priv_state = FLAC_FRAME_SYNC;
 8019db2:	68fb      	ldr	r3, [r7, #12]
 8019db4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8019db8:	835a      	strh	r2, [r3, #26]
				break;
 8019dba:	e04a      	b.n	8019e52 <fx_flac_process+0x196>
			case FLAC_SEARCH_FRAME:
				done = !_fx_flac_process_search_frame(inst);
 8019dbc:	68f8      	ldr	r0, [r7, #12]
 8019dbe:	f7fe fea5 	bl	8018b0c <_fx_flac_process_search_frame>
 8019dc2:	4603      	mov	r3, r0
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	bf14      	ite	ne
 8019dc8:	2301      	movne	r3, #1
 8019dca:	2300      	moveq	r3, #0
 8019dcc:	b2db      	uxtb	r3, r3
 8019dce:	f083 0301 	eor.w	r3, r3, #1
 8019dd2:	b2db      	uxtb	r3, r3
 8019dd4:	77fb      	strb	r3, [r7, #31]
 8019dd6:	7ffb      	ldrb	r3, [r7, #31]
 8019dd8:	f003 0301 	and.w	r3, r3, #1
 8019ddc:	77fb      	strb	r3, [r7, #31]
				break;
 8019dde:	e038      	b.n	8019e52 <fx_flac_process+0x196>
			case FLAC_IN_FRAME:
				done = !_fx_flac_process_in_frame(inst);
 8019de0:	68f8      	ldr	r0, [r7, #12]
 8019de2:	f7ff f893 	bl	8018f0c <_fx_flac_process_in_frame>
 8019de6:	4603      	mov	r3, r0
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	bf14      	ite	ne
 8019dec:	2301      	movne	r3, #1
 8019dee:	2300      	moveq	r3, #0
 8019df0:	b2db      	uxtb	r3, r3
 8019df2:	f083 0301 	eor.w	r3, r3, #1
 8019df6:	b2db      	uxtb	r3, r3
 8019df8:	77fb      	strb	r3, [r7, #31]
 8019dfa:	7ffb      	ldrb	r3, [r7, #31]
 8019dfc:	f003 0301 	and.w	r3, r3, #1
 8019e00:	77fb      	strb	r3, [r7, #31]
				break;
 8019e02:	e026      	b.n	8019e52 <fx_flac_process+0x196>
			case FLAC_DECODED_FRAME:
				/* If no output buffers are given, just discard the data. */
				if (!out || !out_len) {
 8019e04:	683b      	ldr	r3, [r7, #0]
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	d002      	beq.n	8019e10 <fx_flac_process+0x154>
 8019e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d103      	bne.n	8019e18 <fx_flac_process+0x15c>
					inst->state = FLAC_END_OF_FRAME;
 8019e10:	68fb      	ldr	r3, [r7, #12]
 8019e12:	2206      	movs	r2, #6
 8019e14:	761a      	strb	r2, [r3, #24]
					break;
 8019e16:	e01c      	b.n	8019e52 <fx_flac_process+0x196>
				}
				out_len_ = *out_len;
 8019e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e1a:	681b      	ldr	r3, [r3, #0]
 8019e1c:	617b      	str	r3, [r7, #20]
				done = !_fx_flac_process_decoded_frame(inst, out, &out_len_);
 8019e1e:	f107 0314 	add.w	r3, r7, #20
 8019e22:	461a      	mov	r2, r3
 8019e24:	6839      	ldr	r1, [r7, #0]
 8019e26:	68f8      	ldr	r0, [r7, #12]
 8019e28:	f7ff fd8a 	bl	8019940 <_fx_flac_process_decoded_frame>
 8019e2c:	4603      	mov	r3, r0
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	bf14      	ite	ne
 8019e32:	2301      	movne	r3, #1
 8019e34:	2300      	moveq	r3, #0
 8019e36:	b2db      	uxtb	r3, r3
 8019e38:	f083 0301 	eor.w	r3, r3, #1
 8019e3c:	b2db      	uxtb	r3, r3
 8019e3e:	77fb      	strb	r3, [r7, #31]
 8019e40:	7ffb      	ldrb	r3, [r7, #31]
 8019e42:	f003 0301 	and.w	r3, r3, #1
 8019e46:	77fb      	strb	r3, [r7, #31]
				break;
 8019e48:	e003      	b.n	8019e52 <fx_flac_process+0x196>
			default:
				inst->state = FLAC_ERR; /* Internal error */
 8019e4a:	68fb      	ldr	r3, [r7, #12]
 8019e4c:	22ff      	movs	r2, #255	; 0xff
 8019e4e:	761a      	strb	r2, [r3, #24]
				break;
 8019e50:	bf00      	nop
	while (!done) {
 8019e52:	7ffb      	ldrb	r3, [r7, #31]
 8019e54:	f083 0301 	eor.w	r3, r3, #1
 8019e58:	b2db      	uxtb	r3, r3
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	f47f af4b 	bne.w	8019cf6 <fx_flac_process+0x3a>
	}

	/* Write the number of bytes we read from the input stream to in_len, the
	   caller must not provide these bytes again. Also write the number of
	   samples we wrote to the output buffer. */
	if (out_len) {
 8019e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	d002      	beq.n	8019e6c <fx_flac_process+0x1b0>
		*out_len = out_len_;
 8019e66:	697a      	ldr	r2, [r7, #20]
 8019e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e6a:	601a      	str	r2, [r3, #0]
	}
	*in_len = bs->src - in;
 8019e6c:	69bb      	ldr	r3, [r7, #24]
 8019e6e:	689a      	ldr	r2, [r3, #8]
 8019e70:	68bb      	ldr	r3, [r7, #8]
 8019e72:	1ad3      	subs	r3, r2, r3
 8019e74:	461a      	mov	r2, r3
 8019e76:	687b      	ldr	r3, [r7, #4]
 8019e78:	601a      	str	r2, [r3, #0]

	/* Return the current state */
	return inst->state;
 8019e7a:	68fb      	ldr	r3, [r7, #12]
 8019e7c:	f993 3018 	ldrsb.w	r3, [r3, #24]
}
 8019e80:	4618      	mov	r0, r3
 8019e82:	3720      	adds	r7, #32
 8019e84:	46bd      	mov	sp, r7
 8019e86:	bd80      	pop	{r7, pc}

08019e88 <tx_complete_cb>:
void (*user_tx_complete_cb)(void);
void (*user_tx_halfcomplete_cb)(void);

/*----------------------------------------------------------------------*/

static void tx_complete_cb(I2S_HandleTypeDef *hi2s) {
 8019e88:	b580      	push	{r7, lr}
 8019e8a:	b082      	sub	sp, #8
 8019e8c:	af00      	add	r7, sp, #0
 8019e8e:	6078      	str	r0, [r7, #4]
  if(user_tx_complete_cb != NULL)
 8019e90:	4b05      	ldr	r3, [pc, #20]	; (8019ea8 <tx_complete_cb+0x20>)
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	2b00      	cmp	r3, #0
 8019e96:	d002      	beq.n	8019e9e <tx_complete_cb+0x16>
    user_tx_complete_cb();
 8019e98:	4b03      	ldr	r3, [pc, #12]	; (8019ea8 <tx_complete_cb+0x20>)
 8019e9a:	681b      	ldr	r3, [r3, #0]
 8019e9c:	4798      	blx	r3
}
 8019e9e:	bf00      	nop
 8019ea0:	3708      	adds	r7, #8
 8019ea2:	46bd      	mov	sp, r7
 8019ea4:	bd80      	pop	{r7, pc}
 8019ea6:	bf00      	nop
 8019ea8:	200103d8 	.word	0x200103d8

08019eac <tx_halfcomplete_cb>:

/*----------------------------------------------------------------------*/

static void tx_halfcomplete_cb(I2S_HandleTypeDef *hi2s) {
 8019eac:	b580      	push	{r7, lr}
 8019eae:	b082      	sub	sp, #8
 8019eb0:	af00      	add	r7, sp, #0
 8019eb2:	6078      	str	r0, [r7, #4]
  if(user_tx_halfcomplete_cb != NULL)
 8019eb4:	4b05      	ldr	r3, [pc, #20]	; (8019ecc <tx_halfcomplete_cb+0x20>)
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d002      	beq.n	8019ec2 <tx_halfcomplete_cb+0x16>
    user_tx_halfcomplete_cb();
 8019ebc:	4b03      	ldr	r3, [pc, #12]	; (8019ecc <tx_halfcomplete_cb+0x20>)
 8019ebe:	681b      	ldr	r3, [r3, #0]
 8019ec0:	4798      	blx	r3
}
 8019ec2:	bf00      	nop
 8019ec4:	3708      	adds	r7, #8
 8019ec6:	46bd      	mov	sp, r7
 8019ec8:	bd80      	pop	{r7, pc}
 8019eca:	bf00      	nop
 8019ecc:	200103d0 	.word	0x200103d0

08019ed0 <wrp_i2s_init>:

/*----------------------------------------------------------------------*/

int32_t wrp_i2s_init(I2sObject *obj, void (*cmpltcb)(void), void (*halfcmpltcb)(void)) {
 8019ed0:	b580      	push	{r7, lr}
 8019ed2:	b084      	sub	sp, #16
 8019ed4:	af00      	add	r7, sp, #0
 8019ed6:	60f8      	str	r0, [r7, #12]
 8019ed8:	60b9      	str	r1, [r7, #8]
 8019eda:	607a      	str	r2, [r7, #4]

  i2s = obj;
 8019edc:	4a0e      	ldr	r2, [pc, #56]	; (8019f18 <wrp_i2s_init+0x48>)
 8019ede:	68fb      	ldr	r3, [r7, #12]
 8019ee0:	6013      	str	r3, [r2, #0]
  i2s->buffer = (uint16_t *)i2s_dma_buf;
 8019ee2:	4b0d      	ldr	r3, [pc, #52]	; (8019f18 <wrp_i2s_init+0x48>)
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	4a0d      	ldr	r2, [pc, #52]	; (8019f1c <wrp_i2s_init+0x4c>)
 8019ee8:	609a      	str	r2, [r3, #8]
  i2s->buffer_size = DMA_BUF_SIZE;
 8019eea:	4b0b      	ldr	r3, [pc, #44]	; (8019f18 <wrp_i2s_init+0x48>)
 8019eec:	681b      	ldr	r3, [r3, #0]
 8019eee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019ef2:	60da      	str	r2, [r3, #12]

  user_tx_complete_cb = cmpltcb;
 8019ef4:	4a0a      	ldr	r2, [pc, #40]	; (8019f20 <wrp_i2s_init+0x50>)
 8019ef6:	68bb      	ldr	r3, [r7, #8]
 8019ef8:	6013      	str	r3, [r2, #0]
  user_tx_halfcomplete_cb = halfcmpltcb;
 8019efa:	4a0a      	ldr	r2, [pc, #40]	; (8019f24 <wrp_i2s_init+0x54>)
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	6013      	str	r3, [r2, #0]

  HAL_I2S_Assign_TxCpltCallback(tx_complete_cb);
 8019f00:	4809      	ldr	r0, [pc, #36]	; (8019f28 <wrp_i2s_init+0x58>)
 8019f02:	f7fd fec5 	bl	8017c90 <HAL_I2S_Assign_TxCpltCallback>
  HAL_I2S_Assign_TxHalfCpltCallback(tx_halfcomplete_cb);
 8019f06:	4809      	ldr	r0, [pc, #36]	; (8019f2c <wrp_i2s_init+0x5c>)
 8019f08:	f7fd fed2 	bl	8017cb0 <HAL_I2S_Assign_TxHalfCpltCallback>

  return 0;
 8019f0c:	2300      	movs	r3, #0
}
 8019f0e:	4618      	mov	r0, r3
 8019f10:	3710      	adds	r7, #16
 8019f12:	46bd      	mov	sp, r7
 8019f14:	bd80      	pop	{r7, pc}
 8019f16:	bf00      	nop
 8019f18:	200103d4 	.word	0x200103d4
 8019f1c:	200101b0 	.word	0x200101b0
 8019f20:	200103d8 	.word	0x200103d8
 8019f24:	200103d0 	.word	0x200103d0
 8019f28:	08019e89 	.word	0x08019e89
 8019f2c:	08019ead 	.word	0x08019ead

08019f30 <wrp_i2s_get_dma_buf>:

/*----------------------------------------------------------------------*/

int16_t *wrp_i2s_get_dma_buf(uint32_t *size) {
 8019f30:	b480      	push	{r7}
 8019f32:	b083      	sub	sp, #12
 8019f34:	af00      	add	r7, sp, #0
 8019f36:	6078      	str	r0, [r7, #4]
  if (i2s->buffer != NULL) {
 8019f38:	4b0b      	ldr	r3, [pc, #44]	; (8019f68 <wrp_i2s_get_dma_buf+0x38>)
 8019f3a:	681b      	ldr	r3, [r3, #0]
 8019f3c:	689b      	ldr	r3, [r3, #8]
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d008      	beq.n	8019f54 <wrp_i2s_get_dma_buf+0x24>
	*size = i2s->buffer_size;
 8019f42:	4b09      	ldr	r3, [pc, #36]	; (8019f68 <wrp_i2s_get_dma_buf+0x38>)
 8019f44:	681b      	ldr	r3, [r3, #0]
 8019f46:	68da      	ldr	r2, [r3, #12]
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	601a      	str	r2, [r3, #0]
    return (int16_t *)i2s->buffer;
 8019f4c:	4b06      	ldr	r3, [pc, #24]	; (8019f68 <wrp_i2s_get_dma_buf+0x38>)
 8019f4e:	681b      	ldr	r3, [r3, #0]
 8019f50:	689b      	ldr	r3, [r3, #8]
 8019f52:	e003      	b.n	8019f5c <wrp_i2s_get_dma_buf+0x2c>
  } else {
	 *size = 0;
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	2200      	movs	r2, #0
 8019f58:	601a      	str	r2, [r3, #0]
	 return NULL;
 8019f5a:	2300      	movs	r3, #0
  }
}
 8019f5c:	4618      	mov	r0, r3
 8019f5e:	370c      	adds	r7, #12
 8019f60:	46bd      	mov	sp, r7
 8019f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f66:	4770      	bx	lr
 8019f68:	200103d4 	.word	0x200103d4

08019f6c <wrp_i2s_tx>:

/*----------------------------------------------------------------------*/

int32_t wrp_i2s_tx(void) {
 8019f6c:	b580      	push	{r7, lr}
 8019f6e:	af00      	add	r7, sp, #0

  memset(i2s->buffer, 0, i2s->buffer_size);
 8019f70:	4b0c      	ldr	r3, [pc, #48]	; (8019fa4 <wrp_i2s_tx+0x38>)
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	6898      	ldr	r0, [r3, #8]
 8019f76:	4b0b      	ldr	r3, [pc, #44]	; (8019fa4 <wrp_i2s_tx+0x38>)
 8019f78:	681b      	ldr	r3, [r3, #0]
 8019f7a:	68db      	ldr	r3, [r3, #12]
 8019f7c:	461a      	mov	r2, r3
 8019f7e:	2100      	movs	r1, #0
 8019f80:	f000 f8dc 	bl	801a13c <memset>

  HAL_I2S_Transmit_DMA(i2s->handle, i2s->buffer, i2s->buffer_size);
 8019f84:	4b07      	ldr	r3, [pc, #28]	; (8019fa4 <wrp_i2s_tx+0x38>)
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	6818      	ldr	r0, [r3, #0]
 8019f8a:	4b06      	ldr	r3, [pc, #24]	; (8019fa4 <wrp_i2s_tx+0x38>)
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	6899      	ldr	r1, [r3, #8]
 8019f90:	4b04      	ldr	r3, [pc, #16]	; (8019fa4 <wrp_i2s_tx+0x38>)
 8019f92:	681b      	ldr	r3, [r3, #0]
 8019f94:	68db      	ldr	r3, [r3, #12]
 8019f96:	b29b      	uxth	r3, r3
 8019f98:	461a      	mov	r2, r3
 8019f9a:	f7f7 ff4f 	bl	8011e3c <HAL_I2S_Transmit_DMA>
  return 0;
 8019f9e:	2300      	movs	r3, #0
}
 8019fa0:	4618      	mov	r0, r3
 8019fa2:	bd80      	pop	{r7, pc}
 8019fa4:	200103d4 	.word	0x200103d4

08019fa8 <wrp_i2s_stop>:

/*----------------------------------------------------------------------*/

int32_t wrp_i2s_stop(void) {
 8019fa8:	b580      	push	{r7, lr}
 8019faa:	af00      	add	r7, sp, #0
  HAL_I2S_DMAStop(i2s->handle);
 8019fac:	4b04      	ldr	r3, [pc, #16]	; (8019fc0 <wrp_i2s_stop+0x18>)
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	681b      	ldr	r3, [r3, #0]
 8019fb2:	4618      	mov	r0, r3
 8019fb4:	f7f7 ffea 	bl	8011f8c <HAL_I2S_DMAStop>
  return 0;
 8019fb8:	2300      	movs	r3, #0
}
 8019fba:	4618      	mov	r0, r3
 8019fbc:	bd80      	pop	{r7, pc}
 8019fbe:	bf00      	nop
 8019fc0:	200103d4 	.word	0x200103d4

08019fc4 <wrp_mem_read>:
/*----------------------------------------------------------------------*/
/* FUNCTIONS -----------------------------------------------------------*/
/*----------------------------------------------------------------------*/

int32_t wrp_mem_read(uint8_t *buf, uint32_t offset, uint32_t size)
{
 8019fc4:	b580      	push	{r7, lr}
 8019fc6:	b084      	sub	sp, #16
 8019fc8:	af00      	add	r7, sp, #0
 8019fca:	60f8      	str	r0, [r7, #12]
 8019fcc:	60b9      	str	r1, [r7, #8]
 8019fce:	607a      	str	r2, [r7, #4]
	//Read code here:
	memcpy(buf, (void *)(mem_elem.offset + offset), size);
 8019fd0:	4b06      	ldr	r3, [pc, #24]	; (8019fec <wrp_mem_read+0x28>)
 8019fd2:	681a      	ldr	r2, [r3, #0]
 8019fd4:	68bb      	ldr	r3, [r7, #8]
 8019fd6:	4413      	add	r3, r2
 8019fd8:	687a      	ldr	r2, [r7, #4]
 8019fda:	4619      	mov	r1, r3
 8019fdc:	68f8      	ldr	r0, [r7, #12]
 8019fde:	f000 f89f 	bl	801a120 <memcpy>

	return 0;
 8019fe2:	2300      	movs	r3, #0
}
 8019fe4:	4618      	mov	r0, r3
 8019fe6:	3710      	adds	r7, #16
 8019fe8:	46bd      	mov	sp, r7
 8019fea:	bd80      	pop	{r7, pc}
 8019fec:	200103dc 	.word	0x200103dc

08019ff0 <wrp_mem_set_element>:

/**********************************************************************************/

int32_t wrp_mem_set_element(uint8_t idx)
{
 8019ff0:	b480      	push	{r7}
 8019ff2:	b083      	sub	sp, #12
 8019ff4:	af00      	add	r7, sp, #0
 8019ff6:	4603      	mov	r3, r0
 8019ff8:	71fb      	strb	r3, [r7, #7]
	//Retrieve size and offset here
	mem_elem.size = audio_clips[idx].size;
 8019ffa:	4b0e      	ldr	r3, [pc, #56]	; (801a034 <wrp_mem_set_element+0x44>)
 8019ffc:	6819      	ldr	r1, [r3, #0]
 8019ffe:	79fa      	ldrb	r2, [r7, #7]
 801a000:	4613      	mov	r3, r2
 801a002:	005b      	lsls	r3, r3, #1
 801a004:	4413      	add	r3, r2
 801a006:	011b      	lsls	r3, r3, #4
 801a008:	440b      	add	r3, r1
 801a00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a00c:	4a0a      	ldr	r2, [pc, #40]	; (801a038 <wrp_mem_set_element+0x48>)
 801a00e:	6053      	str	r3, [r2, #4]
	mem_elem.offset = audio_clips[idx].address;
 801a010:	4b08      	ldr	r3, [pc, #32]	; (801a034 <wrp_mem_set_element+0x44>)
 801a012:	6819      	ldr	r1, [r3, #0]
 801a014:	79fa      	ldrb	r2, [r7, #7]
 801a016:	4613      	mov	r3, r2
 801a018:	005b      	lsls	r3, r3, #1
 801a01a:	4413      	add	r3, r2
 801a01c:	011b      	lsls	r3, r3, #4
 801a01e:	440b      	add	r3, r1
 801a020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a022:	4a05      	ldr	r2, [pc, #20]	; (801a038 <wrp_mem_set_element+0x48>)
 801a024:	6013      	str	r3, [r2, #0]

	return 0;
 801a026:	2300      	movs	r3, #0
}
 801a028:	4618      	mov	r0, r3
 801a02a:	370c      	adds	r7, #12
 801a02c:	46bd      	mov	sp, r7
 801a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a032:	4770      	bx	lr
 801a034:	200103b0 	.word	0x200103b0
 801a038:	200103dc 	.word	0x200103dc

0801a03c <wrp_mem_get_size>:

/**********************************************************************************/

int32_t wrp_mem_get_size(void)
{
 801a03c:	b480      	push	{r7}
 801a03e:	af00      	add	r7, sp, #0
	return mem_elem.size;
 801a040:	4b03      	ldr	r3, [pc, #12]	; (801a050 <wrp_mem_get_size+0x14>)
 801a042:	685b      	ldr	r3, [r3, #4]
}
 801a044:	4618      	mov	r0, r3
 801a046:	46bd      	mov	sp, r7
 801a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a04c:	4770      	bx	lr
 801a04e:	bf00      	nop
 801a050:	200103dc 	.word	0x200103dc

0801a054 <wrp_mem_get_address>:

/**********************************************************************************/

int32_t wrp_mem_get_address(void)
{
 801a054:	b480      	push	{r7}
 801a056:	af00      	add	r7, sp, #0
	return mem_elem.offset;
 801a058:	4b03      	ldr	r3, [pc, #12]	; (801a068 <wrp_mem_get_address+0x14>)
 801a05a:	681b      	ldr	r3, [r3, #0]
}
 801a05c:	4618      	mov	r0, r3
 801a05e:	46bd      	mov	sp, r7
 801a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a064:	4770      	bx	lr
 801a066:	bf00      	nop
 801a068:	200103dc 	.word	0x200103dc

0801a06c <__assert_func>:
 801a06c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a06e:	4614      	mov	r4, r2
 801a070:	461a      	mov	r2, r3
 801a072:	4b09      	ldr	r3, [pc, #36]	; (801a098 <__assert_func+0x2c>)
 801a074:	681b      	ldr	r3, [r3, #0]
 801a076:	4605      	mov	r5, r0
 801a078:	68d8      	ldr	r0, [r3, #12]
 801a07a:	b14c      	cbz	r4, 801a090 <__assert_func+0x24>
 801a07c:	4b07      	ldr	r3, [pc, #28]	; (801a09c <__assert_func+0x30>)
 801a07e:	9100      	str	r1, [sp, #0]
 801a080:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a084:	4906      	ldr	r1, [pc, #24]	; (801a0a0 <__assert_func+0x34>)
 801a086:	462b      	mov	r3, r5
 801a088:	f000 f814 	bl	801a0b4 <fiprintf>
 801a08c:	f000 fc0c 	bl	801a8a8 <abort>
 801a090:	4b04      	ldr	r3, [pc, #16]	; (801a0a4 <__assert_func+0x38>)
 801a092:	461c      	mov	r4, r3
 801a094:	e7f3      	b.n	801a07e <__assert_func+0x12>
 801a096:	bf00      	nop
 801a098:	200000a4 	.word	0x200000a4
 801a09c:	0801b2dc 	.word	0x0801b2dc
 801a0a0:	0801b2e9 	.word	0x0801b2e9
 801a0a4:	0801b317 	.word	0x0801b317

0801a0a8 <__errno>:
 801a0a8:	4b01      	ldr	r3, [pc, #4]	; (801a0b0 <__errno+0x8>)
 801a0aa:	6818      	ldr	r0, [r3, #0]
 801a0ac:	4770      	bx	lr
 801a0ae:	bf00      	nop
 801a0b0:	200000a4 	.word	0x200000a4

0801a0b4 <fiprintf>:
 801a0b4:	b40e      	push	{r1, r2, r3}
 801a0b6:	b503      	push	{r0, r1, lr}
 801a0b8:	4601      	mov	r1, r0
 801a0ba:	ab03      	add	r3, sp, #12
 801a0bc:	4805      	ldr	r0, [pc, #20]	; (801a0d4 <fiprintf+0x20>)
 801a0be:	f853 2b04 	ldr.w	r2, [r3], #4
 801a0c2:	6800      	ldr	r0, [r0, #0]
 801a0c4:	9301      	str	r3, [sp, #4]
 801a0c6:	f000 f86b 	bl	801a1a0 <_vfiprintf_r>
 801a0ca:	b002      	add	sp, #8
 801a0cc:	f85d eb04 	ldr.w	lr, [sp], #4
 801a0d0:	b003      	add	sp, #12
 801a0d2:	4770      	bx	lr
 801a0d4:	200000a4 	.word	0x200000a4

0801a0d8 <__libc_init_array>:
 801a0d8:	b570      	push	{r4, r5, r6, lr}
 801a0da:	4d0d      	ldr	r5, [pc, #52]	; (801a110 <__libc_init_array+0x38>)
 801a0dc:	4c0d      	ldr	r4, [pc, #52]	; (801a114 <__libc_init_array+0x3c>)
 801a0de:	1b64      	subs	r4, r4, r5
 801a0e0:	10a4      	asrs	r4, r4, #2
 801a0e2:	2600      	movs	r6, #0
 801a0e4:	42a6      	cmp	r6, r4
 801a0e6:	d109      	bne.n	801a0fc <__libc_init_array+0x24>
 801a0e8:	4d0b      	ldr	r5, [pc, #44]	; (801a118 <__libc_init_array+0x40>)
 801a0ea:	4c0c      	ldr	r4, [pc, #48]	; (801a11c <__libc_init_array+0x44>)
 801a0ec:	f000 ffb8 	bl	801b060 <_init>
 801a0f0:	1b64      	subs	r4, r4, r5
 801a0f2:	10a4      	asrs	r4, r4, #2
 801a0f4:	2600      	movs	r6, #0
 801a0f6:	42a6      	cmp	r6, r4
 801a0f8:	d105      	bne.n	801a106 <__libc_init_array+0x2e>
 801a0fa:	bd70      	pop	{r4, r5, r6, pc}
 801a0fc:	f855 3b04 	ldr.w	r3, [r5], #4
 801a100:	4798      	blx	r3
 801a102:	3601      	adds	r6, #1
 801a104:	e7ee      	b.n	801a0e4 <__libc_init_array+0xc>
 801a106:	f855 3b04 	ldr.w	r3, [r5], #4
 801a10a:	4798      	blx	r3
 801a10c:	3601      	adds	r6, #1
 801a10e:	e7f2      	b.n	801a0f6 <__libc_init_array+0x1e>
 801a110:	0801b3b8 	.word	0x0801b3b8
 801a114:	0801b3b8 	.word	0x0801b3b8
 801a118:	0801b3b8 	.word	0x0801b3b8
 801a11c:	0801b3bc 	.word	0x0801b3bc

0801a120 <memcpy>:
 801a120:	440a      	add	r2, r1
 801a122:	4291      	cmp	r1, r2
 801a124:	f100 33ff 	add.w	r3, r0, #4294967295
 801a128:	d100      	bne.n	801a12c <memcpy+0xc>
 801a12a:	4770      	bx	lr
 801a12c:	b510      	push	{r4, lr}
 801a12e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a132:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a136:	4291      	cmp	r1, r2
 801a138:	d1f9      	bne.n	801a12e <memcpy+0xe>
 801a13a:	bd10      	pop	{r4, pc}

0801a13c <memset>:
 801a13c:	4402      	add	r2, r0
 801a13e:	4603      	mov	r3, r0
 801a140:	4293      	cmp	r3, r2
 801a142:	d100      	bne.n	801a146 <memset+0xa>
 801a144:	4770      	bx	lr
 801a146:	f803 1b01 	strb.w	r1, [r3], #1
 801a14a:	e7f9      	b.n	801a140 <memset+0x4>

0801a14c <__sfputc_r>:
 801a14c:	6893      	ldr	r3, [r2, #8]
 801a14e:	3b01      	subs	r3, #1
 801a150:	2b00      	cmp	r3, #0
 801a152:	b410      	push	{r4}
 801a154:	6093      	str	r3, [r2, #8]
 801a156:	da08      	bge.n	801a16a <__sfputc_r+0x1e>
 801a158:	6994      	ldr	r4, [r2, #24]
 801a15a:	42a3      	cmp	r3, r4
 801a15c:	db01      	blt.n	801a162 <__sfputc_r+0x16>
 801a15e:	290a      	cmp	r1, #10
 801a160:	d103      	bne.n	801a16a <__sfputc_r+0x1e>
 801a162:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a166:	f000 badf 	b.w	801a728 <__swbuf_r>
 801a16a:	6813      	ldr	r3, [r2, #0]
 801a16c:	1c58      	adds	r0, r3, #1
 801a16e:	6010      	str	r0, [r2, #0]
 801a170:	7019      	strb	r1, [r3, #0]
 801a172:	4608      	mov	r0, r1
 801a174:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a178:	4770      	bx	lr

0801a17a <__sfputs_r>:
 801a17a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a17c:	4606      	mov	r6, r0
 801a17e:	460f      	mov	r7, r1
 801a180:	4614      	mov	r4, r2
 801a182:	18d5      	adds	r5, r2, r3
 801a184:	42ac      	cmp	r4, r5
 801a186:	d101      	bne.n	801a18c <__sfputs_r+0x12>
 801a188:	2000      	movs	r0, #0
 801a18a:	e007      	b.n	801a19c <__sfputs_r+0x22>
 801a18c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a190:	463a      	mov	r2, r7
 801a192:	4630      	mov	r0, r6
 801a194:	f7ff ffda 	bl	801a14c <__sfputc_r>
 801a198:	1c43      	adds	r3, r0, #1
 801a19a:	d1f3      	bne.n	801a184 <__sfputs_r+0xa>
 801a19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a1a0 <_vfiprintf_r>:
 801a1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1a4:	460d      	mov	r5, r1
 801a1a6:	b09d      	sub	sp, #116	; 0x74
 801a1a8:	4614      	mov	r4, r2
 801a1aa:	4698      	mov	r8, r3
 801a1ac:	4606      	mov	r6, r0
 801a1ae:	b118      	cbz	r0, 801a1b8 <_vfiprintf_r+0x18>
 801a1b0:	6983      	ldr	r3, [r0, #24]
 801a1b2:	b90b      	cbnz	r3, 801a1b8 <_vfiprintf_r+0x18>
 801a1b4:	f000 fc9a 	bl	801aaec <__sinit>
 801a1b8:	4b89      	ldr	r3, [pc, #548]	; (801a3e0 <_vfiprintf_r+0x240>)
 801a1ba:	429d      	cmp	r5, r3
 801a1bc:	d11b      	bne.n	801a1f6 <_vfiprintf_r+0x56>
 801a1be:	6875      	ldr	r5, [r6, #4]
 801a1c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a1c2:	07d9      	lsls	r1, r3, #31
 801a1c4:	d405      	bmi.n	801a1d2 <_vfiprintf_r+0x32>
 801a1c6:	89ab      	ldrh	r3, [r5, #12]
 801a1c8:	059a      	lsls	r2, r3, #22
 801a1ca:	d402      	bmi.n	801a1d2 <_vfiprintf_r+0x32>
 801a1cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a1ce:	f000 fd2b 	bl	801ac28 <__retarget_lock_acquire_recursive>
 801a1d2:	89ab      	ldrh	r3, [r5, #12]
 801a1d4:	071b      	lsls	r3, r3, #28
 801a1d6:	d501      	bpl.n	801a1dc <_vfiprintf_r+0x3c>
 801a1d8:	692b      	ldr	r3, [r5, #16]
 801a1da:	b9eb      	cbnz	r3, 801a218 <_vfiprintf_r+0x78>
 801a1dc:	4629      	mov	r1, r5
 801a1de:	4630      	mov	r0, r6
 801a1e0:	f000 faf4 	bl	801a7cc <__swsetup_r>
 801a1e4:	b1c0      	cbz	r0, 801a218 <_vfiprintf_r+0x78>
 801a1e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a1e8:	07dc      	lsls	r4, r3, #31
 801a1ea:	d50e      	bpl.n	801a20a <_vfiprintf_r+0x6a>
 801a1ec:	f04f 30ff 	mov.w	r0, #4294967295
 801a1f0:	b01d      	add	sp, #116	; 0x74
 801a1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1f6:	4b7b      	ldr	r3, [pc, #492]	; (801a3e4 <_vfiprintf_r+0x244>)
 801a1f8:	429d      	cmp	r5, r3
 801a1fa:	d101      	bne.n	801a200 <_vfiprintf_r+0x60>
 801a1fc:	68b5      	ldr	r5, [r6, #8]
 801a1fe:	e7df      	b.n	801a1c0 <_vfiprintf_r+0x20>
 801a200:	4b79      	ldr	r3, [pc, #484]	; (801a3e8 <_vfiprintf_r+0x248>)
 801a202:	429d      	cmp	r5, r3
 801a204:	bf08      	it	eq
 801a206:	68f5      	ldreq	r5, [r6, #12]
 801a208:	e7da      	b.n	801a1c0 <_vfiprintf_r+0x20>
 801a20a:	89ab      	ldrh	r3, [r5, #12]
 801a20c:	0598      	lsls	r0, r3, #22
 801a20e:	d4ed      	bmi.n	801a1ec <_vfiprintf_r+0x4c>
 801a210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a212:	f000 fd0a 	bl	801ac2a <__retarget_lock_release_recursive>
 801a216:	e7e9      	b.n	801a1ec <_vfiprintf_r+0x4c>
 801a218:	2300      	movs	r3, #0
 801a21a:	9309      	str	r3, [sp, #36]	; 0x24
 801a21c:	2320      	movs	r3, #32
 801a21e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a222:	f8cd 800c 	str.w	r8, [sp, #12]
 801a226:	2330      	movs	r3, #48	; 0x30
 801a228:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a3ec <_vfiprintf_r+0x24c>
 801a22c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a230:	f04f 0901 	mov.w	r9, #1
 801a234:	4623      	mov	r3, r4
 801a236:	469a      	mov	sl, r3
 801a238:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a23c:	b10a      	cbz	r2, 801a242 <_vfiprintf_r+0xa2>
 801a23e:	2a25      	cmp	r2, #37	; 0x25
 801a240:	d1f9      	bne.n	801a236 <_vfiprintf_r+0x96>
 801a242:	ebba 0b04 	subs.w	fp, sl, r4
 801a246:	d00b      	beq.n	801a260 <_vfiprintf_r+0xc0>
 801a248:	465b      	mov	r3, fp
 801a24a:	4622      	mov	r2, r4
 801a24c:	4629      	mov	r1, r5
 801a24e:	4630      	mov	r0, r6
 801a250:	f7ff ff93 	bl	801a17a <__sfputs_r>
 801a254:	3001      	adds	r0, #1
 801a256:	f000 80aa 	beq.w	801a3ae <_vfiprintf_r+0x20e>
 801a25a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a25c:	445a      	add	r2, fp
 801a25e:	9209      	str	r2, [sp, #36]	; 0x24
 801a260:	f89a 3000 	ldrb.w	r3, [sl]
 801a264:	2b00      	cmp	r3, #0
 801a266:	f000 80a2 	beq.w	801a3ae <_vfiprintf_r+0x20e>
 801a26a:	2300      	movs	r3, #0
 801a26c:	f04f 32ff 	mov.w	r2, #4294967295
 801a270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a274:	f10a 0a01 	add.w	sl, sl, #1
 801a278:	9304      	str	r3, [sp, #16]
 801a27a:	9307      	str	r3, [sp, #28]
 801a27c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a280:	931a      	str	r3, [sp, #104]	; 0x68
 801a282:	4654      	mov	r4, sl
 801a284:	2205      	movs	r2, #5
 801a286:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a28a:	4858      	ldr	r0, [pc, #352]	; (801a3ec <_vfiprintf_r+0x24c>)
 801a28c:	f7f5 fed8 	bl	8010040 <memchr>
 801a290:	9a04      	ldr	r2, [sp, #16]
 801a292:	b9d8      	cbnz	r0, 801a2cc <_vfiprintf_r+0x12c>
 801a294:	06d1      	lsls	r1, r2, #27
 801a296:	bf44      	itt	mi
 801a298:	2320      	movmi	r3, #32
 801a29a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a29e:	0713      	lsls	r3, r2, #28
 801a2a0:	bf44      	itt	mi
 801a2a2:	232b      	movmi	r3, #43	; 0x2b
 801a2a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a2a8:	f89a 3000 	ldrb.w	r3, [sl]
 801a2ac:	2b2a      	cmp	r3, #42	; 0x2a
 801a2ae:	d015      	beq.n	801a2dc <_vfiprintf_r+0x13c>
 801a2b0:	9a07      	ldr	r2, [sp, #28]
 801a2b2:	4654      	mov	r4, sl
 801a2b4:	2000      	movs	r0, #0
 801a2b6:	f04f 0c0a 	mov.w	ip, #10
 801a2ba:	4621      	mov	r1, r4
 801a2bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a2c0:	3b30      	subs	r3, #48	; 0x30
 801a2c2:	2b09      	cmp	r3, #9
 801a2c4:	d94e      	bls.n	801a364 <_vfiprintf_r+0x1c4>
 801a2c6:	b1b0      	cbz	r0, 801a2f6 <_vfiprintf_r+0x156>
 801a2c8:	9207      	str	r2, [sp, #28]
 801a2ca:	e014      	b.n	801a2f6 <_vfiprintf_r+0x156>
 801a2cc:	eba0 0308 	sub.w	r3, r0, r8
 801a2d0:	fa09 f303 	lsl.w	r3, r9, r3
 801a2d4:	4313      	orrs	r3, r2
 801a2d6:	9304      	str	r3, [sp, #16]
 801a2d8:	46a2      	mov	sl, r4
 801a2da:	e7d2      	b.n	801a282 <_vfiprintf_r+0xe2>
 801a2dc:	9b03      	ldr	r3, [sp, #12]
 801a2de:	1d19      	adds	r1, r3, #4
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	9103      	str	r1, [sp, #12]
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	bfbb      	ittet	lt
 801a2e8:	425b      	neglt	r3, r3
 801a2ea:	f042 0202 	orrlt.w	r2, r2, #2
 801a2ee:	9307      	strge	r3, [sp, #28]
 801a2f0:	9307      	strlt	r3, [sp, #28]
 801a2f2:	bfb8      	it	lt
 801a2f4:	9204      	strlt	r2, [sp, #16]
 801a2f6:	7823      	ldrb	r3, [r4, #0]
 801a2f8:	2b2e      	cmp	r3, #46	; 0x2e
 801a2fa:	d10c      	bne.n	801a316 <_vfiprintf_r+0x176>
 801a2fc:	7863      	ldrb	r3, [r4, #1]
 801a2fe:	2b2a      	cmp	r3, #42	; 0x2a
 801a300:	d135      	bne.n	801a36e <_vfiprintf_r+0x1ce>
 801a302:	9b03      	ldr	r3, [sp, #12]
 801a304:	1d1a      	adds	r2, r3, #4
 801a306:	681b      	ldr	r3, [r3, #0]
 801a308:	9203      	str	r2, [sp, #12]
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	bfb8      	it	lt
 801a30e:	f04f 33ff 	movlt.w	r3, #4294967295
 801a312:	3402      	adds	r4, #2
 801a314:	9305      	str	r3, [sp, #20]
 801a316:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a3fc <_vfiprintf_r+0x25c>
 801a31a:	7821      	ldrb	r1, [r4, #0]
 801a31c:	2203      	movs	r2, #3
 801a31e:	4650      	mov	r0, sl
 801a320:	f7f5 fe8e 	bl	8010040 <memchr>
 801a324:	b140      	cbz	r0, 801a338 <_vfiprintf_r+0x198>
 801a326:	2340      	movs	r3, #64	; 0x40
 801a328:	eba0 000a 	sub.w	r0, r0, sl
 801a32c:	fa03 f000 	lsl.w	r0, r3, r0
 801a330:	9b04      	ldr	r3, [sp, #16]
 801a332:	4303      	orrs	r3, r0
 801a334:	3401      	adds	r4, #1
 801a336:	9304      	str	r3, [sp, #16]
 801a338:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a33c:	482c      	ldr	r0, [pc, #176]	; (801a3f0 <_vfiprintf_r+0x250>)
 801a33e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a342:	2206      	movs	r2, #6
 801a344:	f7f5 fe7c 	bl	8010040 <memchr>
 801a348:	2800      	cmp	r0, #0
 801a34a:	d03f      	beq.n	801a3cc <_vfiprintf_r+0x22c>
 801a34c:	4b29      	ldr	r3, [pc, #164]	; (801a3f4 <_vfiprintf_r+0x254>)
 801a34e:	bb1b      	cbnz	r3, 801a398 <_vfiprintf_r+0x1f8>
 801a350:	9b03      	ldr	r3, [sp, #12]
 801a352:	3307      	adds	r3, #7
 801a354:	f023 0307 	bic.w	r3, r3, #7
 801a358:	3308      	adds	r3, #8
 801a35a:	9303      	str	r3, [sp, #12]
 801a35c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a35e:	443b      	add	r3, r7
 801a360:	9309      	str	r3, [sp, #36]	; 0x24
 801a362:	e767      	b.n	801a234 <_vfiprintf_r+0x94>
 801a364:	fb0c 3202 	mla	r2, ip, r2, r3
 801a368:	460c      	mov	r4, r1
 801a36a:	2001      	movs	r0, #1
 801a36c:	e7a5      	b.n	801a2ba <_vfiprintf_r+0x11a>
 801a36e:	2300      	movs	r3, #0
 801a370:	3401      	adds	r4, #1
 801a372:	9305      	str	r3, [sp, #20]
 801a374:	4619      	mov	r1, r3
 801a376:	f04f 0c0a 	mov.w	ip, #10
 801a37a:	4620      	mov	r0, r4
 801a37c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a380:	3a30      	subs	r2, #48	; 0x30
 801a382:	2a09      	cmp	r2, #9
 801a384:	d903      	bls.n	801a38e <_vfiprintf_r+0x1ee>
 801a386:	2b00      	cmp	r3, #0
 801a388:	d0c5      	beq.n	801a316 <_vfiprintf_r+0x176>
 801a38a:	9105      	str	r1, [sp, #20]
 801a38c:	e7c3      	b.n	801a316 <_vfiprintf_r+0x176>
 801a38e:	fb0c 2101 	mla	r1, ip, r1, r2
 801a392:	4604      	mov	r4, r0
 801a394:	2301      	movs	r3, #1
 801a396:	e7f0      	b.n	801a37a <_vfiprintf_r+0x1da>
 801a398:	ab03      	add	r3, sp, #12
 801a39a:	9300      	str	r3, [sp, #0]
 801a39c:	462a      	mov	r2, r5
 801a39e:	4b16      	ldr	r3, [pc, #88]	; (801a3f8 <_vfiprintf_r+0x258>)
 801a3a0:	a904      	add	r1, sp, #16
 801a3a2:	4630      	mov	r0, r6
 801a3a4:	f3af 8000 	nop.w
 801a3a8:	4607      	mov	r7, r0
 801a3aa:	1c78      	adds	r0, r7, #1
 801a3ac:	d1d6      	bne.n	801a35c <_vfiprintf_r+0x1bc>
 801a3ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a3b0:	07d9      	lsls	r1, r3, #31
 801a3b2:	d405      	bmi.n	801a3c0 <_vfiprintf_r+0x220>
 801a3b4:	89ab      	ldrh	r3, [r5, #12]
 801a3b6:	059a      	lsls	r2, r3, #22
 801a3b8:	d402      	bmi.n	801a3c0 <_vfiprintf_r+0x220>
 801a3ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a3bc:	f000 fc35 	bl	801ac2a <__retarget_lock_release_recursive>
 801a3c0:	89ab      	ldrh	r3, [r5, #12]
 801a3c2:	065b      	lsls	r3, r3, #25
 801a3c4:	f53f af12 	bmi.w	801a1ec <_vfiprintf_r+0x4c>
 801a3c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a3ca:	e711      	b.n	801a1f0 <_vfiprintf_r+0x50>
 801a3cc:	ab03      	add	r3, sp, #12
 801a3ce:	9300      	str	r3, [sp, #0]
 801a3d0:	462a      	mov	r2, r5
 801a3d2:	4b09      	ldr	r3, [pc, #36]	; (801a3f8 <_vfiprintf_r+0x258>)
 801a3d4:	a904      	add	r1, sp, #16
 801a3d6:	4630      	mov	r0, r6
 801a3d8:	f000 f880 	bl	801a4dc <_printf_i>
 801a3dc:	e7e4      	b.n	801a3a8 <_vfiprintf_r+0x208>
 801a3de:	bf00      	nop
 801a3e0:	0801b370 	.word	0x0801b370
 801a3e4:	0801b390 	.word	0x0801b390
 801a3e8:	0801b350 	.word	0x0801b350
 801a3ec:	0801b31c 	.word	0x0801b31c
 801a3f0:	0801b326 	.word	0x0801b326
 801a3f4:	00000000 	.word	0x00000000
 801a3f8:	0801a17b 	.word	0x0801a17b
 801a3fc:	0801b322 	.word	0x0801b322

0801a400 <_printf_common>:
 801a400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a404:	4616      	mov	r6, r2
 801a406:	4699      	mov	r9, r3
 801a408:	688a      	ldr	r2, [r1, #8]
 801a40a:	690b      	ldr	r3, [r1, #16]
 801a40c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a410:	4293      	cmp	r3, r2
 801a412:	bfb8      	it	lt
 801a414:	4613      	movlt	r3, r2
 801a416:	6033      	str	r3, [r6, #0]
 801a418:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a41c:	4607      	mov	r7, r0
 801a41e:	460c      	mov	r4, r1
 801a420:	b10a      	cbz	r2, 801a426 <_printf_common+0x26>
 801a422:	3301      	adds	r3, #1
 801a424:	6033      	str	r3, [r6, #0]
 801a426:	6823      	ldr	r3, [r4, #0]
 801a428:	0699      	lsls	r1, r3, #26
 801a42a:	bf42      	ittt	mi
 801a42c:	6833      	ldrmi	r3, [r6, #0]
 801a42e:	3302      	addmi	r3, #2
 801a430:	6033      	strmi	r3, [r6, #0]
 801a432:	6825      	ldr	r5, [r4, #0]
 801a434:	f015 0506 	ands.w	r5, r5, #6
 801a438:	d106      	bne.n	801a448 <_printf_common+0x48>
 801a43a:	f104 0a19 	add.w	sl, r4, #25
 801a43e:	68e3      	ldr	r3, [r4, #12]
 801a440:	6832      	ldr	r2, [r6, #0]
 801a442:	1a9b      	subs	r3, r3, r2
 801a444:	42ab      	cmp	r3, r5
 801a446:	dc26      	bgt.n	801a496 <_printf_common+0x96>
 801a448:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a44c:	1e13      	subs	r3, r2, #0
 801a44e:	6822      	ldr	r2, [r4, #0]
 801a450:	bf18      	it	ne
 801a452:	2301      	movne	r3, #1
 801a454:	0692      	lsls	r2, r2, #26
 801a456:	d42b      	bmi.n	801a4b0 <_printf_common+0xb0>
 801a458:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a45c:	4649      	mov	r1, r9
 801a45e:	4638      	mov	r0, r7
 801a460:	47c0      	blx	r8
 801a462:	3001      	adds	r0, #1
 801a464:	d01e      	beq.n	801a4a4 <_printf_common+0xa4>
 801a466:	6823      	ldr	r3, [r4, #0]
 801a468:	68e5      	ldr	r5, [r4, #12]
 801a46a:	6832      	ldr	r2, [r6, #0]
 801a46c:	f003 0306 	and.w	r3, r3, #6
 801a470:	2b04      	cmp	r3, #4
 801a472:	bf08      	it	eq
 801a474:	1aad      	subeq	r5, r5, r2
 801a476:	68a3      	ldr	r3, [r4, #8]
 801a478:	6922      	ldr	r2, [r4, #16]
 801a47a:	bf0c      	ite	eq
 801a47c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a480:	2500      	movne	r5, #0
 801a482:	4293      	cmp	r3, r2
 801a484:	bfc4      	itt	gt
 801a486:	1a9b      	subgt	r3, r3, r2
 801a488:	18ed      	addgt	r5, r5, r3
 801a48a:	2600      	movs	r6, #0
 801a48c:	341a      	adds	r4, #26
 801a48e:	42b5      	cmp	r5, r6
 801a490:	d11a      	bne.n	801a4c8 <_printf_common+0xc8>
 801a492:	2000      	movs	r0, #0
 801a494:	e008      	b.n	801a4a8 <_printf_common+0xa8>
 801a496:	2301      	movs	r3, #1
 801a498:	4652      	mov	r2, sl
 801a49a:	4649      	mov	r1, r9
 801a49c:	4638      	mov	r0, r7
 801a49e:	47c0      	blx	r8
 801a4a0:	3001      	adds	r0, #1
 801a4a2:	d103      	bne.n	801a4ac <_printf_common+0xac>
 801a4a4:	f04f 30ff 	mov.w	r0, #4294967295
 801a4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4ac:	3501      	adds	r5, #1
 801a4ae:	e7c6      	b.n	801a43e <_printf_common+0x3e>
 801a4b0:	18e1      	adds	r1, r4, r3
 801a4b2:	1c5a      	adds	r2, r3, #1
 801a4b4:	2030      	movs	r0, #48	; 0x30
 801a4b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a4ba:	4422      	add	r2, r4
 801a4bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a4c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a4c4:	3302      	adds	r3, #2
 801a4c6:	e7c7      	b.n	801a458 <_printf_common+0x58>
 801a4c8:	2301      	movs	r3, #1
 801a4ca:	4622      	mov	r2, r4
 801a4cc:	4649      	mov	r1, r9
 801a4ce:	4638      	mov	r0, r7
 801a4d0:	47c0      	blx	r8
 801a4d2:	3001      	adds	r0, #1
 801a4d4:	d0e6      	beq.n	801a4a4 <_printf_common+0xa4>
 801a4d6:	3601      	adds	r6, #1
 801a4d8:	e7d9      	b.n	801a48e <_printf_common+0x8e>
	...

0801a4dc <_printf_i>:
 801a4dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a4e0:	460c      	mov	r4, r1
 801a4e2:	4691      	mov	r9, r2
 801a4e4:	7e27      	ldrb	r7, [r4, #24]
 801a4e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a4e8:	2f78      	cmp	r7, #120	; 0x78
 801a4ea:	4680      	mov	r8, r0
 801a4ec:	469a      	mov	sl, r3
 801a4ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a4f2:	d807      	bhi.n	801a504 <_printf_i+0x28>
 801a4f4:	2f62      	cmp	r7, #98	; 0x62
 801a4f6:	d80a      	bhi.n	801a50e <_printf_i+0x32>
 801a4f8:	2f00      	cmp	r7, #0
 801a4fa:	f000 80d8 	beq.w	801a6ae <_printf_i+0x1d2>
 801a4fe:	2f58      	cmp	r7, #88	; 0x58
 801a500:	f000 80a3 	beq.w	801a64a <_printf_i+0x16e>
 801a504:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a508:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a50c:	e03a      	b.n	801a584 <_printf_i+0xa8>
 801a50e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a512:	2b15      	cmp	r3, #21
 801a514:	d8f6      	bhi.n	801a504 <_printf_i+0x28>
 801a516:	a001      	add	r0, pc, #4	; (adr r0, 801a51c <_printf_i+0x40>)
 801a518:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801a51c:	0801a575 	.word	0x0801a575
 801a520:	0801a589 	.word	0x0801a589
 801a524:	0801a505 	.word	0x0801a505
 801a528:	0801a505 	.word	0x0801a505
 801a52c:	0801a505 	.word	0x0801a505
 801a530:	0801a505 	.word	0x0801a505
 801a534:	0801a589 	.word	0x0801a589
 801a538:	0801a505 	.word	0x0801a505
 801a53c:	0801a505 	.word	0x0801a505
 801a540:	0801a505 	.word	0x0801a505
 801a544:	0801a505 	.word	0x0801a505
 801a548:	0801a695 	.word	0x0801a695
 801a54c:	0801a5b9 	.word	0x0801a5b9
 801a550:	0801a677 	.word	0x0801a677
 801a554:	0801a505 	.word	0x0801a505
 801a558:	0801a505 	.word	0x0801a505
 801a55c:	0801a6b7 	.word	0x0801a6b7
 801a560:	0801a505 	.word	0x0801a505
 801a564:	0801a5b9 	.word	0x0801a5b9
 801a568:	0801a505 	.word	0x0801a505
 801a56c:	0801a505 	.word	0x0801a505
 801a570:	0801a67f 	.word	0x0801a67f
 801a574:	680b      	ldr	r3, [r1, #0]
 801a576:	1d1a      	adds	r2, r3, #4
 801a578:	681b      	ldr	r3, [r3, #0]
 801a57a:	600a      	str	r2, [r1, #0]
 801a57c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a580:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a584:	2301      	movs	r3, #1
 801a586:	e0a3      	b.n	801a6d0 <_printf_i+0x1f4>
 801a588:	6825      	ldr	r5, [r4, #0]
 801a58a:	6808      	ldr	r0, [r1, #0]
 801a58c:	062e      	lsls	r6, r5, #24
 801a58e:	f100 0304 	add.w	r3, r0, #4
 801a592:	d50a      	bpl.n	801a5aa <_printf_i+0xce>
 801a594:	6805      	ldr	r5, [r0, #0]
 801a596:	600b      	str	r3, [r1, #0]
 801a598:	2d00      	cmp	r5, #0
 801a59a:	da03      	bge.n	801a5a4 <_printf_i+0xc8>
 801a59c:	232d      	movs	r3, #45	; 0x2d
 801a59e:	426d      	negs	r5, r5
 801a5a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a5a4:	485e      	ldr	r0, [pc, #376]	; (801a720 <_printf_i+0x244>)
 801a5a6:	230a      	movs	r3, #10
 801a5a8:	e019      	b.n	801a5de <_printf_i+0x102>
 801a5aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 801a5ae:	6805      	ldr	r5, [r0, #0]
 801a5b0:	600b      	str	r3, [r1, #0]
 801a5b2:	bf18      	it	ne
 801a5b4:	b22d      	sxthne	r5, r5
 801a5b6:	e7ef      	b.n	801a598 <_printf_i+0xbc>
 801a5b8:	680b      	ldr	r3, [r1, #0]
 801a5ba:	6825      	ldr	r5, [r4, #0]
 801a5bc:	1d18      	adds	r0, r3, #4
 801a5be:	6008      	str	r0, [r1, #0]
 801a5c0:	0628      	lsls	r0, r5, #24
 801a5c2:	d501      	bpl.n	801a5c8 <_printf_i+0xec>
 801a5c4:	681d      	ldr	r5, [r3, #0]
 801a5c6:	e002      	b.n	801a5ce <_printf_i+0xf2>
 801a5c8:	0669      	lsls	r1, r5, #25
 801a5ca:	d5fb      	bpl.n	801a5c4 <_printf_i+0xe8>
 801a5cc:	881d      	ldrh	r5, [r3, #0]
 801a5ce:	4854      	ldr	r0, [pc, #336]	; (801a720 <_printf_i+0x244>)
 801a5d0:	2f6f      	cmp	r7, #111	; 0x6f
 801a5d2:	bf0c      	ite	eq
 801a5d4:	2308      	moveq	r3, #8
 801a5d6:	230a      	movne	r3, #10
 801a5d8:	2100      	movs	r1, #0
 801a5da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a5de:	6866      	ldr	r6, [r4, #4]
 801a5e0:	60a6      	str	r6, [r4, #8]
 801a5e2:	2e00      	cmp	r6, #0
 801a5e4:	bfa2      	ittt	ge
 801a5e6:	6821      	ldrge	r1, [r4, #0]
 801a5e8:	f021 0104 	bicge.w	r1, r1, #4
 801a5ec:	6021      	strge	r1, [r4, #0]
 801a5ee:	b90d      	cbnz	r5, 801a5f4 <_printf_i+0x118>
 801a5f0:	2e00      	cmp	r6, #0
 801a5f2:	d04d      	beq.n	801a690 <_printf_i+0x1b4>
 801a5f4:	4616      	mov	r6, r2
 801a5f6:	fbb5 f1f3 	udiv	r1, r5, r3
 801a5fa:	fb03 5711 	mls	r7, r3, r1, r5
 801a5fe:	5dc7      	ldrb	r7, [r0, r7]
 801a600:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a604:	462f      	mov	r7, r5
 801a606:	42bb      	cmp	r3, r7
 801a608:	460d      	mov	r5, r1
 801a60a:	d9f4      	bls.n	801a5f6 <_printf_i+0x11a>
 801a60c:	2b08      	cmp	r3, #8
 801a60e:	d10b      	bne.n	801a628 <_printf_i+0x14c>
 801a610:	6823      	ldr	r3, [r4, #0]
 801a612:	07df      	lsls	r7, r3, #31
 801a614:	d508      	bpl.n	801a628 <_printf_i+0x14c>
 801a616:	6923      	ldr	r3, [r4, #16]
 801a618:	6861      	ldr	r1, [r4, #4]
 801a61a:	4299      	cmp	r1, r3
 801a61c:	bfde      	ittt	le
 801a61e:	2330      	movle	r3, #48	; 0x30
 801a620:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a624:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a628:	1b92      	subs	r2, r2, r6
 801a62a:	6122      	str	r2, [r4, #16]
 801a62c:	f8cd a000 	str.w	sl, [sp]
 801a630:	464b      	mov	r3, r9
 801a632:	aa03      	add	r2, sp, #12
 801a634:	4621      	mov	r1, r4
 801a636:	4640      	mov	r0, r8
 801a638:	f7ff fee2 	bl	801a400 <_printf_common>
 801a63c:	3001      	adds	r0, #1
 801a63e:	d14c      	bne.n	801a6da <_printf_i+0x1fe>
 801a640:	f04f 30ff 	mov.w	r0, #4294967295
 801a644:	b004      	add	sp, #16
 801a646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a64a:	4835      	ldr	r0, [pc, #212]	; (801a720 <_printf_i+0x244>)
 801a64c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a650:	6823      	ldr	r3, [r4, #0]
 801a652:	680e      	ldr	r6, [r1, #0]
 801a654:	061f      	lsls	r7, r3, #24
 801a656:	f856 5b04 	ldr.w	r5, [r6], #4
 801a65a:	600e      	str	r6, [r1, #0]
 801a65c:	d514      	bpl.n	801a688 <_printf_i+0x1ac>
 801a65e:	07d9      	lsls	r1, r3, #31
 801a660:	bf44      	itt	mi
 801a662:	f043 0320 	orrmi.w	r3, r3, #32
 801a666:	6023      	strmi	r3, [r4, #0]
 801a668:	b91d      	cbnz	r5, 801a672 <_printf_i+0x196>
 801a66a:	6823      	ldr	r3, [r4, #0]
 801a66c:	f023 0320 	bic.w	r3, r3, #32
 801a670:	6023      	str	r3, [r4, #0]
 801a672:	2310      	movs	r3, #16
 801a674:	e7b0      	b.n	801a5d8 <_printf_i+0xfc>
 801a676:	6823      	ldr	r3, [r4, #0]
 801a678:	f043 0320 	orr.w	r3, r3, #32
 801a67c:	6023      	str	r3, [r4, #0]
 801a67e:	2378      	movs	r3, #120	; 0x78
 801a680:	4828      	ldr	r0, [pc, #160]	; (801a724 <_printf_i+0x248>)
 801a682:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a686:	e7e3      	b.n	801a650 <_printf_i+0x174>
 801a688:	065e      	lsls	r6, r3, #25
 801a68a:	bf48      	it	mi
 801a68c:	b2ad      	uxthmi	r5, r5
 801a68e:	e7e6      	b.n	801a65e <_printf_i+0x182>
 801a690:	4616      	mov	r6, r2
 801a692:	e7bb      	b.n	801a60c <_printf_i+0x130>
 801a694:	680b      	ldr	r3, [r1, #0]
 801a696:	6826      	ldr	r6, [r4, #0]
 801a698:	6960      	ldr	r0, [r4, #20]
 801a69a:	1d1d      	adds	r5, r3, #4
 801a69c:	600d      	str	r5, [r1, #0]
 801a69e:	0635      	lsls	r5, r6, #24
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	d501      	bpl.n	801a6a8 <_printf_i+0x1cc>
 801a6a4:	6018      	str	r0, [r3, #0]
 801a6a6:	e002      	b.n	801a6ae <_printf_i+0x1d2>
 801a6a8:	0671      	lsls	r1, r6, #25
 801a6aa:	d5fb      	bpl.n	801a6a4 <_printf_i+0x1c8>
 801a6ac:	8018      	strh	r0, [r3, #0]
 801a6ae:	2300      	movs	r3, #0
 801a6b0:	6123      	str	r3, [r4, #16]
 801a6b2:	4616      	mov	r6, r2
 801a6b4:	e7ba      	b.n	801a62c <_printf_i+0x150>
 801a6b6:	680b      	ldr	r3, [r1, #0]
 801a6b8:	1d1a      	adds	r2, r3, #4
 801a6ba:	600a      	str	r2, [r1, #0]
 801a6bc:	681e      	ldr	r6, [r3, #0]
 801a6be:	6862      	ldr	r2, [r4, #4]
 801a6c0:	2100      	movs	r1, #0
 801a6c2:	4630      	mov	r0, r6
 801a6c4:	f7f5 fcbc 	bl	8010040 <memchr>
 801a6c8:	b108      	cbz	r0, 801a6ce <_printf_i+0x1f2>
 801a6ca:	1b80      	subs	r0, r0, r6
 801a6cc:	6060      	str	r0, [r4, #4]
 801a6ce:	6863      	ldr	r3, [r4, #4]
 801a6d0:	6123      	str	r3, [r4, #16]
 801a6d2:	2300      	movs	r3, #0
 801a6d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a6d8:	e7a8      	b.n	801a62c <_printf_i+0x150>
 801a6da:	6923      	ldr	r3, [r4, #16]
 801a6dc:	4632      	mov	r2, r6
 801a6de:	4649      	mov	r1, r9
 801a6e0:	4640      	mov	r0, r8
 801a6e2:	47d0      	blx	sl
 801a6e4:	3001      	adds	r0, #1
 801a6e6:	d0ab      	beq.n	801a640 <_printf_i+0x164>
 801a6e8:	6823      	ldr	r3, [r4, #0]
 801a6ea:	079b      	lsls	r3, r3, #30
 801a6ec:	d413      	bmi.n	801a716 <_printf_i+0x23a>
 801a6ee:	68e0      	ldr	r0, [r4, #12]
 801a6f0:	9b03      	ldr	r3, [sp, #12]
 801a6f2:	4298      	cmp	r0, r3
 801a6f4:	bfb8      	it	lt
 801a6f6:	4618      	movlt	r0, r3
 801a6f8:	e7a4      	b.n	801a644 <_printf_i+0x168>
 801a6fa:	2301      	movs	r3, #1
 801a6fc:	4632      	mov	r2, r6
 801a6fe:	4649      	mov	r1, r9
 801a700:	4640      	mov	r0, r8
 801a702:	47d0      	blx	sl
 801a704:	3001      	adds	r0, #1
 801a706:	d09b      	beq.n	801a640 <_printf_i+0x164>
 801a708:	3501      	adds	r5, #1
 801a70a:	68e3      	ldr	r3, [r4, #12]
 801a70c:	9903      	ldr	r1, [sp, #12]
 801a70e:	1a5b      	subs	r3, r3, r1
 801a710:	42ab      	cmp	r3, r5
 801a712:	dcf2      	bgt.n	801a6fa <_printf_i+0x21e>
 801a714:	e7eb      	b.n	801a6ee <_printf_i+0x212>
 801a716:	2500      	movs	r5, #0
 801a718:	f104 0619 	add.w	r6, r4, #25
 801a71c:	e7f5      	b.n	801a70a <_printf_i+0x22e>
 801a71e:	bf00      	nop
 801a720:	0801b32d 	.word	0x0801b32d
 801a724:	0801b33e 	.word	0x0801b33e

0801a728 <__swbuf_r>:
 801a728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a72a:	460e      	mov	r6, r1
 801a72c:	4614      	mov	r4, r2
 801a72e:	4605      	mov	r5, r0
 801a730:	b118      	cbz	r0, 801a73a <__swbuf_r+0x12>
 801a732:	6983      	ldr	r3, [r0, #24]
 801a734:	b90b      	cbnz	r3, 801a73a <__swbuf_r+0x12>
 801a736:	f000 f9d9 	bl	801aaec <__sinit>
 801a73a:	4b21      	ldr	r3, [pc, #132]	; (801a7c0 <__swbuf_r+0x98>)
 801a73c:	429c      	cmp	r4, r3
 801a73e:	d12b      	bne.n	801a798 <__swbuf_r+0x70>
 801a740:	686c      	ldr	r4, [r5, #4]
 801a742:	69a3      	ldr	r3, [r4, #24]
 801a744:	60a3      	str	r3, [r4, #8]
 801a746:	89a3      	ldrh	r3, [r4, #12]
 801a748:	071a      	lsls	r2, r3, #28
 801a74a:	d52f      	bpl.n	801a7ac <__swbuf_r+0x84>
 801a74c:	6923      	ldr	r3, [r4, #16]
 801a74e:	b36b      	cbz	r3, 801a7ac <__swbuf_r+0x84>
 801a750:	6923      	ldr	r3, [r4, #16]
 801a752:	6820      	ldr	r0, [r4, #0]
 801a754:	1ac0      	subs	r0, r0, r3
 801a756:	6963      	ldr	r3, [r4, #20]
 801a758:	b2f6      	uxtb	r6, r6
 801a75a:	4283      	cmp	r3, r0
 801a75c:	4637      	mov	r7, r6
 801a75e:	dc04      	bgt.n	801a76a <__swbuf_r+0x42>
 801a760:	4621      	mov	r1, r4
 801a762:	4628      	mov	r0, r5
 801a764:	f000 f92e 	bl	801a9c4 <_fflush_r>
 801a768:	bb30      	cbnz	r0, 801a7b8 <__swbuf_r+0x90>
 801a76a:	68a3      	ldr	r3, [r4, #8]
 801a76c:	3b01      	subs	r3, #1
 801a76e:	60a3      	str	r3, [r4, #8]
 801a770:	6823      	ldr	r3, [r4, #0]
 801a772:	1c5a      	adds	r2, r3, #1
 801a774:	6022      	str	r2, [r4, #0]
 801a776:	701e      	strb	r6, [r3, #0]
 801a778:	6963      	ldr	r3, [r4, #20]
 801a77a:	3001      	adds	r0, #1
 801a77c:	4283      	cmp	r3, r0
 801a77e:	d004      	beq.n	801a78a <__swbuf_r+0x62>
 801a780:	89a3      	ldrh	r3, [r4, #12]
 801a782:	07db      	lsls	r3, r3, #31
 801a784:	d506      	bpl.n	801a794 <__swbuf_r+0x6c>
 801a786:	2e0a      	cmp	r6, #10
 801a788:	d104      	bne.n	801a794 <__swbuf_r+0x6c>
 801a78a:	4621      	mov	r1, r4
 801a78c:	4628      	mov	r0, r5
 801a78e:	f000 f919 	bl	801a9c4 <_fflush_r>
 801a792:	b988      	cbnz	r0, 801a7b8 <__swbuf_r+0x90>
 801a794:	4638      	mov	r0, r7
 801a796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a798:	4b0a      	ldr	r3, [pc, #40]	; (801a7c4 <__swbuf_r+0x9c>)
 801a79a:	429c      	cmp	r4, r3
 801a79c:	d101      	bne.n	801a7a2 <__swbuf_r+0x7a>
 801a79e:	68ac      	ldr	r4, [r5, #8]
 801a7a0:	e7cf      	b.n	801a742 <__swbuf_r+0x1a>
 801a7a2:	4b09      	ldr	r3, [pc, #36]	; (801a7c8 <__swbuf_r+0xa0>)
 801a7a4:	429c      	cmp	r4, r3
 801a7a6:	bf08      	it	eq
 801a7a8:	68ec      	ldreq	r4, [r5, #12]
 801a7aa:	e7ca      	b.n	801a742 <__swbuf_r+0x1a>
 801a7ac:	4621      	mov	r1, r4
 801a7ae:	4628      	mov	r0, r5
 801a7b0:	f000 f80c 	bl	801a7cc <__swsetup_r>
 801a7b4:	2800      	cmp	r0, #0
 801a7b6:	d0cb      	beq.n	801a750 <__swbuf_r+0x28>
 801a7b8:	f04f 37ff 	mov.w	r7, #4294967295
 801a7bc:	e7ea      	b.n	801a794 <__swbuf_r+0x6c>
 801a7be:	bf00      	nop
 801a7c0:	0801b370 	.word	0x0801b370
 801a7c4:	0801b390 	.word	0x0801b390
 801a7c8:	0801b350 	.word	0x0801b350

0801a7cc <__swsetup_r>:
 801a7cc:	4b32      	ldr	r3, [pc, #200]	; (801a898 <__swsetup_r+0xcc>)
 801a7ce:	b570      	push	{r4, r5, r6, lr}
 801a7d0:	681d      	ldr	r5, [r3, #0]
 801a7d2:	4606      	mov	r6, r0
 801a7d4:	460c      	mov	r4, r1
 801a7d6:	b125      	cbz	r5, 801a7e2 <__swsetup_r+0x16>
 801a7d8:	69ab      	ldr	r3, [r5, #24]
 801a7da:	b913      	cbnz	r3, 801a7e2 <__swsetup_r+0x16>
 801a7dc:	4628      	mov	r0, r5
 801a7de:	f000 f985 	bl	801aaec <__sinit>
 801a7e2:	4b2e      	ldr	r3, [pc, #184]	; (801a89c <__swsetup_r+0xd0>)
 801a7e4:	429c      	cmp	r4, r3
 801a7e6:	d10f      	bne.n	801a808 <__swsetup_r+0x3c>
 801a7e8:	686c      	ldr	r4, [r5, #4]
 801a7ea:	89a3      	ldrh	r3, [r4, #12]
 801a7ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a7f0:	0719      	lsls	r1, r3, #28
 801a7f2:	d42c      	bmi.n	801a84e <__swsetup_r+0x82>
 801a7f4:	06dd      	lsls	r5, r3, #27
 801a7f6:	d411      	bmi.n	801a81c <__swsetup_r+0x50>
 801a7f8:	2309      	movs	r3, #9
 801a7fa:	6033      	str	r3, [r6, #0]
 801a7fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a800:	81a3      	strh	r3, [r4, #12]
 801a802:	f04f 30ff 	mov.w	r0, #4294967295
 801a806:	e03e      	b.n	801a886 <__swsetup_r+0xba>
 801a808:	4b25      	ldr	r3, [pc, #148]	; (801a8a0 <__swsetup_r+0xd4>)
 801a80a:	429c      	cmp	r4, r3
 801a80c:	d101      	bne.n	801a812 <__swsetup_r+0x46>
 801a80e:	68ac      	ldr	r4, [r5, #8]
 801a810:	e7eb      	b.n	801a7ea <__swsetup_r+0x1e>
 801a812:	4b24      	ldr	r3, [pc, #144]	; (801a8a4 <__swsetup_r+0xd8>)
 801a814:	429c      	cmp	r4, r3
 801a816:	bf08      	it	eq
 801a818:	68ec      	ldreq	r4, [r5, #12]
 801a81a:	e7e6      	b.n	801a7ea <__swsetup_r+0x1e>
 801a81c:	0758      	lsls	r0, r3, #29
 801a81e:	d512      	bpl.n	801a846 <__swsetup_r+0x7a>
 801a820:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a822:	b141      	cbz	r1, 801a836 <__swsetup_r+0x6a>
 801a824:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a828:	4299      	cmp	r1, r3
 801a82a:	d002      	beq.n	801a832 <__swsetup_r+0x66>
 801a82c:	4630      	mov	r0, r6
 801a82e:	f000 fa61 	bl	801acf4 <_free_r>
 801a832:	2300      	movs	r3, #0
 801a834:	6363      	str	r3, [r4, #52]	; 0x34
 801a836:	89a3      	ldrh	r3, [r4, #12]
 801a838:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a83c:	81a3      	strh	r3, [r4, #12]
 801a83e:	2300      	movs	r3, #0
 801a840:	6063      	str	r3, [r4, #4]
 801a842:	6923      	ldr	r3, [r4, #16]
 801a844:	6023      	str	r3, [r4, #0]
 801a846:	89a3      	ldrh	r3, [r4, #12]
 801a848:	f043 0308 	orr.w	r3, r3, #8
 801a84c:	81a3      	strh	r3, [r4, #12]
 801a84e:	6923      	ldr	r3, [r4, #16]
 801a850:	b94b      	cbnz	r3, 801a866 <__swsetup_r+0x9a>
 801a852:	89a3      	ldrh	r3, [r4, #12]
 801a854:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a85c:	d003      	beq.n	801a866 <__swsetup_r+0x9a>
 801a85e:	4621      	mov	r1, r4
 801a860:	4630      	mov	r0, r6
 801a862:	f000 fa07 	bl	801ac74 <__smakebuf_r>
 801a866:	89a0      	ldrh	r0, [r4, #12]
 801a868:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a86c:	f010 0301 	ands.w	r3, r0, #1
 801a870:	d00a      	beq.n	801a888 <__swsetup_r+0xbc>
 801a872:	2300      	movs	r3, #0
 801a874:	60a3      	str	r3, [r4, #8]
 801a876:	6963      	ldr	r3, [r4, #20]
 801a878:	425b      	negs	r3, r3
 801a87a:	61a3      	str	r3, [r4, #24]
 801a87c:	6923      	ldr	r3, [r4, #16]
 801a87e:	b943      	cbnz	r3, 801a892 <__swsetup_r+0xc6>
 801a880:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a884:	d1ba      	bne.n	801a7fc <__swsetup_r+0x30>
 801a886:	bd70      	pop	{r4, r5, r6, pc}
 801a888:	0781      	lsls	r1, r0, #30
 801a88a:	bf58      	it	pl
 801a88c:	6963      	ldrpl	r3, [r4, #20]
 801a88e:	60a3      	str	r3, [r4, #8]
 801a890:	e7f4      	b.n	801a87c <__swsetup_r+0xb0>
 801a892:	2000      	movs	r0, #0
 801a894:	e7f7      	b.n	801a886 <__swsetup_r+0xba>
 801a896:	bf00      	nop
 801a898:	200000a4 	.word	0x200000a4
 801a89c:	0801b370 	.word	0x0801b370
 801a8a0:	0801b390 	.word	0x0801b390
 801a8a4:	0801b350 	.word	0x0801b350

0801a8a8 <abort>:
 801a8a8:	b508      	push	{r3, lr}
 801a8aa:	2006      	movs	r0, #6
 801a8ac:	f000 fb04 	bl	801aeb8 <raise>
 801a8b0:	2001      	movs	r0, #1
 801a8b2:	f7f6 f8b3 	bl	8010a1c <_exit>
	...

0801a8b8 <__sflush_r>:
 801a8b8:	898a      	ldrh	r2, [r1, #12]
 801a8ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8be:	4605      	mov	r5, r0
 801a8c0:	0710      	lsls	r0, r2, #28
 801a8c2:	460c      	mov	r4, r1
 801a8c4:	d458      	bmi.n	801a978 <__sflush_r+0xc0>
 801a8c6:	684b      	ldr	r3, [r1, #4]
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	dc05      	bgt.n	801a8d8 <__sflush_r+0x20>
 801a8cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a8ce:	2b00      	cmp	r3, #0
 801a8d0:	dc02      	bgt.n	801a8d8 <__sflush_r+0x20>
 801a8d2:	2000      	movs	r0, #0
 801a8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a8da:	2e00      	cmp	r6, #0
 801a8dc:	d0f9      	beq.n	801a8d2 <__sflush_r+0x1a>
 801a8de:	2300      	movs	r3, #0
 801a8e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a8e4:	682f      	ldr	r7, [r5, #0]
 801a8e6:	602b      	str	r3, [r5, #0]
 801a8e8:	d032      	beq.n	801a950 <__sflush_r+0x98>
 801a8ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a8ec:	89a3      	ldrh	r3, [r4, #12]
 801a8ee:	075a      	lsls	r2, r3, #29
 801a8f0:	d505      	bpl.n	801a8fe <__sflush_r+0x46>
 801a8f2:	6863      	ldr	r3, [r4, #4]
 801a8f4:	1ac0      	subs	r0, r0, r3
 801a8f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a8f8:	b10b      	cbz	r3, 801a8fe <__sflush_r+0x46>
 801a8fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a8fc:	1ac0      	subs	r0, r0, r3
 801a8fe:	2300      	movs	r3, #0
 801a900:	4602      	mov	r2, r0
 801a902:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a904:	6a21      	ldr	r1, [r4, #32]
 801a906:	4628      	mov	r0, r5
 801a908:	47b0      	blx	r6
 801a90a:	1c43      	adds	r3, r0, #1
 801a90c:	89a3      	ldrh	r3, [r4, #12]
 801a90e:	d106      	bne.n	801a91e <__sflush_r+0x66>
 801a910:	6829      	ldr	r1, [r5, #0]
 801a912:	291d      	cmp	r1, #29
 801a914:	d82c      	bhi.n	801a970 <__sflush_r+0xb8>
 801a916:	4a2a      	ldr	r2, [pc, #168]	; (801a9c0 <__sflush_r+0x108>)
 801a918:	40ca      	lsrs	r2, r1
 801a91a:	07d6      	lsls	r6, r2, #31
 801a91c:	d528      	bpl.n	801a970 <__sflush_r+0xb8>
 801a91e:	2200      	movs	r2, #0
 801a920:	6062      	str	r2, [r4, #4]
 801a922:	04d9      	lsls	r1, r3, #19
 801a924:	6922      	ldr	r2, [r4, #16]
 801a926:	6022      	str	r2, [r4, #0]
 801a928:	d504      	bpl.n	801a934 <__sflush_r+0x7c>
 801a92a:	1c42      	adds	r2, r0, #1
 801a92c:	d101      	bne.n	801a932 <__sflush_r+0x7a>
 801a92e:	682b      	ldr	r3, [r5, #0]
 801a930:	b903      	cbnz	r3, 801a934 <__sflush_r+0x7c>
 801a932:	6560      	str	r0, [r4, #84]	; 0x54
 801a934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a936:	602f      	str	r7, [r5, #0]
 801a938:	2900      	cmp	r1, #0
 801a93a:	d0ca      	beq.n	801a8d2 <__sflush_r+0x1a>
 801a93c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a940:	4299      	cmp	r1, r3
 801a942:	d002      	beq.n	801a94a <__sflush_r+0x92>
 801a944:	4628      	mov	r0, r5
 801a946:	f000 f9d5 	bl	801acf4 <_free_r>
 801a94a:	2000      	movs	r0, #0
 801a94c:	6360      	str	r0, [r4, #52]	; 0x34
 801a94e:	e7c1      	b.n	801a8d4 <__sflush_r+0x1c>
 801a950:	6a21      	ldr	r1, [r4, #32]
 801a952:	2301      	movs	r3, #1
 801a954:	4628      	mov	r0, r5
 801a956:	47b0      	blx	r6
 801a958:	1c41      	adds	r1, r0, #1
 801a95a:	d1c7      	bne.n	801a8ec <__sflush_r+0x34>
 801a95c:	682b      	ldr	r3, [r5, #0]
 801a95e:	2b00      	cmp	r3, #0
 801a960:	d0c4      	beq.n	801a8ec <__sflush_r+0x34>
 801a962:	2b1d      	cmp	r3, #29
 801a964:	d001      	beq.n	801a96a <__sflush_r+0xb2>
 801a966:	2b16      	cmp	r3, #22
 801a968:	d101      	bne.n	801a96e <__sflush_r+0xb6>
 801a96a:	602f      	str	r7, [r5, #0]
 801a96c:	e7b1      	b.n	801a8d2 <__sflush_r+0x1a>
 801a96e:	89a3      	ldrh	r3, [r4, #12]
 801a970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a974:	81a3      	strh	r3, [r4, #12]
 801a976:	e7ad      	b.n	801a8d4 <__sflush_r+0x1c>
 801a978:	690f      	ldr	r7, [r1, #16]
 801a97a:	2f00      	cmp	r7, #0
 801a97c:	d0a9      	beq.n	801a8d2 <__sflush_r+0x1a>
 801a97e:	0793      	lsls	r3, r2, #30
 801a980:	680e      	ldr	r6, [r1, #0]
 801a982:	bf08      	it	eq
 801a984:	694b      	ldreq	r3, [r1, #20]
 801a986:	600f      	str	r7, [r1, #0]
 801a988:	bf18      	it	ne
 801a98a:	2300      	movne	r3, #0
 801a98c:	eba6 0807 	sub.w	r8, r6, r7
 801a990:	608b      	str	r3, [r1, #8]
 801a992:	f1b8 0f00 	cmp.w	r8, #0
 801a996:	dd9c      	ble.n	801a8d2 <__sflush_r+0x1a>
 801a998:	6a21      	ldr	r1, [r4, #32]
 801a99a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a99c:	4643      	mov	r3, r8
 801a99e:	463a      	mov	r2, r7
 801a9a0:	4628      	mov	r0, r5
 801a9a2:	47b0      	blx	r6
 801a9a4:	2800      	cmp	r0, #0
 801a9a6:	dc06      	bgt.n	801a9b6 <__sflush_r+0xfe>
 801a9a8:	89a3      	ldrh	r3, [r4, #12]
 801a9aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a9ae:	81a3      	strh	r3, [r4, #12]
 801a9b0:	f04f 30ff 	mov.w	r0, #4294967295
 801a9b4:	e78e      	b.n	801a8d4 <__sflush_r+0x1c>
 801a9b6:	4407      	add	r7, r0
 801a9b8:	eba8 0800 	sub.w	r8, r8, r0
 801a9bc:	e7e9      	b.n	801a992 <__sflush_r+0xda>
 801a9be:	bf00      	nop
 801a9c0:	20400001 	.word	0x20400001

0801a9c4 <_fflush_r>:
 801a9c4:	b538      	push	{r3, r4, r5, lr}
 801a9c6:	690b      	ldr	r3, [r1, #16]
 801a9c8:	4605      	mov	r5, r0
 801a9ca:	460c      	mov	r4, r1
 801a9cc:	b913      	cbnz	r3, 801a9d4 <_fflush_r+0x10>
 801a9ce:	2500      	movs	r5, #0
 801a9d0:	4628      	mov	r0, r5
 801a9d2:	bd38      	pop	{r3, r4, r5, pc}
 801a9d4:	b118      	cbz	r0, 801a9de <_fflush_r+0x1a>
 801a9d6:	6983      	ldr	r3, [r0, #24]
 801a9d8:	b90b      	cbnz	r3, 801a9de <_fflush_r+0x1a>
 801a9da:	f000 f887 	bl	801aaec <__sinit>
 801a9de:	4b14      	ldr	r3, [pc, #80]	; (801aa30 <_fflush_r+0x6c>)
 801a9e0:	429c      	cmp	r4, r3
 801a9e2:	d11b      	bne.n	801aa1c <_fflush_r+0x58>
 801a9e4:	686c      	ldr	r4, [r5, #4]
 801a9e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d0ef      	beq.n	801a9ce <_fflush_r+0xa>
 801a9ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a9f0:	07d0      	lsls	r0, r2, #31
 801a9f2:	d404      	bmi.n	801a9fe <_fflush_r+0x3a>
 801a9f4:	0599      	lsls	r1, r3, #22
 801a9f6:	d402      	bmi.n	801a9fe <_fflush_r+0x3a>
 801a9f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a9fa:	f000 f915 	bl	801ac28 <__retarget_lock_acquire_recursive>
 801a9fe:	4628      	mov	r0, r5
 801aa00:	4621      	mov	r1, r4
 801aa02:	f7ff ff59 	bl	801a8b8 <__sflush_r>
 801aa06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801aa08:	07da      	lsls	r2, r3, #31
 801aa0a:	4605      	mov	r5, r0
 801aa0c:	d4e0      	bmi.n	801a9d0 <_fflush_r+0xc>
 801aa0e:	89a3      	ldrh	r3, [r4, #12]
 801aa10:	059b      	lsls	r3, r3, #22
 801aa12:	d4dd      	bmi.n	801a9d0 <_fflush_r+0xc>
 801aa14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aa16:	f000 f908 	bl	801ac2a <__retarget_lock_release_recursive>
 801aa1a:	e7d9      	b.n	801a9d0 <_fflush_r+0xc>
 801aa1c:	4b05      	ldr	r3, [pc, #20]	; (801aa34 <_fflush_r+0x70>)
 801aa1e:	429c      	cmp	r4, r3
 801aa20:	d101      	bne.n	801aa26 <_fflush_r+0x62>
 801aa22:	68ac      	ldr	r4, [r5, #8]
 801aa24:	e7df      	b.n	801a9e6 <_fflush_r+0x22>
 801aa26:	4b04      	ldr	r3, [pc, #16]	; (801aa38 <_fflush_r+0x74>)
 801aa28:	429c      	cmp	r4, r3
 801aa2a:	bf08      	it	eq
 801aa2c:	68ec      	ldreq	r4, [r5, #12]
 801aa2e:	e7da      	b.n	801a9e6 <_fflush_r+0x22>
 801aa30:	0801b370 	.word	0x0801b370
 801aa34:	0801b390 	.word	0x0801b390
 801aa38:	0801b350 	.word	0x0801b350

0801aa3c <std>:
 801aa3c:	2300      	movs	r3, #0
 801aa3e:	b510      	push	{r4, lr}
 801aa40:	4604      	mov	r4, r0
 801aa42:	e9c0 3300 	strd	r3, r3, [r0]
 801aa46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801aa4a:	6083      	str	r3, [r0, #8]
 801aa4c:	8181      	strh	r1, [r0, #12]
 801aa4e:	6643      	str	r3, [r0, #100]	; 0x64
 801aa50:	81c2      	strh	r2, [r0, #14]
 801aa52:	6183      	str	r3, [r0, #24]
 801aa54:	4619      	mov	r1, r3
 801aa56:	2208      	movs	r2, #8
 801aa58:	305c      	adds	r0, #92	; 0x5c
 801aa5a:	f7ff fb6f 	bl	801a13c <memset>
 801aa5e:	4b05      	ldr	r3, [pc, #20]	; (801aa74 <std+0x38>)
 801aa60:	6263      	str	r3, [r4, #36]	; 0x24
 801aa62:	4b05      	ldr	r3, [pc, #20]	; (801aa78 <std+0x3c>)
 801aa64:	62a3      	str	r3, [r4, #40]	; 0x28
 801aa66:	4b05      	ldr	r3, [pc, #20]	; (801aa7c <std+0x40>)
 801aa68:	62e3      	str	r3, [r4, #44]	; 0x2c
 801aa6a:	4b05      	ldr	r3, [pc, #20]	; (801aa80 <std+0x44>)
 801aa6c:	6224      	str	r4, [r4, #32]
 801aa6e:	6323      	str	r3, [r4, #48]	; 0x30
 801aa70:	bd10      	pop	{r4, pc}
 801aa72:	bf00      	nop
 801aa74:	0801aef1 	.word	0x0801aef1
 801aa78:	0801af13 	.word	0x0801af13
 801aa7c:	0801af4b 	.word	0x0801af4b
 801aa80:	0801af6f 	.word	0x0801af6f

0801aa84 <_cleanup_r>:
 801aa84:	4901      	ldr	r1, [pc, #4]	; (801aa8c <_cleanup_r+0x8>)
 801aa86:	f000 b8af 	b.w	801abe8 <_fwalk_reent>
 801aa8a:	bf00      	nop
 801aa8c:	0801a9c5 	.word	0x0801a9c5

0801aa90 <__sfmoreglue>:
 801aa90:	b570      	push	{r4, r5, r6, lr}
 801aa92:	1e4a      	subs	r2, r1, #1
 801aa94:	2568      	movs	r5, #104	; 0x68
 801aa96:	4355      	muls	r5, r2
 801aa98:	460e      	mov	r6, r1
 801aa9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801aa9e:	f000 f979 	bl	801ad94 <_malloc_r>
 801aaa2:	4604      	mov	r4, r0
 801aaa4:	b140      	cbz	r0, 801aab8 <__sfmoreglue+0x28>
 801aaa6:	2100      	movs	r1, #0
 801aaa8:	e9c0 1600 	strd	r1, r6, [r0]
 801aaac:	300c      	adds	r0, #12
 801aaae:	60a0      	str	r0, [r4, #8]
 801aab0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801aab4:	f7ff fb42 	bl	801a13c <memset>
 801aab8:	4620      	mov	r0, r4
 801aaba:	bd70      	pop	{r4, r5, r6, pc}

0801aabc <__sfp_lock_acquire>:
 801aabc:	4801      	ldr	r0, [pc, #4]	; (801aac4 <__sfp_lock_acquire+0x8>)
 801aabe:	f000 b8b3 	b.w	801ac28 <__retarget_lock_acquire_recursive>
 801aac2:	bf00      	nop
 801aac4:	200103ec 	.word	0x200103ec

0801aac8 <__sfp_lock_release>:
 801aac8:	4801      	ldr	r0, [pc, #4]	; (801aad0 <__sfp_lock_release+0x8>)
 801aaca:	f000 b8ae 	b.w	801ac2a <__retarget_lock_release_recursive>
 801aace:	bf00      	nop
 801aad0:	200103ec 	.word	0x200103ec

0801aad4 <__sinit_lock_acquire>:
 801aad4:	4801      	ldr	r0, [pc, #4]	; (801aadc <__sinit_lock_acquire+0x8>)
 801aad6:	f000 b8a7 	b.w	801ac28 <__retarget_lock_acquire_recursive>
 801aada:	bf00      	nop
 801aadc:	200103e7 	.word	0x200103e7

0801aae0 <__sinit_lock_release>:
 801aae0:	4801      	ldr	r0, [pc, #4]	; (801aae8 <__sinit_lock_release+0x8>)
 801aae2:	f000 b8a2 	b.w	801ac2a <__retarget_lock_release_recursive>
 801aae6:	bf00      	nop
 801aae8:	200103e7 	.word	0x200103e7

0801aaec <__sinit>:
 801aaec:	b510      	push	{r4, lr}
 801aaee:	4604      	mov	r4, r0
 801aaf0:	f7ff fff0 	bl	801aad4 <__sinit_lock_acquire>
 801aaf4:	69a3      	ldr	r3, [r4, #24]
 801aaf6:	b11b      	cbz	r3, 801ab00 <__sinit+0x14>
 801aaf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aafc:	f7ff bff0 	b.w	801aae0 <__sinit_lock_release>
 801ab00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ab04:	6523      	str	r3, [r4, #80]	; 0x50
 801ab06:	4b13      	ldr	r3, [pc, #76]	; (801ab54 <__sinit+0x68>)
 801ab08:	4a13      	ldr	r2, [pc, #76]	; (801ab58 <__sinit+0x6c>)
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	62a2      	str	r2, [r4, #40]	; 0x28
 801ab0e:	42a3      	cmp	r3, r4
 801ab10:	bf04      	itt	eq
 801ab12:	2301      	moveq	r3, #1
 801ab14:	61a3      	streq	r3, [r4, #24]
 801ab16:	4620      	mov	r0, r4
 801ab18:	f000 f820 	bl	801ab5c <__sfp>
 801ab1c:	6060      	str	r0, [r4, #4]
 801ab1e:	4620      	mov	r0, r4
 801ab20:	f000 f81c 	bl	801ab5c <__sfp>
 801ab24:	60a0      	str	r0, [r4, #8]
 801ab26:	4620      	mov	r0, r4
 801ab28:	f000 f818 	bl	801ab5c <__sfp>
 801ab2c:	2200      	movs	r2, #0
 801ab2e:	60e0      	str	r0, [r4, #12]
 801ab30:	2104      	movs	r1, #4
 801ab32:	6860      	ldr	r0, [r4, #4]
 801ab34:	f7ff ff82 	bl	801aa3c <std>
 801ab38:	68a0      	ldr	r0, [r4, #8]
 801ab3a:	2201      	movs	r2, #1
 801ab3c:	2109      	movs	r1, #9
 801ab3e:	f7ff ff7d 	bl	801aa3c <std>
 801ab42:	68e0      	ldr	r0, [r4, #12]
 801ab44:	2202      	movs	r2, #2
 801ab46:	2112      	movs	r1, #18
 801ab48:	f7ff ff78 	bl	801aa3c <std>
 801ab4c:	2301      	movs	r3, #1
 801ab4e:	61a3      	str	r3, [r4, #24]
 801ab50:	e7d2      	b.n	801aaf8 <__sinit+0xc>
 801ab52:	bf00      	nop
 801ab54:	0801b318 	.word	0x0801b318
 801ab58:	0801aa85 	.word	0x0801aa85

0801ab5c <__sfp>:
 801ab5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab5e:	4607      	mov	r7, r0
 801ab60:	f7ff ffac 	bl	801aabc <__sfp_lock_acquire>
 801ab64:	4b1e      	ldr	r3, [pc, #120]	; (801abe0 <__sfp+0x84>)
 801ab66:	681e      	ldr	r6, [r3, #0]
 801ab68:	69b3      	ldr	r3, [r6, #24]
 801ab6a:	b913      	cbnz	r3, 801ab72 <__sfp+0x16>
 801ab6c:	4630      	mov	r0, r6
 801ab6e:	f7ff ffbd 	bl	801aaec <__sinit>
 801ab72:	3648      	adds	r6, #72	; 0x48
 801ab74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ab78:	3b01      	subs	r3, #1
 801ab7a:	d503      	bpl.n	801ab84 <__sfp+0x28>
 801ab7c:	6833      	ldr	r3, [r6, #0]
 801ab7e:	b30b      	cbz	r3, 801abc4 <__sfp+0x68>
 801ab80:	6836      	ldr	r6, [r6, #0]
 801ab82:	e7f7      	b.n	801ab74 <__sfp+0x18>
 801ab84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ab88:	b9d5      	cbnz	r5, 801abc0 <__sfp+0x64>
 801ab8a:	4b16      	ldr	r3, [pc, #88]	; (801abe4 <__sfp+0x88>)
 801ab8c:	60e3      	str	r3, [r4, #12]
 801ab8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ab92:	6665      	str	r5, [r4, #100]	; 0x64
 801ab94:	f000 f847 	bl	801ac26 <__retarget_lock_init_recursive>
 801ab98:	f7ff ff96 	bl	801aac8 <__sfp_lock_release>
 801ab9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801aba0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801aba4:	6025      	str	r5, [r4, #0]
 801aba6:	61a5      	str	r5, [r4, #24]
 801aba8:	2208      	movs	r2, #8
 801abaa:	4629      	mov	r1, r5
 801abac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801abb0:	f7ff fac4 	bl	801a13c <memset>
 801abb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801abb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801abbc:	4620      	mov	r0, r4
 801abbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801abc0:	3468      	adds	r4, #104	; 0x68
 801abc2:	e7d9      	b.n	801ab78 <__sfp+0x1c>
 801abc4:	2104      	movs	r1, #4
 801abc6:	4638      	mov	r0, r7
 801abc8:	f7ff ff62 	bl	801aa90 <__sfmoreglue>
 801abcc:	4604      	mov	r4, r0
 801abce:	6030      	str	r0, [r6, #0]
 801abd0:	2800      	cmp	r0, #0
 801abd2:	d1d5      	bne.n	801ab80 <__sfp+0x24>
 801abd4:	f7ff ff78 	bl	801aac8 <__sfp_lock_release>
 801abd8:	230c      	movs	r3, #12
 801abda:	603b      	str	r3, [r7, #0]
 801abdc:	e7ee      	b.n	801abbc <__sfp+0x60>
 801abde:	bf00      	nop
 801abe0:	0801b318 	.word	0x0801b318
 801abe4:	ffff0001 	.word	0xffff0001

0801abe8 <_fwalk_reent>:
 801abe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801abec:	4606      	mov	r6, r0
 801abee:	4688      	mov	r8, r1
 801abf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801abf4:	2700      	movs	r7, #0
 801abf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801abfa:	f1b9 0901 	subs.w	r9, r9, #1
 801abfe:	d505      	bpl.n	801ac0c <_fwalk_reent+0x24>
 801ac00:	6824      	ldr	r4, [r4, #0]
 801ac02:	2c00      	cmp	r4, #0
 801ac04:	d1f7      	bne.n	801abf6 <_fwalk_reent+0xe>
 801ac06:	4638      	mov	r0, r7
 801ac08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac0c:	89ab      	ldrh	r3, [r5, #12]
 801ac0e:	2b01      	cmp	r3, #1
 801ac10:	d907      	bls.n	801ac22 <_fwalk_reent+0x3a>
 801ac12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ac16:	3301      	adds	r3, #1
 801ac18:	d003      	beq.n	801ac22 <_fwalk_reent+0x3a>
 801ac1a:	4629      	mov	r1, r5
 801ac1c:	4630      	mov	r0, r6
 801ac1e:	47c0      	blx	r8
 801ac20:	4307      	orrs	r7, r0
 801ac22:	3568      	adds	r5, #104	; 0x68
 801ac24:	e7e9      	b.n	801abfa <_fwalk_reent+0x12>

0801ac26 <__retarget_lock_init_recursive>:
 801ac26:	4770      	bx	lr

0801ac28 <__retarget_lock_acquire_recursive>:
 801ac28:	4770      	bx	lr

0801ac2a <__retarget_lock_release_recursive>:
 801ac2a:	4770      	bx	lr

0801ac2c <__swhatbuf_r>:
 801ac2c:	b570      	push	{r4, r5, r6, lr}
 801ac2e:	460e      	mov	r6, r1
 801ac30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac34:	2900      	cmp	r1, #0
 801ac36:	b096      	sub	sp, #88	; 0x58
 801ac38:	4614      	mov	r4, r2
 801ac3a:	461d      	mov	r5, r3
 801ac3c:	da07      	bge.n	801ac4e <__swhatbuf_r+0x22>
 801ac3e:	2300      	movs	r3, #0
 801ac40:	602b      	str	r3, [r5, #0]
 801ac42:	89b3      	ldrh	r3, [r6, #12]
 801ac44:	061a      	lsls	r2, r3, #24
 801ac46:	d410      	bmi.n	801ac6a <__swhatbuf_r+0x3e>
 801ac48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ac4c:	e00e      	b.n	801ac6c <__swhatbuf_r+0x40>
 801ac4e:	466a      	mov	r2, sp
 801ac50:	f000 f9b4 	bl	801afbc <_fstat_r>
 801ac54:	2800      	cmp	r0, #0
 801ac56:	dbf2      	blt.n	801ac3e <__swhatbuf_r+0x12>
 801ac58:	9a01      	ldr	r2, [sp, #4]
 801ac5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ac5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ac62:	425a      	negs	r2, r3
 801ac64:	415a      	adcs	r2, r3
 801ac66:	602a      	str	r2, [r5, #0]
 801ac68:	e7ee      	b.n	801ac48 <__swhatbuf_r+0x1c>
 801ac6a:	2340      	movs	r3, #64	; 0x40
 801ac6c:	2000      	movs	r0, #0
 801ac6e:	6023      	str	r3, [r4, #0]
 801ac70:	b016      	add	sp, #88	; 0x58
 801ac72:	bd70      	pop	{r4, r5, r6, pc}

0801ac74 <__smakebuf_r>:
 801ac74:	898b      	ldrh	r3, [r1, #12]
 801ac76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ac78:	079d      	lsls	r5, r3, #30
 801ac7a:	4606      	mov	r6, r0
 801ac7c:	460c      	mov	r4, r1
 801ac7e:	d507      	bpl.n	801ac90 <__smakebuf_r+0x1c>
 801ac80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ac84:	6023      	str	r3, [r4, #0]
 801ac86:	6123      	str	r3, [r4, #16]
 801ac88:	2301      	movs	r3, #1
 801ac8a:	6163      	str	r3, [r4, #20]
 801ac8c:	b002      	add	sp, #8
 801ac8e:	bd70      	pop	{r4, r5, r6, pc}
 801ac90:	ab01      	add	r3, sp, #4
 801ac92:	466a      	mov	r2, sp
 801ac94:	f7ff ffca 	bl	801ac2c <__swhatbuf_r>
 801ac98:	9900      	ldr	r1, [sp, #0]
 801ac9a:	4605      	mov	r5, r0
 801ac9c:	4630      	mov	r0, r6
 801ac9e:	f000 f879 	bl	801ad94 <_malloc_r>
 801aca2:	b948      	cbnz	r0, 801acb8 <__smakebuf_r+0x44>
 801aca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aca8:	059a      	lsls	r2, r3, #22
 801acaa:	d4ef      	bmi.n	801ac8c <__smakebuf_r+0x18>
 801acac:	f023 0303 	bic.w	r3, r3, #3
 801acb0:	f043 0302 	orr.w	r3, r3, #2
 801acb4:	81a3      	strh	r3, [r4, #12]
 801acb6:	e7e3      	b.n	801ac80 <__smakebuf_r+0xc>
 801acb8:	4b0d      	ldr	r3, [pc, #52]	; (801acf0 <__smakebuf_r+0x7c>)
 801acba:	62b3      	str	r3, [r6, #40]	; 0x28
 801acbc:	89a3      	ldrh	r3, [r4, #12]
 801acbe:	6020      	str	r0, [r4, #0]
 801acc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801acc4:	81a3      	strh	r3, [r4, #12]
 801acc6:	9b00      	ldr	r3, [sp, #0]
 801acc8:	6163      	str	r3, [r4, #20]
 801acca:	9b01      	ldr	r3, [sp, #4]
 801accc:	6120      	str	r0, [r4, #16]
 801acce:	b15b      	cbz	r3, 801ace8 <__smakebuf_r+0x74>
 801acd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801acd4:	4630      	mov	r0, r6
 801acd6:	f000 f983 	bl	801afe0 <_isatty_r>
 801acda:	b128      	cbz	r0, 801ace8 <__smakebuf_r+0x74>
 801acdc:	89a3      	ldrh	r3, [r4, #12]
 801acde:	f023 0303 	bic.w	r3, r3, #3
 801ace2:	f043 0301 	orr.w	r3, r3, #1
 801ace6:	81a3      	strh	r3, [r4, #12]
 801ace8:	89a0      	ldrh	r0, [r4, #12]
 801acea:	4305      	orrs	r5, r0
 801acec:	81a5      	strh	r5, [r4, #12]
 801acee:	e7cd      	b.n	801ac8c <__smakebuf_r+0x18>
 801acf0:	0801aa85 	.word	0x0801aa85

0801acf4 <_free_r>:
 801acf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801acf6:	2900      	cmp	r1, #0
 801acf8:	d048      	beq.n	801ad8c <_free_r+0x98>
 801acfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801acfe:	9001      	str	r0, [sp, #4]
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	f1a1 0404 	sub.w	r4, r1, #4
 801ad06:	bfb8      	it	lt
 801ad08:	18e4      	addlt	r4, r4, r3
 801ad0a:	f000 f98b 	bl	801b024 <__malloc_lock>
 801ad0e:	4a20      	ldr	r2, [pc, #128]	; (801ad90 <_free_r+0x9c>)
 801ad10:	9801      	ldr	r0, [sp, #4]
 801ad12:	6813      	ldr	r3, [r2, #0]
 801ad14:	4615      	mov	r5, r2
 801ad16:	b933      	cbnz	r3, 801ad26 <_free_r+0x32>
 801ad18:	6063      	str	r3, [r4, #4]
 801ad1a:	6014      	str	r4, [r2, #0]
 801ad1c:	b003      	add	sp, #12
 801ad1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ad22:	f000 b985 	b.w	801b030 <__malloc_unlock>
 801ad26:	42a3      	cmp	r3, r4
 801ad28:	d90b      	bls.n	801ad42 <_free_r+0x4e>
 801ad2a:	6821      	ldr	r1, [r4, #0]
 801ad2c:	1862      	adds	r2, r4, r1
 801ad2e:	4293      	cmp	r3, r2
 801ad30:	bf04      	itt	eq
 801ad32:	681a      	ldreq	r2, [r3, #0]
 801ad34:	685b      	ldreq	r3, [r3, #4]
 801ad36:	6063      	str	r3, [r4, #4]
 801ad38:	bf04      	itt	eq
 801ad3a:	1852      	addeq	r2, r2, r1
 801ad3c:	6022      	streq	r2, [r4, #0]
 801ad3e:	602c      	str	r4, [r5, #0]
 801ad40:	e7ec      	b.n	801ad1c <_free_r+0x28>
 801ad42:	461a      	mov	r2, r3
 801ad44:	685b      	ldr	r3, [r3, #4]
 801ad46:	b10b      	cbz	r3, 801ad4c <_free_r+0x58>
 801ad48:	42a3      	cmp	r3, r4
 801ad4a:	d9fa      	bls.n	801ad42 <_free_r+0x4e>
 801ad4c:	6811      	ldr	r1, [r2, #0]
 801ad4e:	1855      	adds	r5, r2, r1
 801ad50:	42a5      	cmp	r5, r4
 801ad52:	d10b      	bne.n	801ad6c <_free_r+0x78>
 801ad54:	6824      	ldr	r4, [r4, #0]
 801ad56:	4421      	add	r1, r4
 801ad58:	1854      	adds	r4, r2, r1
 801ad5a:	42a3      	cmp	r3, r4
 801ad5c:	6011      	str	r1, [r2, #0]
 801ad5e:	d1dd      	bne.n	801ad1c <_free_r+0x28>
 801ad60:	681c      	ldr	r4, [r3, #0]
 801ad62:	685b      	ldr	r3, [r3, #4]
 801ad64:	6053      	str	r3, [r2, #4]
 801ad66:	4421      	add	r1, r4
 801ad68:	6011      	str	r1, [r2, #0]
 801ad6a:	e7d7      	b.n	801ad1c <_free_r+0x28>
 801ad6c:	d902      	bls.n	801ad74 <_free_r+0x80>
 801ad6e:	230c      	movs	r3, #12
 801ad70:	6003      	str	r3, [r0, #0]
 801ad72:	e7d3      	b.n	801ad1c <_free_r+0x28>
 801ad74:	6825      	ldr	r5, [r4, #0]
 801ad76:	1961      	adds	r1, r4, r5
 801ad78:	428b      	cmp	r3, r1
 801ad7a:	bf04      	itt	eq
 801ad7c:	6819      	ldreq	r1, [r3, #0]
 801ad7e:	685b      	ldreq	r3, [r3, #4]
 801ad80:	6063      	str	r3, [r4, #4]
 801ad82:	bf04      	itt	eq
 801ad84:	1949      	addeq	r1, r1, r5
 801ad86:	6021      	streq	r1, [r4, #0]
 801ad88:	6054      	str	r4, [r2, #4]
 801ad8a:	e7c7      	b.n	801ad1c <_free_r+0x28>
 801ad8c:	b003      	add	sp, #12
 801ad8e:	bd30      	pop	{r4, r5, pc}
 801ad90:	2000ae44 	.word	0x2000ae44

0801ad94 <_malloc_r>:
 801ad94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad96:	1ccd      	adds	r5, r1, #3
 801ad98:	f025 0503 	bic.w	r5, r5, #3
 801ad9c:	3508      	adds	r5, #8
 801ad9e:	2d0c      	cmp	r5, #12
 801ada0:	bf38      	it	cc
 801ada2:	250c      	movcc	r5, #12
 801ada4:	2d00      	cmp	r5, #0
 801ada6:	4606      	mov	r6, r0
 801ada8:	db01      	blt.n	801adae <_malloc_r+0x1a>
 801adaa:	42a9      	cmp	r1, r5
 801adac:	d903      	bls.n	801adb6 <_malloc_r+0x22>
 801adae:	230c      	movs	r3, #12
 801adb0:	6033      	str	r3, [r6, #0]
 801adb2:	2000      	movs	r0, #0
 801adb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801adb6:	f000 f935 	bl	801b024 <__malloc_lock>
 801adba:	4921      	ldr	r1, [pc, #132]	; (801ae40 <_malloc_r+0xac>)
 801adbc:	680a      	ldr	r2, [r1, #0]
 801adbe:	4614      	mov	r4, r2
 801adc0:	b99c      	cbnz	r4, 801adea <_malloc_r+0x56>
 801adc2:	4f20      	ldr	r7, [pc, #128]	; (801ae44 <_malloc_r+0xb0>)
 801adc4:	683b      	ldr	r3, [r7, #0]
 801adc6:	b923      	cbnz	r3, 801add2 <_malloc_r+0x3e>
 801adc8:	4621      	mov	r1, r4
 801adca:	4630      	mov	r0, r6
 801adcc:	f000 f83c 	bl	801ae48 <_sbrk_r>
 801add0:	6038      	str	r0, [r7, #0]
 801add2:	4629      	mov	r1, r5
 801add4:	4630      	mov	r0, r6
 801add6:	f000 f837 	bl	801ae48 <_sbrk_r>
 801adda:	1c43      	adds	r3, r0, #1
 801addc:	d123      	bne.n	801ae26 <_malloc_r+0x92>
 801adde:	230c      	movs	r3, #12
 801ade0:	6033      	str	r3, [r6, #0]
 801ade2:	4630      	mov	r0, r6
 801ade4:	f000 f924 	bl	801b030 <__malloc_unlock>
 801ade8:	e7e3      	b.n	801adb2 <_malloc_r+0x1e>
 801adea:	6823      	ldr	r3, [r4, #0]
 801adec:	1b5b      	subs	r3, r3, r5
 801adee:	d417      	bmi.n	801ae20 <_malloc_r+0x8c>
 801adf0:	2b0b      	cmp	r3, #11
 801adf2:	d903      	bls.n	801adfc <_malloc_r+0x68>
 801adf4:	6023      	str	r3, [r4, #0]
 801adf6:	441c      	add	r4, r3
 801adf8:	6025      	str	r5, [r4, #0]
 801adfa:	e004      	b.n	801ae06 <_malloc_r+0x72>
 801adfc:	6863      	ldr	r3, [r4, #4]
 801adfe:	42a2      	cmp	r2, r4
 801ae00:	bf0c      	ite	eq
 801ae02:	600b      	streq	r3, [r1, #0]
 801ae04:	6053      	strne	r3, [r2, #4]
 801ae06:	4630      	mov	r0, r6
 801ae08:	f000 f912 	bl	801b030 <__malloc_unlock>
 801ae0c:	f104 000b 	add.w	r0, r4, #11
 801ae10:	1d23      	adds	r3, r4, #4
 801ae12:	f020 0007 	bic.w	r0, r0, #7
 801ae16:	1ac2      	subs	r2, r0, r3
 801ae18:	d0cc      	beq.n	801adb4 <_malloc_r+0x20>
 801ae1a:	1a1b      	subs	r3, r3, r0
 801ae1c:	50a3      	str	r3, [r4, r2]
 801ae1e:	e7c9      	b.n	801adb4 <_malloc_r+0x20>
 801ae20:	4622      	mov	r2, r4
 801ae22:	6864      	ldr	r4, [r4, #4]
 801ae24:	e7cc      	b.n	801adc0 <_malloc_r+0x2c>
 801ae26:	1cc4      	adds	r4, r0, #3
 801ae28:	f024 0403 	bic.w	r4, r4, #3
 801ae2c:	42a0      	cmp	r0, r4
 801ae2e:	d0e3      	beq.n	801adf8 <_malloc_r+0x64>
 801ae30:	1a21      	subs	r1, r4, r0
 801ae32:	4630      	mov	r0, r6
 801ae34:	f000 f808 	bl	801ae48 <_sbrk_r>
 801ae38:	3001      	adds	r0, #1
 801ae3a:	d1dd      	bne.n	801adf8 <_malloc_r+0x64>
 801ae3c:	e7cf      	b.n	801adde <_malloc_r+0x4a>
 801ae3e:	bf00      	nop
 801ae40:	2000ae44 	.word	0x2000ae44
 801ae44:	2000ae48 	.word	0x2000ae48

0801ae48 <_sbrk_r>:
 801ae48:	b538      	push	{r3, r4, r5, lr}
 801ae4a:	4d06      	ldr	r5, [pc, #24]	; (801ae64 <_sbrk_r+0x1c>)
 801ae4c:	2300      	movs	r3, #0
 801ae4e:	4604      	mov	r4, r0
 801ae50:	4608      	mov	r0, r1
 801ae52:	602b      	str	r3, [r5, #0]
 801ae54:	f7f5 fe5a 	bl	8010b0c <_sbrk>
 801ae58:	1c43      	adds	r3, r0, #1
 801ae5a:	d102      	bne.n	801ae62 <_sbrk_r+0x1a>
 801ae5c:	682b      	ldr	r3, [r5, #0]
 801ae5e:	b103      	cbz	r3, 801ae62 <_sbrk_r+0x1a>
 801ae60:	6023      	str	r3, [r4, #0]
 801ae62:	bd38      	pop	{r3, r4, r5, pc}
 801ae64:	200103f0 	.word	0x200103f0

0801ae68 <_raise_r>:
 801ae68:	291f      	cmp	r1, #31
 801ae6a:	b538      	push	{r3, r4, r5, lr}
 801ae6c:	4604      	mov	r4, r0
 801ae6e:	460d      	mov	r5, r1
 801ae70:	d904      	bls.n	801ae7c <_raise_r+0x14>
 801ae72:	2316      	movs	r3, #22
 801ae74:	6003      	str	r3, [r0, #0]
 801ae76:	f04f 30ff 	mov.w	r0, #4294967295
 801ae7a:	bd38      	pop	{r3, r4, r5, pc}
 801ae7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ae7e:	b112      	cbz	r2, 801ae86 <_raise_r+0x1e>
 801ae80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ae84:	b94b      	cbnz	r3, 801ae9a <_raise_r+0x32>
 801ae86:	4620      	mov	r0, r4
 801ae88:	f000 f830 	bl	801aeec <_getpid_r>
 801ae8c:	462a      	mov	r2, r5
 801ae8e:	4601      	mov	r1, r0
 801ae90:	4620      	mov	r0, r4
 801ae92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ae96:	f000 b817 	b.w	801aec8 <_kill_r>
 801ae9a:	2b01      	cmp	r3, #1
 801ae9c:	d00a      	beq.n	801aeb4 <_raise_r+0x4c>
 801ae9e:	1c59      	adds	r1, r3, #1
 801aea0:	d103      	bne.n	801aeaa <_raise_r+0x42>
 801aea2:	2316      	movs	r3, #22
 801aea4:	6003      	str	r3, [r0, #0]
 801aea6:	2001      	movs	r0, #1
 801aea8:	e7e7      	b.n	801ae7a <_raise_r+0x12>
 801aeaa:	2400      	movs	r4, #0
 801aeac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801aeb0:	4628      	mov	r0, r5
 801aeb2:	4798      	blx	r3
 801aeb4:	2000      	movs	r0, #0
 801aeb6:	e7e0      	b.n	801ae7a <_raise_r+0x12>

0801aeb8 <raise>:
 801aeb8:	4b02      	ldr	r3, [pc, #8]	; (801aec4 <raise+0xc>)
 801aeba:	4601      	mov	r1, r0
 801aebc:	6818      	ldr	r0, [r3, #0]
 801aebe:	f7ff bfd3 	b.w	801ae68 <_raise_r>
 801aec2:	bf00      	nop
 801aec4:	200000a4 	.word	0x200000a4

0801aec8 <_kill_r>:
 801aec8:	b538      	push	{r3, r4, r5, lr}
 801aeca:	4d07      	ldr	r5, [pc, #28]	; (801aee8 <_kill_r+0x20>)
 801aecc:	2300      	movs	r3, #0
 801aece:	4604      	mov	r4, r0
 801aed0:	4608      	mov	r0, r1
 801aed2:	4611      	mov	r1, r2
 801aed4:	602b      	str	r3, [r5, #0]
 801aed6:	f7f5 fd91 	bl	80109fc <_kill>
 801aeda:	1c43      	adds	r3, r0, #1
 801aedc:	d102      	bne.n	801aee4 <_kill_r+0x1c>
 801aede:	682b      	ldr	r3, [r5, #0]
 801aee0:	b103      	cbz	r3, 801aee4 <_kill_r+0x1c>
 801aee2:	6023      	str	r3, [r4, #0]
 801aee4:	bd38      	pop	{r3, r4, r5, pc}
 801aee6:	bf00      	nop
 801aee8:	200103f0 	.word	0x200103f0

0801aeec <_getpid_r>:
 801aeec:	f7f5 bd7e 	b.w	80109ec <_getpid>

0801aef0 <__sread>:
 801aef0:	b510      	push	{r4, lr}
 801aef2:	460c      	mov	r4, r1
 801aef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aef8:	f000 f8a0 	bl	801b03c <_read_r>
 801aefc:	2800      	cmp	r0, #0
 801aefe:	bfab      	itete	ge
 801af00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801af02:	89a3      	ldrhlt	r3, [r4, #12]
 801af04:	181b      	addge	r3, r3, r0
 801af06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801af0a:	bfac      	ite	ge
 801af0c:	6563      	strge	r3, [r4, #84]	; 0x54
 801af0e:	81a3      	strhlt	r3, [r4, #12]
 801af10:	bd10      	pop	{r4, pc}

0801af12 <__swrite>:
 801af12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af16:	461f      	mov	r7, r3
 801af18:	898b      	ldrh	r3, [r1, #12]
 801af1a:	05db      	lsls	r3, r3, #23
 801af1c:	4605      	mov	r5, r0
 801af1e:	460c      	mov	r4, r1
 801af20:	4616      	mov	r6, r2
 801af22:	d505      	bpl.n	801af30 <__swrite+0x1e>
 801af24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af28:	2302      	movs	r3, #2
 801af2a:	2200      	movs	r2, #0
 801af2c:	f000 f868 	bl	801b000 <_lseek_r>
 801af30:	89a3      	ldrh	r3, [r4, #12]
 801af32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801af36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801af3a:	81a3      	strh	r3, [r4, #12]
 801af3c:	4632      	mov	r2, r6
 801af3e:	463b      	mov	r3, r7
 801af40:	4628      	mov	r0, r5
 801af42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af46:	f000 b817 	b.w	801af78 <_write_r>

0801af4a <__sseek>:
 801af4a:	b510      	push	{r4, lr}
 801af4c:	460c      	mov	r4, r1
 801af4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af52:	f000 f855 	bl	801b000 <_lseek_r>
 801af56:	1c43      	adds	r3, r0, #1
 801af58:	89a3      	ldrh	r3, [r4, #12]
 801af5a:	bf15      	itete	ne
 801af5c:	6560      	strne	r0, [r4, #84]	; 0x54
 801af5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801af62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801af66:	81a3      	strheq	r3, [r4, #12]
 801af68:	bf18      	it	ne
 801af6a:	81a3      	strhne	r3, [r4, #12]
 801af6c:	bd10      	pop	{r4, pc}

0801af6e <__sclose>:
 801af6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af72:	f000 b813 	b.w	801af9c <_close_r>
	...

0801af78 <_write_r>:
 801af78:	b538      	push	{r3, r4, r5, lr}
 801af7a:	4d07      	ldr	r5, [pc, #28]	; (801af98 <_write_r+0x20>)
 801af7c:	4604      	mov	r4, r0
 801af7e:	4608      	mov	r0, r1
 801af80:	4611      	mov	r1, r2
 801af82:	2200      	movs	r2, #0
 801af84:	602a      	str	r2, [r5, #0]
 801af86:	461a      	mov	r2, r3
 801af88:	f7f5 fd6f 	bl	8010a6a <_write>
 801af8c:	1c43      	adds	r3, r0, #1
 801af8e:	d102      	bne.n	801af96 <_write_r+0x1e>
 801af90:	682b      	ldr	r3, [r5, #0]
 801af92:	b103      	cbz	r3, 801af96 <_write_r+0x1e>
 801af94:	6023      	str	r3, [r4, #0]
 801af96:	bd38      	pop	{r3, r4, r5, pc}
 801af98:	200103f0 	.word	0x200103f0

0801af9c <_close_r>:
 801af9c:	b538      	push	{r3, r4, r5, lr}
 801af9e:	4d06      	ldr	r5, [pc, #24]	; (801afb8 <_close_r+0x1c>)
 801afa0:	2300      	movs	r3, #0
 801afa2:	4604      	mov	r4, r0
 801afa4:	4608      	mov	r0, r1
 801afa6:	602b      	str	r3, [r5, #0]
 801afa8:	f7f5 fd7b 	bl	8010aa2 <_close>
 801afac:	1c43      	adds	r3, r0, #1
 801afae:	d102      	bne.n	801afb6 <_close_r+0x1a>
 801afb0:	682b      	ldr	r3, [r5, #0]
 801afb2:	b103      	cbz	r3, 801afb6 <_close_r+0x1a>
 801afb4:	6023      	str	r3, [r4, #0]
 801afb6:	bd38      	pop	{r3, r4, r5, pc}
 801afb8:	200103f0 	.word	0x200103f0

0801afbc <_fstat_r>:
 801afbc:	b538      	push	{r3, r4, r5, lr}
 801afbe:	4d07      	ldr	r5, [pc, #28]	; (801afdc <_fstat_r+0x20>)
 801afc0:	2300      	movs	r3, #0
 801afc2:	4604      	mov	r4, r0
 801afc4:	4608      	mov	r0, r1
 801afc6:	4611      	mov	r1, r2
 801afc8:	602b      	str	r3, [r5, #0]
 801afca:	f7f5 fd76 	bl	8010aba <_fstat>
 801afce:	1c43      	adds	r3, r0, #1
 801afd0:	d102      	bne.n	801afd8 <_fstat_r+0x1c>
 801afd2:	682b      	ldr	r3, [r5, #0]
 801afd4:	b103      	cbz	r3, 801afd8 <_fstat_r+0x1c>
 801afd6:	6023      	str	r3, [r4, #0]
 801afd8:	bd38      	pop	{r3, r4, r5, pc}
 801afda:	bf00      	nop
 801afdc:	200103f0 	.word	0x200103f0

0801afe0 <_isatty_r>:
 801afe0:	b538      	push	{r3, r4, r5, lr}
 801afe2:	4d06      	ldr	r5, [pc, #24]	; (801affc <_isatty_r+0x1c>)
 801afe4:	2300      	movs	r3, #0
 801afe6:	4604      	mov	r4, r0
 801afe8:	4608      	mov	r0, r1
 801afea:	602b      	str	r3, [r5, #0]
 801afec:	f7f5 fd75 	bl	8010ada <_isatty>
 801aff0:	1c43      	adds	r3, r0, #1
 801aff2:	d102      	bne.n	801affa <_isatty_r+0x1a>
 801aff4:	682b      	ldr	r3, [r5, #0]
 801aff6:	b103      	cbz	r3, 801affa <_isatty_r+0x1a>
 801aff8:	6023      	str	r3, [r4, #0]
 801affa:	bd38      	pop	{r3, r4, r5, pc}
 801affc:	200103f0 	.word	0x200103f0

0801b000 <_lseek_r>:
 801b000:	b538      	push	{r3, r4, r5, lr}
 801b002:	4d07      	ldr	r5, [pc, #28]	; (801b020 <_lseek_r+0x20>)
 801b004:	4604      	mov	r4, r0
 801b006:	4608      	mov	r0, r1
 801b008:	4611      	mov	r1, r2
 801b00a:	2200      	movs	r2, #0
 801b00c:	602a      	str	r2, [r5, #0]
 801b00e:	461a      	mov	r2, r3
 801b010:	f7f5 fd6e 	bl	8010af0 <_lseek>
 801b014:	1c43      	adds	r3, r0, #1
 801b016:	d102      	bne.n	801b01e <_lseek_r+0x1e>
 801b018:	682b      	ldr	r3, [r5, #0]
 801b01a:	b103      	cbz	r3, 801b01e <_lseek_r+0x1e>
 801b01c:	6023      	str	r3, [r4, #0]
 801b01e:	bd38      	pop	{r3, r4, r5, pc}
 801b020:	200103f0 	.word	0x200103f0

0801b024 <__malloc_lock>:
 801b024:	4801      	ldr	r0, [pc, #4]	; (801b02c <__malloc_lock+0x8>)
 801b026:	f7ff bdff 	b.w	801ac28 <__retarget_lock_acquire_recursive>
 801b02a:	bf00      	nop
 801b02c:	200103e8 	.word	0x200103e8

0801b030 <__malloc_unlock>:
 801b030:	4801      	ldr	r0, [pc, #4]	; (801b038 <__malloc_unlock+0x8>)
 801b032:	f7ff bdfa 	b.w	801ac2a <__retarget_lock_release_recursive>
 801b036:	bf00      	nop
 801b038:	200103e8 	.word	0x200103e8

0801b03c <_read_r>:
 801b03c:	b538      	push	{r3, r4, r5, lr}
 801b03e:	4d07      	ldr	r5, [pc, #28]	; (801b05c <_read_r+0x20>)
 801b040:	4604      	mov	r4, r0
 801b042:	4608      	mov	r0, r1
 801b044:	4611      	mov	r1, r2
 801b046:	2200      	movs	r2, #0
 801b048:	602a      	str	r2, [r5, #0]
 801b04a:	461a      	mov	r2, r3
 801b04c:	f7f5 fcf0 	bl	8010a30 <_read>
 801b050:	1c43      	adds	r3, r0, #1
 801b052:	d102      	bne.n	801b05a <_read_r+0x1e>
 801b054:	682b      	ldr	r3, [r5, #0]
 801b056:	b103      	cbz	r3, 801b05a <_read_r+0x1e>
 801b058:	6023      	str	r3, [r4, #0]
 801b05a:	bd38      	pop	{r3, r4, r5, pc}
 801b05c:	200103f0 	.word	0x200103f0

0801b060 <_init>:
 801b060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b062:	bf00      	nop
 801b064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b066:	bc08      	pop	{r3}
 801b068:	469e      	mov	lr, r3
 801b06a:	4770      	bx	lr

0801b06c <_fini>:
 801b06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b06e:	bf00      	nop
 801b070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b072:	bc08      	pop	{r3}
 801b074:	469e      	mov	lr, r3
 801b076:	4770      	bx	lr
